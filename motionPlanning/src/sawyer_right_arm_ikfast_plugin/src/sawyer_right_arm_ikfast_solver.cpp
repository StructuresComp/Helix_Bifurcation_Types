/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-01-18 00:17:12.718000
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKsin(j[2]);
x1=IKcos(j[5]);
x2=IKcos(j[6]);
x3=IKcos(j[2]);
x4=IKcos(j[4]);
x5=IKcos(j[3]);
x6=IKsin(j[4]);
x7=IKsin(j[6]);
x8=IKsin(j[5]);
x9=IKsin(j[3]);
x10=IKsin(j[1]);
x11=IKcos(j[1]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((0.984809344788631)*x2);
x15=((0.984809344788631)*x7);
x16=((0.173639150012279)*x7);
x17=((1.0)*x3);
x18=((0.173639150012279)*x2);
x19=((1.0)*x11);
x20=((0.4)*x10);
x21=((1.0)*x8);
x22=((1.0)*x1);
x23=(x0*x4);
x24=(x10*x9);
x25=(x0*x6);
x26=(x0*x9);
x27=(x11*x3);
x28=(x10*x5);
x29=(x19*x5);
x30=((1.0)*x24);
x31=(x21*x26);
x32=(x19*x25);
x33=(((x23*x5))+((x3*x6)));
x34=((((-1.0)*x25*x5))+((x3*x4)));
x35=((((-1.0)*x29))+((x24*x3)));
x36=((((-1.0)*x30))+((x27*x5)));
x37=(x30+(((-1.0)*x11*x17*x5)));
x38=(((x19*x9))+((x17*x28)));
x39=((((-1.0)*x28))+(((-1.0)*x11*x17*x9)));
x40=(x35*x8);
x41=(x36*x4);
x42=(x1*x33);
x43=(x37*x6);
x44=(x39*x8);
x45=((((-1.0)*x31))+x42);
x46=((((-1.0)*x32))+x41);
x47=((((-1.0)*x22*x33))+x31);
x48=((((-1.0)*x19*x23))+x43);
x49=((((-1.0)*x38*x4))+((x10*x25)));
x50=(((x38*x6))+((x10*x23)));
x51=(x1*x46);
x52=(x1*x49);
x53=(x40+x52);
x54=(((x14*x45))+((x15*x34)));
x55=(x44+x51);
x56=(((x18*x34))+((x16*x47)));
x57=(((x1*(((((-1.0)*x17*x24))+x29))))+((x49*x8)));
x58=((((-1.0)*x22*x46))+(((-1.0)*x21*x39)));
x59=((((-1.0)*x40))+(((-1.0)*x52)));
x60=(((x16*x34))+((x18*x45))+((x15*x47))+((x14*x34)));
x61=((((-1.0)*x18*x50))+((x14*x53))+((x15*x50))+(((-1.0)*x16*x59)));
IkReal x63=((1.0)*x50);
x62=((((-1.0)*x18*x53))+(((-1.0)*x16*x63))+(((-1.0)*x14*x63))+(((-1.0)*x15*x59)));
eerot[0]=(((x12*x60))+((x13*x62)));
eerot[1]=(((x13*x61))+((x12*((x56+(((-1.0)*x54)))))));
eerot[2]=(((x13*x57))+((x12*(((((-1.0)*x22*x26))+(((-1.0)*x21*x33)))))));
eetrans[0]=((((0.081)*(IKcos(j[0]))))+(((-0.05)*(IKsin(j[0]))))+(((((-0.1425)+(((((((0.00292592)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(((((0.00292592)*(IKcos(j[2]))*(IKsin(j[4]))))+(((0.00292592)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.4)*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.00292592)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((-0.00292592)*(IKcos(j[2]))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((-0.3055)*(IKcos(j[2]))*(IKsin(j[4]))))+(((-0.3055)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((-0.3055)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.1363)*(IKcos(j[2]))*(IKcos(j[4]))))+(((0.1363)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((0.00356216)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(((((0.00356216)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((0.00356216)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((0.00356216)*(IKcos(j[2]))*(IKcos(j[4]))))+(((-0.00356216)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((0.1685)*(IKcos(j[2]))))))*(IKsin(j[0]))))+(((((((((((0.1363)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.1363)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((0.3055)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-0.3055)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.3055)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((-0.4)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((0.00356216)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.00356216)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.00356216)*(IKcos(j[1]))*(IKcos(j[3]))))+(((0.00356216)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.4)*(IKcos(j[1]))*(IKcos(j[3]))))+(((0.1363)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((0.00292592)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((0.00292592)*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.00292592)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((-0.00356216)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.00356216)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.00356216)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[6]))))+(((((((0.3055)*(IKcos(j[1]))*(IKcos(j[3]))))+(((-0.3055)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((((((0.00292592)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.00292592)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.00292592)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.00292592)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-0.1685)*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.4)*(IKcos(j[1]))))))*(IKcos(j[0])))));
eerot[3]=(((x12*x62))+(((-1.0)*x13*x60)));
eerot[4]=(((x12*x61))+((x13*((x54+(((-1.0)*x56)))))));
eerot[5]=(((x12*x57))+((x13*((((x1*x26))+((x33*x8)))))));
eetrans[1]=((((((0.1425)+(((0.3055)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.1685)*(IKcos(j[2]))))+(((-0.1363)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.4)*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((((((0.00292592)*(IKcos(j[2]))*(IKsin(j[4]))))+(((0.00292592)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((-0.00292592)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((-0.00356216)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((((((0.00356216)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((0.00356216)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((0.00292592)*(IKcos(j[2]))*(IKcos(j[4]))))+(((-0.00292592)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((0.3055)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((0.3055)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.1363)*(IKcos(j[2]))*(IKcos(j[4]))))+(((((((0.00356216)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((-0.00356216)*(IKcos(j[2]))*(IKcos(j[4]))))))*(IKcos(j[6]))))))*(IKcos(j[0]))))+(((0.05)*(IKcos(j[0]))))+(((0.081)*(IKsin(j[0]))))+(((((((((((0.1363)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.1363)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((0.3055)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-0.3055)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.3055)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((-0.4)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((0.00356216)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.00356216)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.00356216)*(IKcos(j[1]))*(IKcos(j[3]))))+(((0.00356216)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.4)*(IKcos(j[1]))*(IKcos(j[3]))))+(((0.1363)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((0.00292592)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((0.00292592)*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.00292592)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((-0.00356216)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.00356216)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.00356216)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[6]))))+(((((((0.3055)*(IKcos(j[1]))*(IKcos(j[3]))))+(((-0.3055)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((((((0.00292592)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.00292592)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.00292592)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.00292592)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-0.1685)*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.4)*(IKcos(j[1]))))))*(IKsin(j[0])))));
eerot[6]=(((x15*x58))+((x18*x55))+((x16*x48))+((x14*x48)));
eerot[7]=((((-1.0)*x15*x48))+((x16*x58))+((x18*x48))+(((-1.0)*x14*x55)));
eerot[8]=(((x1*x39))+((x8*(((((-1.0)*x41))+x32)))));
IkReal x64=(x11*x23);
IkReal x65=((1.0)*x20);
IkReal x66=(x27*x9);
eetrans[2]=((0.317)+((x8*(((((-0.3055)*x41))+(((0.3055)*x11*x25))))))+(((-0.1685)*x0*x11))+(((0.1363)*x64))+((x7*(((((-0.00356216)*x44))+(((-0.00356216)*x51))))))+(((-0.4)*x66))+((x6*(((((0.1363)*x27*x5))+(((-0.1363)*x24))))))+(((-1.0)*x5*x65))+((x1*(((((-0.3055)*x28))+(((-0.3055)*x66))))))+((x7*(((((0.00292592)*x64))+(((-0.00292592)*x43))))))+((x2*(((((0.00356216)*x43))+(((-0.00356216)*x64))))))+(((-1.0)*x65))+((x2*(((((-0.00292592)*x44))+(((-0.00292592)*x51)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x67=IKcos(j0);
IkReal x68=IKsin(j0);
new_r00=((((-0.173639150012279)*r00*x67))+(((0.984809344788631)*r01*x67))+(((0.984809344788631)*r11*x68))+(((-0.173639150012279)*r10*x68)));
IkReal x69=IKcos(j0);
IkReal x70=IKsin(j0);
new_r01=((((-0.984809344788631)*r00*x69))+(((-0.984809344788631)*r10*x70))+(((-0.173639150012279)*r11*x70))+(((-0.173639150012279)*r01*x69)));
new_r02=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
IkReal x71=IKsin(j0);
IkReal x72=IKcos(j0);
new_px=((-0.081)+((py*x71))+(((-0.00299999419382835)*r10*x71))+(((-0.00350000379271169)*r01*x72))+((px*x72))+(((-0.3055)*r12*x71))+(((-0.3055)*r02*x72))+(((-0.00350000379271169)*r11*x71))+(((-0.00299999419382835)*r00*x72)));
new_r10=((((0.173639150012279)*r20))+(((-0.984809344788631)*r21)));
new_r11=((((0.984809344788631)*r20))+(((0.173639150012279)*r21)));
new_r12=((-1.0)*r22);
new_py=((0.317)+(((0.3055)*r22))+(((0.00299999419382835)*r20))+(((-1.0)*pz))+(((0.00350000379271169)*r21)));
IkReal x73=IKsin(j0);
IkReal x74=IKcos(j0);
new_r20=((((0.984809344788631)*r11*x74))+(((0.173639150012279)*r00*x73))+(((-0.984809344788631)*r01*x73))+(((-0.173639150012279)*r10*x74)));
IkReal x75=IKsin(j0);
IkReal x76=IKcos(j0);
new_r21=((((0.173639150012279)*r01*x75))+(((-0.984809344788631)*r10*x76))+(((-0.173639150012279)*r11*x76))+(((0.984809344788631)*r00*x75)));
new_r22=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x77=IKsin(j0);
IkReal x78=IKcos(j0);
new_pz=((-0.05)+((py*x78))+(((0.00350000379271169)*r01*x77))+(((-0.00299999419382835)*r10*x78))+(((-1.0)*px*x77))+(((0.00299999419382835)*r00*x77))+(((0.3055)*r02*x77))+(((-0.3055)*r12*x78))+(((-0.00350000379271169)*r11*x78)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x79=((1.0)*px);
IkReal x80=((1.0)*pz);
IkReal x81=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x81))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x80)));
rxp0_2=((((-1.0)*r10*x79))+((py*r00)));
rxp1_0=((((-1.0)*r21*x81))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x80)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x79)));
rxp2_0=((((-1.0)*r22*x81))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x80))+((px*r22)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x79)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x82=((0.00990532948728885)*rxp2_2);
IkReal x83=((0.000129904557910617)*r12);
IkReal x84=((0.00990532948728885)*py);
IkReal x85=((0.000480971845748099)*r00);
IkReal x86=((0.00135009640911747)*r11);
IkReal x87=((0.00337524102279368)*rxp0_1);
IkReal x88=((0.00135009640911747)*r20);
IkReal x89=((0.00352877362984665)*rxp2_0);
IkReal x90=((0.000480971845748099)*r10);
IkReal x91=((0.00990532948728885)*px);
IkReal x92=((0.000129904557910617)*r02);
IkReal x93=((0.00135009640911747)*r01);
IkReal x94=((0.00337524102279368)*rxp0_0);
IkReal x95=((0.00352877362984665)*rxp2_1);
IkReal x96=((0.00270019281823494)*r10);
IkReal x97=((0.00675048204558735)*rxp1_1);
IkReal x98=((0.00270019281823494)*r21);
IkReal x99=((0.000961943691496198)*r01);
IkReal x100=((0.038418)*r22);
IkReal x101=((0.337)*pp);
IkReal x102=((0.0918662)*npy);
IkReal x103=((0.2696)*npz);
IkReal x104=((0.096045)*pz);
IkReal x105=((0.0130909335)*r21);
IkReal x106=((0.00270019281823494)*r22);
IkReal x107=((0.000259809115821234)*r10);
IkReal x108=((0.0198106589745777)*rxp0_2);
IkReal x109=((0.00705754725969331)*rxp0_0);
IkReal x110=((0.00675048204558735)*rxp2_1);
IkReal x111=((0.000961943691496198)*r02);
IkReal x112=((0.00675048204558735)*rxp2_0);
IkReal x113=((0.000259809115821234)*r00);
IkReal x114=((0.00705754725969331)*rxp0_1);
IkReal x115=((0.000961943691496198)*r12);
IkReal x116=((0.0396213179491554)*rxp1_2);
IkReal x117=((0.0141150945193866)*rxp1_0);
IkReal x118=((0.000519618231642468)*r11);
IkReal x119=((0.076836)*r20);
IkReal x120=((0.5392)*npx);
IkReal x121=((0.00675048204558735)*rxp1_0);
IkReal x122=((0.00270019281823494)*r00);
IkReal x123=((0.000961943691496198)*r11);
IkReal x124=((0.0247633237182221)*npz);
IkReal x125=((0.0990532948728885)*npy);
IkReal x126=((0.0495266474364443)*npx);
IkReal x127=((0.0495266474364443)*pp);
IkReal x128=((0.0247633237182221)*pp);
IkReal x129=((0.0123816618591111)*pp);
IkReal x130=(r12*x129);
IkReal x131=(py*x124);
IkReal x132=(px*x124);
IkReal x133=(r02*x129);
IkReal x134=((((0.026181867)*r20))+(((-0.1837324)*npx)));
IkReal x135=(r10*x128);
IkReal x136=(py*x126);
IkReal x137=(px*x126);
IkReal x138=(r00*x128);
IkReal x139=(py*x125);
IkReal x140=(r11*x127);
IkReal x141=((((-1.0)*x119))+x120);
IkReal x142=((((0.153672)*r21))+(((-1.0784)*npy)));
IkReal x143=((((-1.0)*x120))+x119);
IkReal x144=(x111+x110);
IkReal x145=(x82+x84);
IkReal x146=(x104+x102);
IkReal x147=(x87+x85);
IkReal x148=(x91+x94);
IkReal x149=(x104+x105);
IkReal x150=(x99+x97);
IkReal x151=((((-1.0)*x121))+x122+x123);
IkReal x152=((((-1.0)*x123))+x122+x121);
IkReal x153=(x131+x89);
IkReal x154=(x140+x118);
IkReal x155=(x130+x83);
IkReal x156=(x136+x109);
IkReal x157=(x132+x90);
IkReal x158=((0.00353569953)+x105+x101);
IkReal x159=(x135+x107);
IkReal x160=((0.00353569953)+x101+x102);
IkReal x161=(x139+x117);
IkReal x162=(x150+x96);
IkReal x163=(x88+x86+x84);
IkReal x164=(x88+x82+x86);
IkReal x165=(x156+x108);
IkReal x166=(x138+x113+x114);
IkReal x167=(x133+x92+x95);
IkReal x168=(x145+x147);
IkReal x169=((((-0.0141150945193866)*rxp1_1))+((px*x125))+(((-0.000519618231642468)*r01))+(((-1.0)*r01*x127)));
IkReal x170=((((-1.0)*x146))+(((-1.0)*x103))+x158+x100);
IkReal x171=((((-1.0)*x149))+(((-1.0)*x103))+x160+x100);
IkReal x172=((((-1.0)*x146))+(((-1.0)*x100))+x158+x103);
IkReal x173=((((-1.0)*x149))+(((-1.0)*x100))+x160+x103);
IkReal x174=((((-1.0)*x115))+x166+x112+(((-1.0)*x137)));
IkReal x175=((((-1.0)*x166))+(((-1.0)*x115))+x137+x112);
IkReal x176=((((-1.0)*x167))+x132+x93+x94+(((-1.0)*x90))+(((-1.0)*x91)));
IkReal x177=((((-1.0)*x148))+(((-1.0)*x167))+x157+(((-1.0)*x93)));
IkReal x178=((((-1.0)*x148))+x167+(((-1.0)*x132))+x90+x93);
IkReal x179=((((-1.0)*x157))+x167+x94+(((-1.0)*x93))+(((-1.0)*x91)));
op[0]=((((-1.0)*x147))+(((-1.0)*x153))+x155+x145+x88+(((-1.0)*x86)));
op[1]=x176;
op[2]=(x150+(((-1.0)*x96))+(((-1.0)*x98)));
op[3]=x151;
op[4]=((((-1.0)*x153))+x168+x155+x86+(((-1.0)*x88)));
op[5]=x177;
op[6]=x176;
op[7]=((((-1.0)*x155))+x164+x153+x147+(((-1.0)*x84)));
op[8]=x151;
op[9]=((((-1.0)*x150))+x96+(((-1.0)*x98)));
op[10]=x177;
op[11]=((((-1.0)*x147))+(((-1.0)*x155))+(((-1.0)*x163))+x153+x82);
op[12]=x170;
op[13]=x170;
op[14]=x134;
op[15]=x134;
op[16]=x171;
op[17]=x171;
op[18]=0;
op[19]=x170;
op[20]=0;
op[21]=x134;
op[22]=0;
op[23]=x171;
op[24]=((((-1.0)*x144))+(((-1.0)*x159))+(((-1.0)*x108))+x156+x106);
op[25]=x174;
op[26]=((((-1.0)*x161))+x154+x116);
op[27]=x169;
op[28]=((((-1.0)*x144))+(((-1.0)*x156))+x159+x108+x106);
op[29]=x175;
op[30]=x174;
op[31]=((((-1.0)*x165))+x159+x144+x106);
op[32]=x169;
op[33]=((((-1.0)*x154))+x161+x116);
op[34]=x175;
op[35]=((((-1.0)*x159))+x165+x144+x106);
op[36]=x141;
op[37]=x141;
op[38]=x142;
op[39]=x142;
op[40]=x143;
op[41]=x143;
op[42]=0;
op[43]=x141;
op[44]=0;
op[45]=x142;
op[46]=0;
op[47]=x143;
op[48]=((((-1.0)*x155))+(((-1.0)*x164))+x153+x147+x84);
op[49]=x178;
op[50]=((((-1.0)*x162))+x98);
op[51]=x152;
op[52]=((((-1.0)*x147))+(((-1.0)*x155))+x163+x153+(((-1.0)*x82)));
op[53]=x179;
op[54]=x178;
op[55]=((((-1.0)*x153))+(((-1.0)*x168))+x155+x86+(((-1.0)*x88)));
op[56]=x152;
op[57]=(x162+x98);
op[58]=x179;
op[59]=((((-1.0)*x145))+(((-1.0)*x153))+x155+x147+x88+(((-1.0)*x86)));
op[60]=x172;
op[61]=x172;
op[62]=x134;
op[63]=x134;
op[64]=x173;
op[65]=x173;
op[66]=0;
op[67]=x172;
op[68]=0;
op[69]=x134;
op[70]=0;
op[71]=x173;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j6array[16], cj6array[16], sj6array[16], j7array[16], cj7array[16], sj7array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ij6 += 3)
{
IkReal htj6 = zeror[ij6+0], htj7 = zeror[ij6+1], htj2 = zeror[ij6+2];
if(isnan(htj6)||isnan(htj7)||isnan(htj2)){
continue;
}
j6array[numsolutions]=((2.0)*(atan(htj6)));
j7array[numsolutions]=((2.0)*(atan(htj7)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x180=htj6*htj6;
CheckValue<IkReal> x181=IKPowWithIntegerCheck(((1.0)+x180),-1);
if(!x181.valid){
continue;
}
cj6array[numsolutions]=((x181.value)*(((1.0)+(((-1.0)*x180)))));
CheckValue<IkReal> x182=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x182.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x182.value));
}
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x183=htj7*htj7;
CheckValue<IkReal> x184=IKPowWithIntegerCheck(((1.0)+x183),-1);
if(!x184.valid){
continue;
}
cj7array[numsolutions]=((x184.value)*(((1.0)+(((-1.0)*x183)))));
CheckValue<IkReal> x185=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x185.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x185.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x186=htj2*htj2;
CheckValue<IkReal> x187=IKPowWithIntegerCheck(((1.0)+x186),-1);
if(!x187.valid){
continue;
}
cj2array[numsolutions]=((x187.value)*(((1.0)+(((-1.0)*x186)))));
CheckValue<IkReal> x188=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x188.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x188.value));
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j6valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj6 = 16;
_nj7 = 1;
_nj2 = 1;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
_ij7[0] = 0; _ij7[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( !j6valid[iij6] ) { continue; }
if( IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(cj7array[ij6]-cj7array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij6]-sj7array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij6]-cj2array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij6]-sj2array[iij6]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j6valid[iij6]=false; _ij6[1] = iij6; _ij7[1] = 0; _ij2[1] = 0;  break; 
}
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

    j7 = j7array[ij6]; cj7 = cj7array[ij6]; sj7 = sj7array[ij6];

    j2 = j2array[ij6]; cj2 = cj2array[ij6]; sj2 = sj2array[ij6];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[1];
IkReal x189=(sj2*sj7);
IkReal x190=((16.0)*cj6);
IkReal x191=(cj2*sj7);
IkReal x192=((8.0)*sj6);
IkReal x193=(cj2*r02);
IkReal x194=(cj7*sj2);
IkReal x195=((8.0)*cj6);
IkReal x196=(r12*sj2);
IkReal x197=(cj2*cj7);
IkReal x198=((16.0)*sj6);
IkReal x199=((((4.0)*r01*x197))+(((4.0)*r10*x189))+(((4.0)*r00*x191))+(((4.0)*r11*x194)));
j5eval[0]=((IKabs(((((-1.0)*r00*x195*x197))+((r11*x189*x195))+((r01*x191*x195))+(((-1.0)*x192*x196))+(((-1.0)*x192*x193))+(((-1.0)*r10*x194*x195)))))+(((1.5)*(IKabs(x199))))+(((0.5)*(IKabs(((((-1.0)*r10*x190*x194))+(((-1.0)*x196*x198))+((r01*x190*x191))+((r11*x189*x190))+(((-1.0)*r00*x190*x197))+(((-1.0)*x193*x198))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x200=(r11*sj7);
IkReal x201=(cj7*r10);
IkReal x202=((4.0)*cj7);
IkReal x203=(r01*sj7);
IkReal x204=(cj7*r00);
IkReal x205=((4.0)*sj7);
IkReal x206=((16.0)*cj6*sj2);
IkReal x207=((8.0)*cj6*sj2);
IkReal x208=(cj2*r02*sj6);
IkReal x209=(r12*sj2*sj6);
IkReal x210=((16.0)*cj2*cj6);
IkReal x211=((8.0)*cj2*cj6);
IkReal x212=(((cj2*r00*x205))+((cj2*r01*x202))+((r10*sj2*x205))+((r11*sj2*x202)));
IkReal x213=((-1.0)*x212);
IkReal x214=((((-1.0)*x201*x207))+((x200*x207))+(((-8.0)*x208))+(((-8.0)*x209))+((x203*x211))+(((-1.0)*x204*x211)));
op[0]=x212;
op[1]=x214;
op[2]=x212;
op[3]=((((-16.0)*x209))+(((-16.0)*x208))+(((-1.0)*x201*x206))+((x200*x206))+((x203*x210))+(((-1.0)*x204*x210)));
op[4]=x213;
op[5]=x214;
op[6]=x213;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x215=((1.0)*cj5);
IkReal x216=(cj7*r10);
IkReal x217=(r11*sj7);
if( IKabs((((cj5*cj6*x217))+((cj7*r11*sj5))+(((-1.0)*cj6*x215*x216))+(((-1.0)*r12*sj6*x215))+((r10*sj5*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x217))+(((-1.0)*sj6*x216))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*cj6*x217))+((cj7*r11*sj5))+(((-1.0)*cj6*x215*x216))+(((-1.0)*r12*sj6*x215))+((r10*sj5*sj7))))+IKsqr((((sj6*x217))+(((-1.0)*sj6*x216))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*cj6*x217))+((cj7*r11*sj5))+(((-1.0)*cj6*x215*x216))+(((-1.0)*r12*sj6*x215))+((r10*sj5*sj7))), (((sj6*x217))+(((-1.0)*sj6*x216))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x218=IKcos(j4);
IkReal x219=((1.0)*cj5);
IkReal x220=(cj7*r10);
IkReal x221=(r10*sj7);
IkReal x222=(r11*sj7);
IkReal x223=(cj7*r11);
evalcond[0]=(((sj6*x220))+(((-1.0)*cj6*r12))+x218+(((-1.0)*sj6*x222)));
evalcond[1]=((0.4)+(((0.1363)*x223))+(((0.1363)*x221))+(((-1.0)*py))+(((0.4)*x218)));
evalcond[2]=((((-1.0)*(IKsin(j4))))+((cj5*cj6*x222))+(((-1.0)*cj6*x219*x220))+((sj5*x221))+((sj5*x223))+(((-1.0)*r12*sj6*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x224=(sj6*sj7);
IkReal x225=(cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((cj6*r22))+(((-1.0)*r20*x225))+((r21*x224)))))+(IKabs((((r00*x225))+(((-1.0)*cj6*r02))+(((-1.0)*r01*x224))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x226=((0.808902077151335)*sj7);
IkReal x227=((0.808902077151335)*cj7);
if( IKabs((((r01*x227))+((r00*x226))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x226))+(((-5.93471810089021)*pz))+((r21*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x227))+((r00*x226))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r20*x226))+(((-5.93471810089021)*pz))+((r21*x227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x227))+((r00*x226))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r20*x226))+(((-5.93471810089021)*pz))+((r21*x227))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x228=IKsin(j3);
IkReal x229=IKcos(j3);
IkReal x230=(r20*sj7);
IkReal x231=((1.0)*cj5);
IkReal x232=(cj6*cj7);
IkReal x233=(r02*sj6);
IkReal x234=((1.0)*sj5);
IkReal x235=(cj7*r01);
IkReal x236=(r00*sj7);
IkReal x237=(r22*sj6);
IkReal x238=(cj7*r21);
IkReal x239=(cj5*cj6*sj7);
IkReal x240=(cj6*sj5*sj7);
evalcond[0]=((((-1.0)*px))+(((0.1363)*x235))+(((0.1363)*x236))+(((-0.1685)*x228)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x230))+(((0.1363)*x238))+(((-0.1685)*x229)));
evalcond[2]=(x228+(((-1.0)*r20*x231*x232))+(((-1.0)*x231*x237))+((r21*x239))+((sj5*x230))+((sj5*x238)));
evalcond[3]=((((-1.0)*x230*x231))+x229+((r21*x240))+(((-1.0)*x231*x238))+(((-1.0)*x234*x237))+(((-1.0)*r20*x232*x234)));
evalcond[4]=((((-1.0)*x233*x234))+x228+(((-1.0)*x231*x236))+(((-1.0)*x231*x235))+((r01*x240))+(((-1.0)*r00*x232*x234)));
evalcond[5]=((((-1.0)*r00*x231*x232))+((r01*x239))+(((-1.0)*x231*x233))+((sj5*x236))+((sj5*x235))+(((-1.0)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x241=((0.808902077151335)*sj7);
IkReal x242=((0.808902077151335)*cj7);
if( IKabs((((r01*x242))+((r00*x241))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x242))+((r20*x241))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x242))+((r00*x241))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x242))+((r20*x241))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x242))+((r00*x241))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x242))+((r20*x241))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x243=IKcos(j3);
IkReal x244=IKsin(j3);
IkReal x245=(r20*sj7);
IkReal x246=(cj5*cj6);
IkReal x247=(r21*sj7);
IkReal x248=((1.0)*cj5);
IkReal x249=(cj7*r01);
IkReal x250=(r02*sj6);
IkReal x251=(r00*sj7);
IkReal x252=(r22*sj6);
IkReal x253=((1.0)*cj7);
IkReal x254=((1.0)*sj5);
IkReal x255=(cj7*r21);
IkReal x256=(r01*sj7);
IkReal x257=(cj6*sj5);
evalcond[0]=((((0.1363)*x251))+(((-0.1685)*x244))+(((-1.0)*px))+(((0.1363)*x249)));
evalcond[1]=((0.1425)+(((0.1363)*x255))+(((-0.1685)*x243))+(((-1.0)*pz))+(((0.1363)*x245)));
evalcond[2]=(((x246*x256))+((sj5*x249))+x243+(((-1.0)*x248*x250))+((sj5*x251))+(((-1.0)*r00*x246*x253)));
evalcond[3]=((((-1.0)*x252*x254))+x243+(((-1.0)*x248*x255))+(((-1.0)*x245*x248))+(((-1.0)*r20*x253*x257))+((x247*x257)));
evalcond[4]=(((sj5*x245))+(((-1.0)*x244))+(((-1.0)*x248*x252))+((sj5*x255))+(((-1.0)*r20*x246*x253))+((x246*x247)));
evalcond[5]=((((-1.0)*x248*x249))+(((-1.0)*x250*x254))+((x256*x257))+x244+(((-1.0)*r00*x253*x257))+(((-1.0)*x248*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x258=((0.808902077151335)*sj7);
IkReal x259=((0.808902077151335)*cj7);
if( IKabs((((r00*x258))+((r01*x259))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x259))+((r20*x258))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x258))+((r01*x259))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x259))+((r20*x258))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*x258))+((r01*x259))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x259))+((r20*x258))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x260=IKsin(j3);
IkReal x261=IKcos(j3);
IkReal x262=(r20*sj7);
IkReal x263=((1.0)*cj5);
IkReal x264=(cj6*cj7);
IkReal x265=(r02*sj6);
IkReal x266=((1.0)*sj5);
IkReal x267=(cj7*r01);
IkReal x268=(r00*sj7);
IkReal x269=(r22*sj6);
IkReal x270=(cj7*r21);
IkReal x271=(cj5*cj6*sj7);
IkReal x272=(cj6*sj5*sj7);
evalcond[0]=((((-0.1685)*x260))+(((-1.0)*px))+(((0.1363)*x267))+(((0.1363)*x268)));
evalcond[1]=((0.1425)+(((-0.1685)*x261))+(((-1.0)*pz))+(((0.1363)*x262))+(((0.1363)*x270)));
evalcond[2]=((((-1.0)*x263*x269))+((sj5*x270))+(((-1.0)*r20*x263*x264))+((sj5*x262))+((r21*x271))+x260);
evalcond[3]=((((-1.0)*x262*x263))+(((-1.0)*x263*x270))+(((-1.0)*r20*x264*x266))+((r21*x272))+x261+(((-1.0)*x266*x269)));
evalcond[4]=((((-1.0)*x263*x268))+(((-1.0)*x263*x267))+(((-1.0)*r00*x264*x266))+x260+((r01*x272))+(((-1.0)*x265*x266)));
evalcond[5]=((((-1.0)*x263*x265))+(((-1.0)*r00*x263*x264))+(((-1.0)*x261))+((sj5*x267))+((sj5*x268))+((r01*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x273=((0.808902077151335)*sj7);
IkReal x274=((0.808902077151335)*cj7);
if( IKabs((((r01*x274))+((r00*x273))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x274))+((r20*x273))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x274))+((r00*x273))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x274))+((r20*x273))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x274))+((r00*x273))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x274))+((r20*x273))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x275=IKsin(j3);
IkReal x276=IKcos(j3);
IkReal x277=(r20*sj7);
IkReal x278=((1.0)*cj5);
IkReal x279=(cj6*cj7);
IkReal x280=(r02*sj6);
IkReal x281=((1.0)*sj5);
IkReal x282=(cj7*r01);
IkReal x283=(r00*sj7);
IkReal x284=(r22*sj6);
IkReal x285=(cj7*r21);
IkReal x286=(cj5*cj6*sj7);
IkReal x287=(cj6*sj5*sj7);
evalcond[0]=((((-0.1685)*x275))+(((0.1363)*x282))+(((0.1363)*x283))+(((-1.0)*px)));
evalcond[1]=((0.1425)+(((-0.1685)*x276))+(((0.1363)*x285))+(((-1.0)*pz))+(((0.1363)*x277)));
evalcond[2]=(((sj5*x277))+((r21*x286))+x275+((sj5*x285))+(((-1.0)*r20*x278*x279))+(((-1.0)*x278*x284)));
evalcond[3]=((((-1.0)*x277*x278))+((r21*x287))+(((-1.0)*x281*x284))+x276+(((-1.0)*r20*x279*x281))+(((-1.0)*x278*x285)));
evalcond[4]=(((r01*x287))+(((-1.0)*r00*x279*x281))+(((-1.0)*x280*x281))+x275+(((-1.0)*x278*x282))+(((-1.0)*x278*x283)));
evalcond[5]=(((r01*x286))+(((-1.0)*x276))+((sj5*x283))+((sj5*x282))+(((-1.0)*r00*x278*x279))+(((-1.0)*x278*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x288=((0.808902077151335)*sj7);
IkReal x289=((0.808902077151335)*cj7);
if( IKabs((((r01*x289))+((r00*x288))+(((-5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x289))+(((-5.93471810089021)*pz))+((r20*x288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x289))+((r00*x288))+(((-5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x289))+(((-5.93471810089021)*pz))+((r20*x288))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x289))+((r00*x288))+(((-5.93471810089021)*px))), ((0.845697329376855)+((r21*x289))+(((-5.93471810089021)*pz))+((r20*x288))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x290=IKcos(j3);
IkReal x291=IKsin(j3);
IkReal x292=(r20*sj7);
IkReal x293=(cj5*cj6);
IkReal x294=(r21*sj7);
IkReal x295=((1.0)*cj5);
IkReal x296=(cj7*r01);
IkReal x297=(r02*sj6);
IkReal x298=(r00*sj7);
IkReal x299=(r22*sj6);
IkReal x300=((1.0)*cj7);
IkReal x301=((1.0)*sj5);
IkReal x302=(cj7*r21);
IkReal x303=(r01*sj7);
IkReal x304=(cj6*sj5);
evalcond[0]=((((-1.0)*px))+(((-0.1685)*x291))+(((0.1363)*x296))+(((0.1363)*x298)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x302))+(((-0.1685)*x290))+(((0.1363)*x292)));
evalcond[2]=(((sj5*x296))+((sj5*x298))+x290+((x293*x303))+(((-1.0)*r00*x293*x300))+(((-1.0)*x295*x297)));
evalcond[3]=((((-1.0)*x295*x302))+((x294*x304))+x290+(((-1.0)*x299*x301))+(((-1.0)*r20*x300*x304))+(((-1.0)*x292*x295)));
evalcond[4]=(((sj5*x292))+(((-1.0)*x291))+((sj5*x302))+(((-1.0)*r20*x293*x300))+(((-1.0)*x295*x299))+((x293*x294)));
evalcond[5]=((((-1.0)*x297*x301))+((x303*x304))+x291+(((-1.0)*x295*x298))+(((-1.0)*x295*x296))+(((-1.0)*r00*x300*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x305=((0.808902077151335)*sj7);
IkReal x306=((0.808902077151335)*cj7);
if( IKabs((((r01*x306))+(((-5.93471810089021)*px))+((r00*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x306))+((r20*x305))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x306))+(((-5.93471810089021)*px))+((r00*x305))))+IKsqr(((0.845697329376855)+((r21*x306))+((r20*x305))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x306))+(((-5.93471810089021)*px))+((r00*x305))), ((0.845697329376855)+((r21*x306))+((r20*x305))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x307=IKcos(j3);
IkReal x308=IKsin(j3);
IkReal x309=(r20*sj7);
IkReal x310=(cj5*cj6);
IkReal x311=(r21*sj7);
IkReal x312=((1.0)*cj5);
IkReal x313=(cj7*r01);
IkReal x314=(r02*sj6);
IkReal x315=(r00*sj7);
IkReal x316=(r22*sj6);
IkReal x317=((1.0)*cj7);
IkReal x318=((1.0)*sj5);
IkReal x319=(cj7*r21);
IkReal x320=(r01*sj7);
IkReal x321=(cj6*sj5);
evalcond[0]=((((-0.1685)*x308))+(((-1.0)*px))+(((0.1363)*x313))+(((0.1363)*x315)));
evalcond[1]=((0.1425)+(((-0.1685)*x307))+(((-1.0)*pz))+(((0.1363)*x309))+(((0.1363)*x319)));
evalcond[2]=((((-1.0)*x312*x314))+((x310*x320))+x307+(((-1.0)*r00*x310*x317))+((sj5*x313))+((sj5*x315)));
evalcond[3]=((((-1.0)*x312*x319))+x307+(((-1.0)*r20*x317*x321))+((x311*x321))+(((-1.0)*x309*x312))+(((-1.0)*x316*x318)));
evalcond[4]=(((sj5*x309))+((x310*x311))+(((-1.0)*x312*x316))+(((-1.0)*r20*x310*x317))+(((-1.0)*x308))+((sj5*x319)));
evalcond[5]=((((-1.0)*x312*x313))+(((-1.0)*x312*x315))+((x320*x321))+x308+(((-1.0)*r00*x317*x321))+(((-1.0)*x314*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x322=((337.0)*sj6);
IkReal x323=(cj7*r20);
IkReal x324=(cj6*r22);
IkReal x325=(r21*sj7);
IkReal x326=((272.6)*sj4);
CheckValue<IkReal> x327=IKPowWithIntegerCheck(sj4,-1);
if(!x327.valid){
continue;
}
CheckValue<IkReal> x328=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x328.valid){
continue;
}
if( IKabs(((x327.value)*((x324+(((-1.0)*sj6*x323))+((sj6*x325)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x328.value)*((((x322*x323))+(((-2000.0)*px*sj4))+((r00*sj7*x326))+(((-1.0)*x322*x325))+(((-337.0)*x324))+((cj7*r01*x326)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x327.value)*((x324+(((-1.0)*sj6*x323))+((sj6*x325))))))+IKsqr(((x328.value)*((((x322*x323))+(((-2000.0)*px*sj4))+((r00*sj7*x326))+(((-1.0)*x322*x325))+(((-337.0)*x324))+((cj7*r01*x326))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x327.value)*((x324+(((-1.0)*sj6*x323))+((sj6*x325))))), ((x328.value)*((((x322*x323))+(((-2000.0)*px*sj4))+((r00*sj7*x326))+(((-1.0)*x322*x325))+(((-337.0)*x324))+((cj7*r01*x326))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x329=IKsin(j3);
IkReal x330=IKcos(j3);
IkReal x331=(r21*sj7);
IkReal x332=((1.0)*sj6);
IkReal x333=(r20*sj7);
IkReal x334=(cj5*cj6);
IkReal x335=((1.0)*cj5);
IkReal x336=(cj7*r01);
IkReal x337=((1.0)*cj7);
IkReal x338=(r00*sj7);
IkReal x339=((1.0)*cj6);
IkReal x340=(r01*sj7);
IkReal x341=(cj7*r21);
IkReal x342=(cj7*sj6);
IkReal x343=(cj6*sj5);
IkReal x344=(sj4*x329);
IkReal x345=(sj4*x330);
evalcond[0]=(x344+((r20*x342))+(((-1.0)*x331*x332))+(((-1.0)*r22*x339)));
evalcond[1]=(((r00*x342))+(((-1.0)*x332*x340))+(((-1.0)*r02*x339))+(((-1.0)*x345)));
evalcond[2]=((((0.1363)*x338))+(((0.1363)*x336))+(((-1.0)*px))+(((-0.4)*x345))+(((-0.1685)*x329)));
evalcond[3]=((0.1425)+(((-0.1685)*x330))+(((0.4)*x344))+(((0.1363)*x341))+(((0.1363)*x333))+(((-1.0)*pz)));
evalcond[4]=((((-1.0)*x335*x341))+(((-1.0)*r22*sj5*x332))+(((-1.0)*x333*x335))+((x331*x343))+x330+(((-1.0)*r20*x337*x343)));
evalcond[5]=(((sj5*x333))+(((-1.0)*r20*x334*x337))+((x331*x334))+((sj5*x341))+((cj4*x329))+(((-1.0)*cj5*r22*x332)));
evalcond[6]=((((-1.0)*r02*sj5*x332))+x329+(((-1.0)*r00*x337*x343))+((x340*x343))+(((-1.0)*x335*x336))+(((-1.0)*x335*x338)));
evalcond[7]=(((sj5*x338))+((sj5*x336))+(((-1.0)*cj4*x330))+(((-1.0)*r00*x334*x337))+((x334*x340))+(((-1.0)*cj5*r02*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x346=((2.37388724035608)*sj6);
IkReal x347=(r21*sj7);
IkReal x348=(cj7*r20);
IkReal x349=(cj6*r22);
CheckValue<IkReal> x350=IKPowWithIntegerCheck(sj4,-1);
if(!x350.valid){
continue;
}
if( IKabs(((x350.value)*((x349+(((-1.0)*sj6*x348))+((sj6*x347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((2.37388724035608)*x349))+(((0.808902077151335)*cj7*r21))+((x346*x347))+(((-1.0)*x346*x348))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x350.value)*((x349+(((-1.0)*sj6*x348))+((sj6*x347))))))+IKsqr(((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((2.37388724035608)*x349))+(((0.808902077151335)*cj7*r21))+((x346*x347))+(((-1.0)*x346*x348))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x350.value)*((x349+(((-1.0)*sj6*x348))+((sj6*x347))))), ((0.845697329376855)+(((0.808902077151335)*r20*sj7))+(((2.37388724035608)*x349))+(((0.808902077151335)*cj7*r21))+((x346*x347))+(((-1.0)*x346*x348))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x351=IKsin(j3);
IkReal x352=IKcos(j3);
IkReal x353=(r21*sj7);
IkReal x354=((1.0)*sj6);
IkReal x355=(r20*sj7);
IkReal x356=(cj5*cj6);
IkReal x357=((1.0)*cj5);
IkReal x358=(cj7*r01);
IkReal x359=((1.0)*cj7);
IkReal x360=(r00*sj7);
IkReal x361=((1.0)*cj6);
IkReal x362=(r01*sj7);
IkReal x363=(cj7*r21);
IkReal x364=(cj7*sj6);
IkReal x365=(cj6*sj5);
IkReal x366=(sj4*x351);
IkReal x367=(sj4*x352);
evalcond[0]=(((r20*x364))+x366+(((-1.0)*x353*x354))+(((-1.0)*r22*x361)));
evalcond[1]=((((-1.0)*x367))+(((-1.0)*r02*x361))+(((-1.0)*x354*x362))+((r00*x364)));
evalcond[2]=((((0.1363)*x358))+(((0.1363)*x360))+(((-0.4)*x367))+(((-1.0)*px))+(((-0.1685)*x351)));
evalcond[3]=((0.1425)+(((0.1363)*x355))+(((0.4)*x366))+(((0.1363)*x363))+(((-1.0)*pz))+(((-0.1685)*x352)));
evalcond[4]=((((-1.0)*r20*x359*x365))+(((-1.0)*r22*sj5*x354))+((x353*x365))+x352+(((-1.0)*x357*x363))+(((-1.0)*x355*x357)));
evalcond[5]=((((-1.0)*r20*x356*x359))+((sj5*x355))+((x353*x356))+((cj4*x351))+((sj5*x363))+(((-1.0)*cj5*r22*x354)));
evalcond[6]=((((-1.0)*x357*x358))+(((-1.0)*r02*sj5*x354))+x351+(((-1.0)*r00*x359*x365))+(((-1.0)*x357*x360))+((x362*x365)));
evalcond[7]=((((-1.0)*r00*x356*x359))+((sj5*x358))+((x356*x362))+((sj5*x360))+(((-1.0)*cj5*r02*x354))+(((-1.0)*cj4*x352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x368=(sj6*sj7);
IkReal x369=(cj7*sj6);
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x369))+((r21*x368))+((cj6*r22)))),IkReal((((r00*x369))+(((-1.0)*r01*x368))+(((-1.0)*cj6*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x370.value)))+(x371.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x372=IKsin(j3);
IkReal x373=IKcos(j3);
IkReal x374=(r21*sj7);
IkReal x375=((1.0)*sj6);
IkReal x376=(r20*sj7);
IkReal x377=(cj5*cj6);
IkReal x378=((1.0)*cj5);
IkReal x379=(cj7*r01);
IkReal x380=((1.0)*cj7);
IkReal x381=(r00*sj7);
IkReal x382=((1.0)*cj6);
IkReal x383=(r01*sj7);
IkReal x384=(cj7*r21);
IkReal x385=(cj7*sj6);
IkReal x386=(cj6*sj5);
IkReal x387=(sj4*x372);
IkReal x388=(sj4*x373);
evalcond[0]=((((-1.0)*r22*x382))+x387+(((-1.0)*x374*x375))+((r20*x385)));
evalcond[1]=((((-1.0)*x375*x383))+(((-1.0)*x388))+(((-1.0)*r02*x382))+((r00*x385)));
evalcond[2]=((((0.1363)*x379))+(((-0.1685)*x372))+(((-1.0)*px))+(((0.1363)*x381))+(((-0.4)*x388)));
evalcond[3]=((0.1425)+(((0.1363)*x376))+(((-0.1685)*x373))+(((-1.0)*pz))+(((0.1363)*x384))+(((0.4)*x387)));
evalcond[4]=(((x374*x386))+x373+(((-1.0)*x376*x378))+(((-1.0)*x378*x384))+(((-1.0)*r20*x380*x386))+(((-1.0)*r22*sj5*x375)));
evalcond[5]=(((sj5*x384))+(((-1.0)*r20*x377*x380))+((cj4*x372))+((sj5*x376))+(((-1.0)*cj5*r22*x375))+((x374*x377)));
evalcond[6]=((((-1.0)*r00*x380*x386))+(((-1.0)*x378*x379))+((x383*x386))+(((-1.0)*r02*sj5*x375))+x372+(((-1.0)*x378*x381)));
evalcond[7]=(((x377*x383))+((sj5*x381))+(((-1.0)*cj5*r02*x375))+(((-1.0)*r00*x377*x380))+((sj5*x379))+(((-1.0)*cj4*x373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x389=(r10*sj7);
IkReal x390=(cj7*r11);
IkReal x391=((1.0)*sj5);
IkReal x392=(cj5*cj6);
if( IKabs((((cj5*r12*sj6))+((cj7*r10*x392))+(((-1.0)*x389*x391))+(((-1.0)*x390*x391))+(((-1.0)*r11*sj7*x392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+(((0.34075)*x389))+(((0.34075)*x390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12*sj6))+((cj7*r10*x392))+(((-1.0)*x389*x391))+(((-1.0)*x390*x391))+(((-1.0)*r11*sj7*x392))))+IKsqr(((-1.0)+(((-2.5)*py))+(((0.34075)*x389))+(((0.34075)*x390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r12*sj6))+((cj7*r10*x392))+(((-1.0)*x389*x391))+(((-1.0)*x390*x391))+(((-1.0)*r11*sj7*x392))), ((-1.0)+(((-2.5)*py))+(((0.34075)*x389))+(((0.34075)*x390))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x393=IKcos(j4);
IkReal x394=((1.0)*cj5);
IkReal x395=(cj7*r10);
IkReal x396=(r10*sj7);
IkReal x397=(cj7*r11);
IkReal x398=(r11*sj7);
evalcond[0]=((-0.4)+(((0.1363)*x396))+(((0.1363)*x397))+(((-0.4)*x393))+(((-1.0)*py)));
evalcond[1]=((((-1.0)*x393))+(((-1.0)*cj6*r12))+((sj6*x395))+(((-1.0)*sj6*x398)));
evalcond[2]=(((cj5*cj6*x398))+(((-1.0)*r12*sj6*x394))+(IKsin(j4))+(((-1.0)*cj6*x394*x395))+((sj5*x397))+((sj5*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x399=(sj6*sj7);
IkReal x400=((1.0)*cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-1.0)*r20*x400))+((cj6*r22))+((r21*x399)))))+(IKabs((((r01*x399))+((cj6*r02))+(((-1.0)*r00*x400))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x401=((0.808902077151335)*sj7);
IkReal x402=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x401))+(((-1.0)*r01*x402))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x402))+((r20*x401))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x401))+(((-1.0)*r01*x402))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x402))+((r20*x401))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x401))+(((-1.0)*r01*x402))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x402))+((r20*x401))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x403=IKsin(j3);
IkReal x404=IKcos(j3);
IkReal x405=(r20*sj7);
IkReal x406=(cj5*cj6);
IkReal x407=((1.0)*cj7);
IkReal x408=(r21*sj7);
IkReal x409=((1.0)*cj5);
IkReal x410=(cj7*r01);
IkReal x411=(r02*sj6);
IkReal x412=(r00*sj7);
IkReal x413=(r22*sj6);
IkReal x414=((1.0)*sj5);
IkReal x415=(cj7*r21);
IkReal x416=(r01*sj7);
IkReal x417=(cj6*sj5);
evalcond[0]=((((0.1363)*x412))+(((0.1363)*x410))+(((-1.0)*px))+(((0.1685)*x403)));
evalcond[1]=((0.1425)+(((0.1363)*x405))+(((0.1363)*x415))+(((-1.0)*pz))+(((-0.1685)*x404)));
evalcond[2]=(((sj5*x415))+((sj5*x405))+((x406*x408))+x403+(((-1.0)*r20*x406*x407))+(((-1.0)*x409*x413)));
evalcond[3]=(((sj5*x412))+((sj5*x410))+((x406*x416))+x404+(((-1.0)*r00*x406*x407))+(((-1.0)*x409*x411)));
evalcond[4]=((((-1.0)*cj5*r21*x407))+((x408*x417))+x404+(((-1.0)*r20*x407*x417))+(((-1.0)*x413*x414))+(((-1.0)*x405*x409)));
evalcond[5]=(((x416*x417))+(((-1.0)*cj5*r01*x407))+(((-1.0)*r00*x407*x417))+(((-1.0)*x411*x414))+(((-1.0)*x403))+(((-1.0)*x409*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x418=((0.808902077151335)*sj7);
IkReal x419=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r01*x419))+(((-1.0)*r00*x418))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x419))+((r20*x418))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x419))+(((-1.0)*r00*x418))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x419))+((r20*x418))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*x419))+(((-1.0)*r00*x418))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x419))+((r20*x418))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x420=IKcos(j3);
IkReal x421=IKsin(j3);
IkReal x422=(r20*sj7);
IkReal x423=(cj5*cj6);
IkReal x424=((1.0)*cj7);
IkReal x425=(r21*sj7);
IkReal x426=((1.0)*cj5);
IkReal x427=(cj7*r01);
IkReal x428=(r02*sj6);
IkReal x429=(r00*sj7);
IkReal x430=(r22*sj6);
IkReal x431=((1.0)*sj5);
IkReal x432=(cj7*r21);
IkReal x433=(r01*sj7);
IkReal x434=(cj6*sj5);
IkReal x435=((1.0)*x421);
evalcond[0]=((((0.1363)*x429))+(((0.1363)*x427))+(((-1.0)*px))+(((0.1685)*x421)));
evalcond[1]=((0.1425)+(((0.1363)*x422))+(((-0.1685)*x420))+(((-1.0)*pz))+(((0.1363)*x432)));
evalcond[2]=((((-1.0)*x430*x431))+(((-1.0)*x422*x426))+(((-1.0)*cj5*r21*x424))+(((-1.0)*r20*x424*x434))+((x425*x434))+x420);
evalcond[3]=((((-1.0)*x435))+(((-1.0)*r20*x423*x424))+((sj5*x422))+(((-1.0)*x426*x430))+((x423*x425))+((sj5*x432)));
evalcond[4]=((((-1.0)*x420))+(((-1.0)*x426*x428))+((x423*x433))+((sj5*x429))+((sj5*x427))+(((-1.0)*r00*x423*x424)));
evalcond[5]=((((-1.0)*cj5*r01*x424))+(((-1.0)*x435))+(((-1.0)*r00*x424*x434))+(((-1.0)*x426*x429))+((x433*x434))+(((-1.0)*x428*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x436=((0.808902077151335)*sj7);
IkReal x437=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x436))+(((-1.0)*r01*x437))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x437))+((r20*x436))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x436))+(((-1.0)*r01*x437))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x437))+((r20*x436))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x436))+(((-1.0)*r01*x437))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x437))+((r20*x436))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x438=IKsin(j3);
IkReal x439=IKcos(j3);
IkReal x440=(r20*sj7);
IkReal x441=(cj5*cj6);
IkReal x442=((1.0)*cj7);
IkReal x443=(r21*sj7);
IkReal x444=((1.0)*cj5);
IkReal x445=(cj7*r01);
IkReal x446=(r02*sj6);
IkReal x447=(r00*sj7);
IkReal x448=(r22*sj6);
IkReal x449=((1.0)*sj5);
IkReal x450=(cj7*r21);
IkReal x451=(r01*sj7);
IkReal x452=(cj6*sj5);
evalcond[0]=((((0.1363)*x447))+(((0.1363)*x445))+(((-1.0)*px))+(((0.1685)*x438)));
evalcond[1]=((0.1425)+(((0.1363)*x440))+(((-1.0)*pz))+(((-0.1685)*x439))+(((0.1363)*x450)));
evalcond[2]=((((-1.0)*x444*x448))+(((-1.0)*r20*x441*x442))+((x441*x443))+x438+((sj5*x440))+((sj5*x450)));
evalcond[3]=(((x441*x451))+(((-1.0)*x444*x446))+(((-1.0)*r00*x441*x442))+x439+((sj5*x445))+((sj5*x447)));
evalcond[4]=((((-1.0)*cj5*r21*x442))+(((-1.0)*r20*x442*x452))+x439+(((-1.0)*x448*x449))+((x443*x452))+(((-1.0)*x440*x444)));
evalcond[5]=((((-1.0)*x444*x447))+(((-1.0)*x438))+(((-1.0)*cj5*r01*x442))+(((-1.0)*r00*x442*x452))+((x451*x452))+(((-1.0)*x446*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x453=((0.808902077151335)*sj7);
IkReal x454=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x453))+(((-1.0)*r01*x454))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x453))+((r21*x454))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x453))+(((-1.0)*r01*x454))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r20*x453))+((r21*x454))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x453))+(((-1.0)*r01*x454))+(((5.93471810089021)*px))), ((0.845697329376855)+((r20*x453))+((r21*x454))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x455=IKsin(j3);
IkReal x456=IKcos(j3);
IkReal x457=(r20*sj7);
IkReal x458=(cj5*cj6);
IkReal x459=((1.0)*cj7);
IkReal x460=(r21*sj7);
IkReal x461=((1.0)*cj5);
IkReal x462=(cj7*r01);
IkReal x463=(r02*sj6);
IkReal x464=(r00*sj7);
IkReal x465=(r22*sj6);
IkReal x466=((1.0)*sj5);
IkReal x467=(cj7*r21);
IkReal x468=(r01*sj7);
IkReal x469=(cj6*sj5);
evalcond[0]=((((0.1685)*x455))+(((-1.0)*px))+(((0.1363)*x462))+(((0.1363)*x464)));
evalcond[1]=((0.1425)+(((-0.1685)*x456))+(((-1.0)*pz))+(((0.1363)*x457))+(((0.1363)*x467)));
evalcond[2]=(x455+(((-1.0)*x461*x465))+((x458*x460))+((sj5*x467))+(((-1.0)*r20*x458*x459))+((sj5*x457)));
evalcond[3]=((((-1.0)*r00*x458*x459))+x456+(((-1.0)*x461*x463))+((x458*x468))+((sj5*x462))+((sj5*x464)));
evalcond[4]=((((-1.0)*x465*x466))+(((-1.0)*cj5*r21*x459))+(((-1.0)*r20*x459*x469))+x456+((x460*x469))+(((-1.0)*x457*x461)));
evalcond[5]=(((x468*x469))+(((-1.0)*x463*x466))+(((-1.0)*x455))+(((-1.0)*cj5*r01*x459))+(((-1.0)*r00*x459*x469))+(((-1.0)*x461*x464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x470=((0.808902077151335)*sj7);
IkReal x471=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r00*x470))+(((-1.0)*r01*x471))+(((5.93471810089021)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x471))+((r20*x470))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x470))+(((-1.0)*r01*x471))+(((5.93471810089021)*px))))+IKsqr(((0.845697329376855)+((r21*x471))+((r20*x470))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x470))+(((-1.0)*r01*x471))+(((5.93471810089021)*px))), ((0.845697329376855)+((r21*x471))+((r20*x470))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x472=IKcos(j3);
IkReal x473=IKsin(j3);
IkReal x474=(r20*sj7);
IkReal x475=(cj5*cj6);
IkReal x476=((1.0)*cj7);
IkReal x477=(r21*sj7);
IkReal x478=((1.0)*cj5);
IkReal x479=(cj7*r01);
IkReal x480=(r02*sj6);
IkReal x481=(r00*sj7);
IkReal x482=(r22*sj6);
IkReal x483=((1.0)*sj5);
IkReal x484=(cj7*r21);
IkReal x485=(r01*sj7);
IkReal x486=(cj6*sj5);
IkReal x487=((1.0)*x473);
evalcond[0]=((((0.1685)*x473))+(((0.1363)*x481))+(((-1.0)*px))+(((0.1363)*x479)));
evalcond[1]=((0.1425)+(((0.1363)*x484))+(((-0.1685)*x472))+(((-1.0)*pz))+(((0.1363)*x474)));
evalcond[2]=((((-1.0)*r20*x476*x486))+(((-1.0)*cj5*r21*x476))+x472+(((-1.0)*x482*x483))+(((-1.0)*x474*x478))+((x477*x486)));
evalcond[3]=(((sj5*x474))+(((-1.0)*r20*x475*x476))+(((-1.0)*x487))+((sj5*x484))+((x475*x477))+(((-1.0)*x478*x482)));
evalcond[4]=(((sj5*x479))+((x475*x485))+(((-1.0)*x472))+((sj5*x481))+(((-1.0)*r00*x475*x476))+(((-1.0)*x478*x480)));
evalcond[5]=(((x485*x486))+(((-1.0)*r00*x476*x486))+(((-1.0)*x487))+(((-1.0)*cj5*r01*x476))+(((-1.0)*x480*x483))+(((-1.0)*x478*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x488=((0.808902077151335)*sj7);
IkReal x489=((0.808902077151335)*cj7);
if( IKabs(((((5.93471810089021)*px))+(((-1.0)*r01*x489))+(((-1.0)*r00*x488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x488))+((r21*x489))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.93471810089021)*px))+(((-1.0)*r01*x489))+(((-1.0)*r00*x488))))+IKsqr(((0.845697329376855)+((r20*x488))+((r21*x489))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((5.93471810089021)*px))+(((-1.0)*r01*x489))+(((-1.0)*r00*x488))), ((0.845697329376855)+((r20*x488))+((r21*x489))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x490=IKcos(j3);
IkReal x491=IKsin(j3);
IkReal x492=(r20*sj7);
IkReal x493=(cj5*cj6);
IkReal x494=((1.0)*cj7);
IkReal x495=(r21*sj7);
IkReal x496=((1.0)*cj5);
IkReal x497=(cj7*r01);
IkReal x498=(r02*sj6);
IkReal x499=(r00*sj7);
IkReal x500=(r22*sj6);
IkReal x501=((1.0)*sj5);
IkReal x502=(cj7*r21);
IkReal x503=(r01*sj7);
IkReal x504=(cj6*sj5);
IkReal x505=((1.0)*x491);
evalcond[0]=((((0.1363)*x497))+(((0.1363)*x499))+(((0.1685)*x491))+(((-1.0)*px)));
evalcond[1]=((0.1425)+(((0.1363)*x502))+(((0.1363)*x492))+(((-0.1685)*x490))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*r20*x494*x504))+((x495*x504))+(((-1.0)*cj5*r21*x494))+x490+(((-1.0)*x500*x501))+(((-1.0)*x492*x496)));
evalcond[3]=(((sj5*x502))+(((-1.0)*x505))+((x493*x495))+(((-1.0)*r20*x493*x494))+(((-1.0)*x496*x500))+((sj5*x492)));
evalcond[4]=((((-1.0)*x496*x498))+((x493*x503))+(((-1.0)*x490))+(((-1.0)*r00*x493*x494))+((sj5*x497))+((sj5*x499)));
evalcond[5]=((((-1.0)*x505))+(((-1.0)*x496*x499))+(((-1.0)*r00*x494*x504))+(((-1.0)*cj5*r01*x494))+((x503*x504))+(((-1.0)*x498*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x506=((337.0)*sj6);
IkReal x507=(cj7*r20);
IkReal x508=(cj6*r22);
IkReal x509=(r21*sj7);
IkReal x510=((272.6)*sj4);
CheckValue<IkReal> x511=IKPowWithIntegerCheck(sj4,-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x512.valid){
continue;
}
if( IKabs(((x511.value)*((((sj6*x509))+x508+(((-1.0)*sj6*x507)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x512.value)*(((((-1.0)*x506*x509))+(((-1.0)*cj7*r01*x510))+((x506*x507))+(((-337.0)*x508))+(((-1.0)*r00*sj7*x510))+(((2000.0)*px*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x511.value)*((((sj6*x509))+x508+(((-1.0)*sj6*x507))))))+IKsqr(((x512.value)*(((((-1.0)*x506*x509))+(((-1.0)*cj7*r01*x510))+((x506*x507))+(((-337.0)*x508))+(((-1.0)*r00*sj7*x510))+(((2000.0)*px*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x511.value)*((((sj6*x509))+x508+(((-1.0)*sj6*x507))))), ((x512.value)*(((((-1.0)*x506*x509))+(((-1.0)*cj7*r01*x510))+((x506*x507))+(((-337.0)*x508))+(((-1.0)*r00*sj7*x510))+(((2000.0)*px*sj4))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x513=IKsin(j3);
IkReal x514=IKcos(j3);
IkReal x515=(r21*sj7);
IkReal x516=((1.0)*sj6);
IkReal x517=(r20*sj7);
IkReal x518=(cj5*cj6);
IkReal x519=((1.0)*cj5);
IkReal x520=(cj7*r01);
IkReal x521=((1.0)*cj7);
IkReal x522=(r00*sj7);
IkReal x523=((1.0)*cj6);
IkReal x524=(r01*sj7);
IkReal x525=(cj7*r21);
IkReal x526=(cj7*sj6);
IkReal x527=(cj6*sj5);
IkReal x528=(sj4*x513);
IkReal x529=(sj4*x514);
evalcond[0]=(((r20*x526))+(((-1.0)*x515*x516))+x528+(((-1.0)*r22*x523)));
evalcond[1]=((((-1.0)*r02*x523))+x529+(((-1.0)*x516*x524))+((r00*x526)));
evalcond[2]=((((0.1685)*x513))+(((-1.0)*px))+(((0.1363)*x520))+(((0.1363)*x522))+(((0.4)*x529)));
evalcond[3]=((0.1425)+(((-0.1685)*x514))+(((-1.0)*pz))+(((0.1363)*x517))+(((0.1363)*x525))+(((0.4)*x528)));
evalcond[4]=((((-1.0)*r22*sj5*x516))+(((-1.0)*r20*x521*x527))+((x515*x527))+(((-1.0)*x517*x519))+x514+(((-1.0)*x519*x525)));
evalcond[5]=((((-1.0)*r20*x518*x521))+((cj4*x513))+((sj5*x525))+(((-1.0)*cj5*r22*x516))+((sj5*x517))+((x515*x518)));
evalcond[6]=(((cj4*x514))+((sj5*x522))+((sj5*x520))+(((-1.0)*r00*x518*x521))+((x518*x524))+(((-1.0)*cj5*r02*x516)));
evalcond[7]=((((-1.0)*r02*sj5*x516))+(((-1.0)*x513))+((x524*x527))+(((-1.0)*r00*x521*x527))+(((-1.0)*x519*x522))+(((-1.0)*x519*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x530=(cj6*r02);
IkReal x531=(cj7*r00*sj6);
IkReal x532=(r01*sj6*sj7);
CheckValue<IkReal> x533=IKPowWithIntegerCheck(sj4,-1);
if(!x533.valid){
continue;
}
if( IKabs(((((-2.37388724035608)*x530))+(((-2.37388724035608)*x532))+(((-0.808902077151335)*cj7*r01))+(((5.93471810089021)*px))+(((-0.808902077151335)*r00*sj7))+(((2.37388724035608)*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x533.value)*(((((-1.0)*x531))+x530+x532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37388724035608)*x530))+(((-2.37388724035608)*x532))+(((-0.808902077151335)*cj7*r01))+(((5.93471810089021)*px))+(((-0.808902077151335)*r00*sj7))+(((2.37388724035608)*x531))))+IKsqr(((x533.value)*(((((-1.0)*x531))+x530+x532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-2.37388724035608)*x530))+(((-2.37388724035608)*x532))+(((-0.808902077151335)*cj7*r01))+(((5.93471810089021)*px))+(((-0.808902077151335)*r00*sj7))+(((2.37388724035608)*x531))), ((x533.value)*(((((-1.0)*x531))+x530+x532))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x534=IKsin(j3);
IkReal x535=IKcos(j3);
IkReal x536=(r21*sj7);
IkReal x537=((1.0)*sj6);
IkReal x538=(r20*sj7);
IkReal x539=(cj5*cj6);
IkReal x540=((1.0)*cj5);
IkReal x541=(cj7*r01);
IkReal x542=((1.0)*cj7);
IkReal x543=(r00*sj7);
IkReal x544=((1.0)*cj6);
IkReal x545=(r01*sj7);
IkReal x546=(cj7*r21);
IkReal x547=(cj7*sj6);
IkReal x548=(cj6*sj5);
IkReal x549=(sj4*x534);
IkReal x550=(sj4*x535);
evalcond[0]=((((-1.0)*r22*x544))+((r20*x547))+x549+(((-1.0)*x536*x537)));
evalcond[1]=((((-1.0)*x537*x545))+(((-1.0)*r02*x544))+x550+((r00*x547)));
evalcond[2]=((((0.1685)*x534))+(((-1.0)*px))+(((0.1363)*x543))+(((0.1363)*x541))+(((0.4)*x550)));
evalcond[3]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x546))+(((0.1363)*x538))+(((-0.1685)*x535))+(((0.4)*x549)));
evalcond[4]=((((-1.0)*r20*x542*x548))+(((-1.0)*r22*sj5*x537))+(((-1.0)*x538*x540))+(((-1.0)*x540*x546))+((x536*x548))+x535);
evalcond[5]=(((cj4*x534))+(((-1.0)*cj5*r22*x537))+((sj5*x538))+((sj5*x546))+((x536*x539))+(((-1.0)*r20*x539*x542)));
evalcond[6]=(((x539*x545))+((cj4*x535))+(((-1.0)*cj5*r02*x537))+(((-1.0)*r00*x539*x542))+((sj5*x541))+((sj5*x543)));
evalcond[7]=((((-1.0)*r02*sj5*x537))+(((-1.0)*x534))+(((-1.0)*x540*x543))+(((-1.0)*x540*x541))+(((-1.0)*r00*x542*x548))+((x545*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x551=(sj6*sj7);
IkReal x552=((1.0)*cj7*sj6);
CheckValue<IkReal> x553 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x552))+((cj6*r22))+((r21*x551)))),IkReal(((((-1.0)*r00*x552))+((cj6*r02))+((r01*x551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x553.valid){
continue;
}
CheckValue<IkReal> x554=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x554.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x553.value)+(((1.5707963267949)*(x554.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x555=IKsin(j3);
IkReal x556=IKcos(j3);
IkReal x557=(r21*sj7);
IkReal x558=((1.0)*sj6);
IkReal x559=(r20*sj7);
IkReal x560=(cj5*cj6);
IkReal x561=((1.0)*cj5);
IkReal x562=(cj7*r01);
IkReal x563=((1.0)*cj7);
IkReal x564=(r00*sj7);
IkReal x565=((1.0)*cj6);
IkReal x566=(r01*sj7);
IkReal x567=(cj7*r21);
IkReal x568=(cj7*sj6);
IkReal x569=(cj6*sj5);
IkReal x570=(sj4*x555);
IkReal x571=(sj4*x556);
evalcond[0]=(x570+(((-1.0)*r22*x565))+((r20*x568))+(((-1.0)*x557*x558)));
evalcond[1]=((((-1.0)*x558*x566))+((r00*x568))+x571+(((-1.0)*r02*x565)));
evalcond[2]=((((0.1363)*x562))+(((0.1363)*x564))+(((0.1685)*x555))+(((-1.0)*px))+(((0.4)*x571)));
evalcond[3]=((0.1425)+(((0.1363)*x567))+(((-1.0)*pz))+(((-0.1685)*x556))+(((0.4)*x570))+(((0.1363)*x559)));
evalcond[4]=((((-1.0)*r22*sj5*x558))+(((-1.0)*x559*x561))+x556+(((-1.0)*r20*x563*x569))+((x557*x569))+(((-1.0)*x561*x567)));
evalcond[5]=(((cj4*x555))+((sj5*x559))+(((-1.0)*cj5*r22*x558))+((x557*x560))+((sj5*x567))+(((-1.0)*r20*x560*x563)));
evalcond[6]=((((-1.0)*r00*x560*x563))+((cj4*x556))+(((-1.0)*cj5*r02*x558))+((x560*x566))+((sj5*x564))+((sj5*x562)));
evalcond[7]=(((x566*x569))+(((-1.0)*x555))+(((-1.0)*r00*x563*x569))+(((-1.0)*r02*sj5*x558))+(((-1.0)*x561*x562))+(((-1.0)*x561*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x572=(r01*sj7);
IkReal x573=(cj5*cj6);
IkReal x574=((1.0)*cj7*r00);
if( IKabs(((((-1.0)*cj5*r02*sj6))+(((-1.0)*x573*x574))+((r00*sj5*sj7))+((cj7*r01*sj5))+((x572*x573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj6*x574))+((sj6*x572))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r02*sj6))+(((-1.0)*x573*x574))+((r00*sj5*sj7))+((cj7*r01*sj5))+((x572*x573))))+IKsqr(((((-1.0)*sj6*x574))+((sj6*x572))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj5*r02*sj6))+(((-1.0)*x573*x574))+((r00*sj5*sj7))+((cj7*r01*sj5))+((x572*x573))), ((((-1.0)*sj6*x574))+((sj6*x572))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x575=IKcos(j4);
IkReal x576=(cj7*r01);
IkReal x577=((1.0)*r02);
IkReal x578=(cj7*r00);
IkReal x579=(cj5*cj6);
IkReal x580=(r00*sj7);
IkReal x581=(r01*sj7);
evalcond[0]=((((-1.0)*cj6*x577))+((sj6*x578))+x575+(((-1.0)*sj6*x581)));
evalcond[1]=((0.4)+(((0.1363)*x576))+(((-1.0)*px))+(((0.1363)*x580))+(((0.4)*x575)));
evalcond[2]=(((x579*x581))+(((-1.0)*(IKsin(j4))))+((sj5*x580))+(((-1.0)*cj5*sj6*x577))+((sj5*x576))+(((-1.0)*x578*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x582=(sj6*sj7);
IkReal x583=((1.0)*cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((r11*x582))+((cj6*r12))+(((-1.0)*r10*x583)))))+(IKabs(((((-1.0)*r20*x583))+((cj6*r22))+((r21*x582))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x584=((0.808902077151335)*sj7);
IkReal x585=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r11*x585))+(((-1.0)*r10*x584))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x584))+((r21*x585))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x585))+(((-1.0)*r10*x584))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x584))+((r21*x585))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x585))+(((-1.0)*r10*x584))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x584))+((r21*x585))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x586=IKsin(j3);
IkReal x587=IKcos(j3);
IkReal x588=(r20*sj7);
IkReal x589=(cj7*r11);
IkReal x590=((1.0)*cj5);
IkReal x591=(sj5*sj7);
IkReal x592=((1.0)*sj5);
IkReal x593=(cj7*r21);
IkReal x594=(r10*sj7);
IkReal x595=(cj6*cj7);
IkReal x596=(cj5*cj6*sj7);
IkReal x597=(sj6*x590);
IkReal x598=(x590*x595);
evalcond[0]=((((0.1685)*x586))+(((-1.0)*py))+(((0.1363)*x589))+(((0.1363)*x594)));
evalcond[1]=((0.1425)+(((-0.1685)*x587))+(((-1.0)*pz))+(((0.1363)*x588))+(((0.1363)*x593)));
evalcond[2]=((((-1.0)*r20*x598))+((sj5*x588))+((r21*x596))+x586+(((-1.0)*r22*x597))+((sj5*x593)));
evalcond[3]=((((-1.0)*r12*x597))+((sj5*x589))+((r11*x596))+x587+(((-1.0)*r10*x598))+((r10*x591)));
evalcond[4]=((((-1.0)*r20*x592*x595))+(((-1.0)*x588*x590))+((cj6*r21*x591))+(((-1.0)*x590*x593))+x587+(((-1.0)*r22*sj6*x592)));
evalcond[5]=((((-1.0)*x586))+(((-1.0)*x589*x590))+((cj6*r11*x591))+(((-1.0)*x590*x594))+(((-1.0)*r10*x592*x595))+(((-1.0)*r12*sj6*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x599=((0.808902077151335)*sj7);
IkReal x600=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r11*x600))+(((-1.0)*r10*x599))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x600))+((r20*x599))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x600))+(((-1.0)*r10*x599))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x600))+((r20*x599))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x600))+(((-1.0)*r10*x599))+(((5.93471810089021)*py))), ((0.845697329376855)+((r21*x600))+((r20*x599))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x601=IKcos(j3);
IkReal x602=IKsin(j3);
IkReal x603=(r20*sj7);
IkReal x604=((1.0)*cj5);
IkReal x605=(cj7*r11);
IkReal x606=(r22*sj6);
IkReal x607=(r12*sj6);
IkReal x608=(sj5*sj7);
IkReal x609=((1.0)*sj5);
IkReal x610=(cj7*r21);
IkReal x611=(r10*sj7);
IkReal x612=(cj6*cj7);
IkReal x613=((1.0)*x602);
IkReal x614=(cj5*cj6*sj7);
IkReal x615=(x604*x612);
evalcond[0]=((((0.1685)*x602))+(((-1.0)*py))+(((0.1363)*x611))+(((0.1363)*x605)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x610))+(((-0.1685)*x601))+(((0.1363)*x603)));
evalcond[2]=((((-1.0)*x603*x604))+(((-1.0)*x604*x610))+x601+(((-1.0)*r20*x609*x612))+(((-1.0)*x606*x609))+((cj6*r21*x608)));
evalcond[3]=((((-1.0)*r20*x615))+(((-1.0)*x604*x606))+((r21*x614))+(((-1.0)*x613))+((sj5*x603))+((sj5*x610)));
evalcond[4]=((((-1.0)*x604*x607))+(((-1.0)*r10*x615))+((r11*x614))+(((-1.0)*x601))+((sj5*x605))+((r10*x608)));
evalcond[5]=((((-1.0)*r10*x609*x612))+(((-1.0)*x604*x605))+(((-1.0)*x604*x611))+(((-1.0)*x613))+((cj6*r11*x608))+(((-1.0)*x607*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x616=((0.808902077151335)*sj7);
IkReal x617=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r10*x616))+(((-1.0)*r11*x617))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x616))+((r21*x617))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x616))+(((-1.0)*r11*x617))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x616))+((r21*x617))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x616))+(((-1.0)*r11*x617))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x616))+((r21*x617))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x618=IKsin(j3);
IkReal x619=IKcos(j3);
IkReal x620=(r20*sj7);
IkReal x621=(cj7*r11);
IkReal x622=((1.0)*cj5);
IkReal x623=(sj5*sj7);
IkReal x624=((1.0)*sj5);
IkReal x625=(cj7*r21);
IkReal x626=(r10*sj7);
IkReal x627=(cj6*cj7);
IkReal x628=(cj5*cj6*sj7);
IkReal x629=(sj6*x622);
IkReal x630=(x622*x627);
evalcond[0]=((((0.1685)*x618))+(((0.1363)*x621))+(((0.1363)*x626))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x620))+(((0.1363)*x625))+(((-1.0)*pz))+(((-0.1685)*x619)));
evalcond[2]=(((r21*x628))+((sj5*x620))+((sj5*x625))+(((-1.0)*r20*x630))+x618+(((-1.0)*r22*x629)));
evalcond[3]=((((-1.0)*r12*x629))+((sj5*x621))+((r10*x623))+x619+(((-1.0)*r10*x630))+((r11*x628)));
evalcond[4]=(((cj6*r21*x623))+(((-1.0)*r22*sj6*x624))+(((-1.0)*x622*x625))+(((-1.0)*x620*x622))+x619+(((-1.0)*r20*x624*x627)));
evalcond[5]=(((cj6*r11*x623))+(((-1.0)*x621*x622))+(((-1.0)*r10*x624*x627))+(((-1.0)*x622*x626))+(((-1.0)*x618))+(((-1.0)*r12*sj6*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x631=((0.808902077151335)*sj7);
IkReal x632=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r11*x632))+(((-1.0)*r10*x631))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x632))+((r20*x631))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x632))+(((-1.0)*r10*x631))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x632))+((r20*x631))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x632))+(((-1.0)*r10*x631))+(((5.93471810089021)*py))), ((0.845697329376855)+((r21*x632))+((r20*x631))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x633=IKsin(j3);
IkReal x634=IKcos(j3);
IkReal x635=(r20*sj7);
IkReal x636=(cj7*r11);
IkReal x637=((1.0)*cj5);
IkReal x638=(sj5*sj7);
IkReal x639=((1.0)*sj5);
IkReal x640=(cj7*r21);
IkReal x641=(r10*sj7);
IkReal x642=(cj6*cj7);
IkReal x643=(cj5*cj6*sj7);
IkReal x644=(sj6*x637);
IkReal x645=(x637*x642);
evalcond[0]=((((0.1363)*x641))+(((0.1685)*x633))+(((0.1363)*x636))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x640))+(((0.1363)*x635))+(((-0.1685)*x634))+(((-1.0)*pz)));
evalcond[2]=(((sj5*x635))+((sj5*x640))+(((-1.0)*r22*x644))+((r21*x643))+(((-1.0)*r20*x645))+x633);
evalcond[3]=(((sj5*x636))+(((-1.0)*r12*x644))+(((-1.0)*r10*x645))+((r10*x638))+x634+((r11*x643)));
evalcond[4]=(((cj6*r21*x638))+(((-1.0)*r22*sj6*x639))+(((-1.0)*x635*x637))+x634+(((-1.0)*x637*x640))+(((-1.0)*r20*x639*x642)));
evalcond[5]=((((-1.0)*r10*x639*x642))+((cj6*r11*x638))+(((-1.0)*x636*x637))+(((-1.0)*x637*x641))+(((-1.0)*x633))+(((-1.0)*r12*sj6*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x646=((0.808902077151335)*sj7);
IkReal x647=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r11*x647))+(((-1.0)*r10*x646))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x646))+((r21*x647))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x647))+(((-1.0)*r10*x646))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x646))+((r21*x647))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x647))+(((-1.0)*r10*x646))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x646))+((r21*x647))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x648=IKcos(j3);
IkReal x649=IKsin(j3);
IkReal x650=(r20*sj7);
IkReal x651=((1.0)*cj5);
IkReal x652=(cj7*r11);
IkReal x653=(r22*sj6);
IkReal x654=(r12*sj6);
IkReal x655=(sj5*sj7);
IkReal x656=((1.0)*sj5);
IkReal x657=(cj7*r21);
IkReal x658=(r10*sj7);
IkReal x659=(cj6*cj7);
IkReal x660=((1.0)*x649);
IkReal x661=(cj5*cj6*sj7);
IkReal x662=(x651*x659);
evalcond[0]=((((0.1685)*x649))+(((-1.0)*py))+(((0.1363)*x652))+(((0.1363)*x658)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x650))+(((0.1363)*x657))+(((-0.1685)*x648)));
evalcond[2]=((((-1.0)*r20*x656*x659))+(((-1.0)*x651*x657))+x648+(((-1.0)*x650*x651))+((cj6*r21*x655))+(((-1.0)*x653*x656)));
evalcond[3]=((((-1.0)*x651*x653))+(((-1.0)*r20*x662))+((r21*x661))+(((-1.0)*x660))+((sj5*x650))+((sj5*x657)));
evalcond[4]=((((-1.0)*x648))+(((-1.0)*x651*x654))+(((-1.0)*r10*x662))+((r11*x661))+((sj5*x652))+((r10*x655)));
evalcond[5]=((((-1.0)*r10*x656*x659))+(((-1.0)*x651*x652))+(((-1.0)*x651*x658))+(((-1.0)*x660))+((cj6*r11*x655))+(((-1.0)*x654*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x663=((0.808902077151335)*sj7);
IkReal x664=((0.808902077151335)*cj7);
if( IKabs(((((-1.0)*r10*x663))+(((-1.0)*r11*x664))+(((5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x663))+((r21*x664))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x663))+(((-1.0)*r11*x664))+(((5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x663))+((r21*x664))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x663))+(((-1.0)*r11*x664))+(((5.93471810089021)*py))), ((0.845697329376855)+((r20*x663))+((r21*x664))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x665=IKcos(j3);
IkReal x666=IKsin(j3);
IkReal x667=(r20*sj7);
IkReal x668=((1.0)*cj5);
IkReal x669=(cj7*r11);
IkReal x670=(r22*sj6);
IkReal x671=(r12*sj6);
IkReal x672=(sj5*sj7);
IkReal x673=((1.0)*sj5);
IkReal x674=(cj7*r21);
IkReal x675=(r10*sj7);
IkReal x676=(cj6*cj7);
IkReal x677=((1.0)*x666);
IkReal x678=(cj5*cj6*sj7);
IkReal x679=(x668*x676);
evalcond[0]=((((0.1685)*x666))+(((-1.0)*py))+(((0.1363)*x675))+(((0.1363)*x669)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x674))+(((0.1363)*x667))+(((-0.1685)*x665)));
evalcond[2]=((((-1.0)*x668*x674))+(((-1.0)*r20*x673*x676))+(((-1.0)*x670*x673))+((cj6*r21*x672))+x665+(((-1.0)*x667*x668)));
evalcond[3]=(((sj5*x674))+((r21*x678))+(((-1.0)*r20*x679))+(((-1.0)*x668*x670))+((sj5*x667))+(((-1.0)*x677)));
evalcond[4]=(((r10*x672))+((r11*x678))+(((-1.0)*x668*x671))+(((-1.0)*x665))+(((-1.0)*r10*x679))+((sj5*x669)));
evalcond[5]=((((-1.0)*r10*x673*x676))+(((-1.0)*x668*x675))+((cj6*r11*x672))+(((-1.0)*x668*x669))+(((-1.0)*x671*x673))+(((-1.0)*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x680=((337.0)*sj6);
IkReal x681=(cj7*r20);
IkReal x682=(r21*sj7);
IkReal x683=((272.6)*sj4);
IkReal x684=(cj6*r22);
CheckValue<IkReal> x685=IKPowWithIntegerCheck(sj4,-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x686.valid){
continue;
}
if( IKabs(((x685.value)*((((sj6*x682))+x684+(((-1.0)*sj6*x681)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x686.value)*(((((-1.0)*r10*sj7*x683))+(((-1.0)*x680*x682))+(((2000.0)*py*sj4))+((x680*x681))+(((-337.0)*x684))+(((-1.0)*cj7*r11*x683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x685.value)*((((sj6*x682))+x684+(((-1.0)*sj6*x681))))))+IKsqr(((x686.value)*(((((-1.0)*r10*sj7*x683))+(((-1.0)*x680*x682))+(((2000.0)*py*sj4))+((x680*x681))+(((-337.0)*x684))+(((-1.0)*cj7*r11*x683))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x685.value)*((((sj6*x682))+x684+(((-1.0)*sj6*x681))))), ((x686.value)*(((((-1.0)*r10*sj7*x683))+(((-1.0)*x680*x682))+(((2000.0)*py*sj4))+((x680*x681))+(((-337.0)*x684))+(((-1.0)*cj7*r11*x683))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x687=IKsin(j3);
IkReal x688=IKcos(j3);
IkReal x689=((1.0)*sj6);
IkReal x690=(r21*sj7);
IkReal x691=(cj5*cj6);
IkReal x692=((1.0)*cj7);
IkReal x693=(r20*sj7);
IkReal x694=((1.0)*cj5);
IkReal x695=((1.0)*cj6);
IkReal x696=(r11*sj7);
IkReal x697=((0.1363)*cj7);
IkReal x698=(r10*sj7);
IkReal x699=(cj6*sj5);
IkReal x700=(cj7*sj5);
IkReal x701=(cj7*sj6);
IkReal x702=(sj4*x687);
IkReal x703=(sj4*x688);
evalcond[0]=(((r20*x701))+(((-1.0)*r22*x695))+x702+(((-1.0)*x689*x690)));
evalcond[1]=((((-1.0)*r12*x695))+x703+(((-1.0)*x689*x696))+((r10*x701)));
evalcond[2]=((((0.4)*x703))+(((-1.0)*py))+((r11*x697))+(((0.1363)*x698))+(((0.1685)*x687)));
evalcond[3]=((0.1425)+(((0.4)*x702))+(((-0.1685)*x688))+(((-1.0)*pz))+((r21*x697))+(((0.1363)*x693)));
evalcond[4]=((((-1.0)*r22*sj5*x689))+((x690*x699))+(((-1.0)*x693*x694))+(((-1.0)*cj5*r21*x692))+(((-1.0)*r20*x692*x699))+x688);
evalcond[5]=(((cj4*x687))+((x690*x691))+(((-1.0)*cj5*r22*x689))+((sj5*x693))+((r21*x700))+(((-1.0)*r20*x691*x692)));
evalcond[6]=((((-1.0)*r10*x691*x692))+((cj4*x688))+(((-1.0)*cj5*r12*x689))+((x691*x696))+((sj5*x698))+((r11*x700)));
evalcond[7]=((((-1.0)*cj5*r11*x692))+((x696*x699))+(((-1.0)*r10*x692*x699))+(((-1.0)*r12*sj5*x689))+(((-1.0)*x694*x698))+(((-1.0)*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x704=(cj6*r12);
IkReal x705=((2.37388724035608)*sj6);
IkReal x706=(cj7*r10);
IkReal x707=(r11*sj7);
CheckValue<IkReal> x708=IKPowWithIntegerCheck(sj4,-1);
if(!x708.valid){
continue;
}
if( IKabs(((((-0.808902077151335)*cj7*r11))+(((-0.808902077151335)*r10*sj7))+(((-1.0)*x705*x707))+(((-2.37388724035608)*x704))+(((5.93471810089021)*py))+((x705*x706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x708.value)*(((((-1.0)*sj6*x706))+x704+((sj6*x707)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.808902077151335)*cj7*r11))+(((-0.808902077151335)*r10*sj7))+(((-1.0)*x705*x707))+(((-2.37388724035608)*x704))+(((5.93471810089021)*py))+((x705*x706))))+IKsqr(((x708.value)*(((((-1.0)*sj6*x706))+x704+((sj6*x707))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-0.808902077151335)*cj7*r11))+(((-0.808902077151335)*r10*sj7))+(((-1.0)*x705*x707))+(((-2.37388724035608)*x704))+(((5.93471810089021)*py))+((x705*x706))), ((x708.value)*(((((-1.0)*sj6*x706))+x704+((sj6*x707))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x709=IKsin(j3);
IkReal x710=IKcos(j3);
IkReal x711=((1.0)*sj6);
IkReal x712=(r21*sj7);
IkReal x713=(cj5*cj6);
IkReal x714=((1.0)*cj7);
IkReal x715=(r20*sj7);
IkReal x716=((1.0)*cj5);
IkReal x717=((1.0)*cj6);
IkReal x718=(r11*sj7);
IkReal x719=((0.1363)*cj7);
IkReal x720=(r10*sj7);
IkReal x721=(cj6*sj5);
IkReal x722=(cj7*sj5);
IkReal x723=(cj7*sj6);
IkReal x724=(sj4*x709);
IkReal x725=(sj4*x710);
evalcond[0]=((((-1.0)*r22*x717))+(((-1.0)*x711*x712))+((r20*x723))+x724);
evalcond[1]=(((r10*x723))+(((-1.0)*r12*x717))+(((-1.0)*x711*x718))+x725);
evalcond[2]=(((r11*x719))+(((0.1685)*x709))+(((-1.0)*py))+(((0.1363)*x720))+(((0.4)*x725)));
evalcond[3]=((0.1425)+(((-0.1685)*x710))+(((-1.0)*pz))+((r21*x719))+(((0.1363)*x715))+(((0.4)*x724)));
evalcond[4]=(((x712*x721))+(((-1.0)*r22*sj5*x711))+(((-1.0)*cj5*r21*x714))+x710+(((-1.0)*r20*x714*x721))+(((-1.0)*x715*x716)));
evalcond[5]=((((-1.0)*r20*x713*x714))+(((-1.0)*cj5*r22*x711))+((cj4*x709))+((sj5*x715))+((r21*x722))+((x712*x713)));
evalcond[6]=(((cj4*x710))+(((-1.0)*cj5*r12*x711))+(((-1.0)*r10*x713*x714))+((sj5*x720))+((r11*x722))+((x713*x718)));
evalcond[7]=((((-1.0)*r12*sj5*x711))+(((-1.0)*cj5*r11*x714))+(((-1.0)*x709))+((x718*x721))+(((-1.0)*x716*x720))+(((-1.0)*r10*x714*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x726=(sj6*sj7);
IkReal x727=((1.0)*cj7*sj6);
CheckValue<IkReal> x728=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal((((cj6*r22))+(((-1.0)*r20*x727))+((r21*x726)))),IkReal((((cj6*r12))+(((-1.0)*r10*x727))+((r11*x726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x729.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x728.value)))+(x729.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x730=IKsin(j3);
IkReal x731=IKcos(j3);
IkReal x732=((1.0)*sj6);
IkReal x733=(r21*sj7);
IkReal x734=(cj5*cj6);
IkReal x735=((1.0)*cj7);
IkReal x736=(r20*sj7);
IkReal x737=((1.0)*cj5);
IkReal x738=((1.0)*cj6);
IkReal x739=(r11*sj7);
IkReal x740=((0.1363)*cj7);
IkReal x741=(r10*sj7);
IkReal x742=(cj6*sj5);
IkReal x743=(cj7*sj5);
IkReal x744=(cj7*sj6);
IkReal x745=(sj4*x730);
IkReal x746=(sj4*x731);
evalcond[0]=((((-1.0)*x732*x733))+((r20*x744))+x745+(((-1.0)*r22*x738)));
evalcond[1]=((((-1.0)*x732*x739))+((r10*x744))+x746+(((-1.0)*r12*x738)));
evalcond[2]=((((0.1363)*x741))+(((-1.0)*py))+((r11*x740))+(((0.4)*x746))+(((0.1685)*x730)));
evalcond[3]=((0.1425)+(((-1.0)*pz))+((r21*x740))+(((-0.1685)*x731))+(((0.1363)*x736))+(((0.4)*x745)));
evalcond[4]=((((-1.0)*r20*x735*x742))+(((-1.0)*x736*x737))+(((-1.0)*cj5*r21*x735))+(((-1.0)*r22*sj5*x732))+x731+((x733*x742)));
evalcond[5]=(((cj4*x730))+((x733*x734))+((sj5*x736))+((r21*x743))+(((-1.0)*r20*x734*x735))+(((-1.0)*cj5*r22*x732)));
evalcond[6]=(((cj4*x731))+(((-1.0)*cj5*r12*x732))+(((-1.0)*r10*x734*x735))+((x734*x739))+((r11*x743))+((sj5*x741)));
evalcond[7]=((((-1.0)*cj5*r11*x735))+(((-1.0)*x737*x741))+((x739*x742))+(((-1.0)*r12*sj5*x732))+(((-1.0)*x730))+(((-1.0)*r10*x735*x742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x747=(cj5*cj6);
IkReal x748=((1.0)*sj7);
IkReal x749=(cj7*r01);
if( IKabs(((((-1.0)*r00*sj5*x748))+(((-1.0)*r01*x747*x748))+((cj5*r02*sj6))+((cj7*r00*x747))+(((-1.0)*sj5*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((-2.5)*px))+(((0.34075)*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x748))+(((-1.0)*r01*x747*x748))+((cj5*r02*sj6))+((cj7*r00*x747))+(((-1.0)*sj5*x749))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((-2.5)*px))+(((0.34075)*x749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj5*x748))+(((-1.0)*r01*x747*x748))+((cj5*r02*sj6))+((cj7*r00*x747))+(((-1.0)*sj5*x749))), ((-1.0)+(((0.34075)*r00*sj7))+(((-2.5)*px))+(((0.34075)*x749))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x750=IKcos(j4);
IkReal x751=(cj7*r01);
IkReal x752=((1.0)*r02);
IkReal x753=(cj7*r00);
IkReal x754=(cj5*cj6);
IkReal x755=(r00*sj7);
IkReal x756=(r01*sj7);
evalcond[0]=((-0.4)+(((-0.4)*x750))+(((-1.0)*px))+(((0.1363)*x751))+(((0.1363)*x755)));
evalcond[1]=((((-1.0)*cj6*x752))+((sj6*x753))+(((-1.0)*x750))+(((-1.0)*sj6*x756)));
evalcond[2]=((((-1.0)*cj5*sj6*x752))+(IKsin(j4))+(((-1.0)*x753*x754))+((sj5*x755))+((sj5*x751))+((x754*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x757=(sj6*sj7);
IkReal x758=(cj7*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-1.0)*r20*x758))+((r21*x757))+((cj6*r22)))))+(IKabs(((((-1.0)*r11*x757))+((r10*x758))+(((-1.0)*cj6*r12))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=sj4;
j3eval[1]=((1.0)+(((-1.0)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x759=((0.808902077151335)*sj7);
IkReal x760=((0.808902077151335)*cj7);
if( IKabs((((r10*x759))+((r11*x760))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x760))+((r20*x759))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x759))+((r11*x760))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x760))+((r20*x759))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x759))+((r11*x760))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x760))+((r20*x759))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x761=IKsin(j3);
IkReal x762=IKcos(j3);
IkReal x763=(r20*sj7);
IkReal x764=((1.0)*cj5);
IkReal x765=(cj7*r11);
IkReal x766=(r22*sj6);
IkReal x767=(r12*sj6);
IkReal x768=(sj5*sj7);
IkReal x769=((1.0)*sj5);
IkReal x770=(cj7*r21);
IkReal x771=(r10*sj7);
IkReal x772=(cj6*cj7);
IkReal x773=(cj5*cj6*sj7);
IkReal x774=(x764*x772);
evalcond[0]=((((-0.1685)*x761))+(((0.1363)*x765))+(((-1.0)*py))+(((0.1363)*x771)));
evalcond[1]=((0.1425)+(((-0.1685)*x762))+(((0.1363)*x763))+(((-1.0)*pz))+(((0.1363)*x770)));
evalcond[2]=((((-1.0)*r20*x774))+(((-1.0)*x764*x766))+((r21*x773))+x761+((sj5*x770))+((sj5*x763)));
evalcond[3]=((((-1.0)*r20*x769*x772))+(((-1.0)*x763*x764))+((cj6*r21*x768))+(((-1.0)*x766*x769))+(((-1.0)*x764*x770))+x762);
evalcond[4]=((((-1.0)*x764*x771))+(((-1.0)*x764*x765))+(((-1.0)*x767*x769))+x761+((cj6*r11*x768))+(((-1.0)*r10*x769*x772)));
evalcond[5]=(((r10*x768))+(((-1.0)*x764*x767))+(((-1.0)*r10*x774))+((r11*x773))+(((-1.0)*x762))+((sj5*x765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x775=((0.808902077151335)*sj7);
IkReal x776=((0.808902077151335)*cj7);
if( IKabs((((r10*x775))+((r11*x776))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x776))+((r20*x775))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x775))+((r11*x776))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x776))+((r20*x775))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x775))+((r11*x776))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x776))+((r20*x775))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x777=IKcos(j3);
IkReal x778=IKsin(j3);
IkReal x779=(cj5*cj6);
IkReal x780=((1.0)*cj7);
IkReal x781=(r20*sj7);
IkReal x782=(r21*sj7);
IkReal x783=(cj7*r11);
IkReal x784=(r11*sj7);
IkReal x785=(r10*sj7);
IkReal x786=(cj6*sj5);
IkReal x787=(cj7*r21);
IkReal x788=((1.0)*cj5);
IkReal x789=(sj6*x788);
IkReal x790=((1.0)*sj5*sj6);
evalcond[0]=((((0.1363)*x783))+(((0.1363)*x785))+(((-0.1685)*x778))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x787))+(((0.1363)*x781))+(((-0.1685)*x777))+(((-1.0)*pz)));
evalcond[2]=(((sj5*x785))+((sj5*x783))+((x779*x784))+(((-1.0)*r10*x779*x780))+(((-1.0)*r12*x789))+x777);
evalcond[3]=(((x782*x786))+(((-1.0)*x781*x788))+(((-1.0)*r20*x780*x786))+(((-1.0)*r22*x790))+x777+(((-1.0)*cj5*r21*x780)));
evalcond[4]=(((sj5*x781))+((sj5*x787))+(((-1.0)*r20*x779*x780))+((x779*x782))+(((-1.0)*r22*x789))+(((-1.0)*x778)));
evalcond[5]=((((-1.0)*cj5*r11*x780))+((x784*x786))+(((-1.0)*r10*x780*x786))+(((-1.0)*r12*x790))+x778+(((-1.0)*x785*x788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x791=((0.808902077151335)*sj7);
IkReal x792=((0.808902077151335)*cj7);
if( IKabs((((r10*x791))+((r11*x792))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x791))+((r21*x792))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x791))+((r11*x792))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x791))+((r21*x792))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x791))+((r11*x792))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r20*x791))+((r21*x792))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x793=IKsin(j3);
IkReal x794=IKcos(j3);
IkReal x795=(r20*sj7);
IkReal x796=((1.0)*cj5);
IkReal x797=(cj7*r11);
IkReal x798=(r22*sj6);
IkReal x799=(r12*sj6);
IkReal x800=(sj5*sj7);
IkReal x801=((1.0)*sj5);
IkReal x802=(cj7*r21);
IkReal x803=(r10*sj7);
IkReal x804=(cj6*cj7);
IkReal x805=(cj5*cj6*sj7);
IkReal x806=(x796*x804);
evalcond[0]=((((0.1363)*x797))+(((-0.1685)*x793))+(((-1.0)*py))+(((0.1363)*x803)));
evalcond[1]=((0.1425)+(((0.1363)*x795))+(((-0.1685)*x794))+(((-1.0)*pz))+(((0.1363)*x802)));
evalcond[2]=((((-1.0)*x796*x798))+((sj5*x795))+((r21*x805))+(((-1.0)*r20*x806))+x793+((sj5*x802)));
evalcond[3]=((((-1.0)*x796*x802))+(((-1.0)*x798*x801))+((cj6*r21*x800))+(((-1.0)*x795*x796))+(((-1.0)*r20*x801*x804))+x794);
evalcond[4]=((((-1.0)*x796*x803))+(((-1.0)*x796*x797))+(((-1.0)*x799*x801))+(((-1.0)*r10*x801*x804))+((cj6*r11*x800))+x793);
evalcond[5]=((((-1.0)*x796*x799))+((sj5*x797))+((r11*x805))+(((-1.0)*x794))+((r10*x800))+(((-1.0)*r10*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x807=((0.808902077151335)*sj7);
IkReal x808=((0.808902077151335)*cj7);
if( IKabs((((r11*x808))+((r10*x807))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x808))+((r20*x807))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x808))+((r10*x807))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x808))+((r20*x807))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*x808))+((r10*x807))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x808))+((r20*x807))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x809=IKsin(j3);
IkReal x810=IKcos(j3);
IkReal x811=(r20*sj7);
IkReal x812=((1.0)*cj5);
IkReal x813=(cj7*r11);
IkReal x814=(r22*sj6);
IkReal x815=(r12*sj6);
IkReal x816=(sj5*sj7);
IkReal x817=((1.0)*sj5);
IkReal x818=(cj7*r21);
IkReal x819=(r10*sj7);
IkReal x820=(cj6*cj7);
IkReal x821=(cj5*cj6*sj7);
IkReal x822=(x812*x820);
evalcond[0]=((((0.1363)*x819))+(((0.1363)*x813))+(((-0.1685)*x809))+(((-1.0)*py)));
evalcond[1]=((0.1425)+(((0.1363)*x818))+(((0.1363)*x811))+(((-0.1685)*x810))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x812*x814))+((r21*x821))+(((-1.0)*r20*x822))+((sj5*x818))+((sj5*x811))+x809);
evalcond[3]=((((-1.0)*x812*x818))+(((-1.0)*r20*x817*x820))+(((-1.0)*x811*x812))+(((-1.0)*x814*x817))+((cj6*r21*x816))+x810);
evalcond[4]=((((-1.0)*x812*x813))+(((-1.0)*x812*x819))+((cj6*r11*x816))+(((-1.0)*x815*x817))+x809+(((-1.0)*r10*x817*x820)));
evalcond[5]=((((-1.0)*x812*x815))+((sj5*x813))+((r10*x816))+(((-1.0)*x810))+(((-1.0)*r10*x822))+((r11*x821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x823=((0.808902077151335)*sj7);
IkReal x824=((0.808902077151335)*cj7);
if( IKabs((((r10*x823))+((r11*x824))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r21*x824))+((r20*x823))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x823))+((r11*x824))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r21*x824))+((r20*x823))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x823))+((r11*x824))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r21*x824))+((r20*x823))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x825=IKcos(j3);
IkReal x826=IKsin(j3);
IkReal x827=(cj5*cj6);
IkReal x828=((1.0)*cj7);
IkReal x829=(r20*sj7);
IkReal x830=(r21*sj7);
IkReal x831=(cj7*r11);
IkReal x832=(r11*sj7);
IkReal x833=(r10*sj7);
IkReal x834=(cj6*sj5);
IkReal x835=(cj7*r21);
IkReal x836=((1.0)*cj5);
IkReal x837=(sj6*x836);
IkReal x838=((1.0)*sj5*sj6);
evalcond[0]=((((-1.0)*py))+(((-0.1685)*x826))+(((0.1363)*x833))+(((0.1363)*x831)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((-0.1685)*x825))+(((0.1363)*x835))+(((0.1363)*x829)));
evalcond[2]=(((x827*x832))+(((-1.0)*r12*x837))+((sj5*x831))+((sj5*x833))+(((-1.0)*r10*x827*x828))+x825);
evalcond[3]=(((x830*x834))+(((-1.0)*r22*x838))+(((-1.0)*cj5*r21*x828))+x825+(((-1.0)*x829*x836))+(((-1.0)*r20*x828*x834)));
evalcond[4]=(((x827*x830))+(((-1.0)*r20*x827*x828))+((sj5*x829))+(((-1.0)*x826))+((sj5*x835))+(((-1.0)*r22*x837)));
evalcond[5]=(((x832*x834))+(((-1.0)*x833*x836))+(((-1.0)*r12*x838))+(((-1.0)*cj5*r11*x828))+x826+(((-1.0)*r10*x828*x834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x839=((0.808902077151335)*sj7);
IkReal x840=((0.808902077151335)*cj7);
if( IKabs((((r10*x839))+((r11*x840))+(((-5.93471810089021)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+((r20*x839))+((r21*x840))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x839))+((r11*x840))+(((-5.93471810089021)*py))))+IKsqr(((0.845697329376855)+((r20*x839))+((r21*x840))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x839))+((r11*x840))+(((-5.93471810089021)*py))), ((0.845697329376855)+((r20*x839))+((r21*x840))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x841=IKcos(j3);
IkReal x842=IKsin(j3);
IkReal x843=(cj5*cj6);
IkReal x844=((1.0)*cj7);
IkReal x845=(r20*sj7);
IkReal x846=(r21*sj7);
IkReal x847=(cj7*r11);
IkReal x848=(r11*sj7);
IkReal x849=(r10*sj7);
IkReal x850=(cj6*sj5);
IkReal x851=(cj7*r21);
IkReal x852=((1.0)*cj5);
IkReal x853=(sj6*x852);
IkReal x854=((1.0)*sj5*sj6);
evalcond[0]=((((-0.1685)*x842))+(((-1.0)*py))+(((0.1363)*x849))+(((0.1363)*x847)));
evalcond[1]=((0.1425)+(((0.1363)*x851))+(((-0.1685)*x841))+(((-1.0)*pz))+(((0.1363)*x845)));
evalcond[2]=((((-1.0)*r12*x853))+((x843*x848))+((sj5*x849))+((sj5*x847))+(((-1.0)*r10*x843*x844))+x841);
evalcond[3]=((((-1.0)*r22*x854))+(((-1.0)*x845*x852))+(((-1.0)*cj5*r21*x844))+((x846*x850))+x841+(((-1.0)*r20*x844*x850)));
evalcond[4]=((((-1.0)*r22*x853))+((sj5*x851))+((x843*x846))+((sj5*x845))+(((-1.0)*x842))+(((-1.0)*r20*x843*x844)));
evalcond[5]=(((x848*x850))+(((-1.0)*r12*x854))+(((-1.0)*x849*x852))+(((-1.0)*cj5*r11*x844))+(((-1.0)*r10*x844*x850))+x842);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x855=((337.0)*sj6);
IkReal x856=(cj7*r20);
IkReal x857=(cj6*r22);
IkReal x858=(r21*sj7);
IkReal x859=((272.6)*sj4);
CheckValue<IkReal> x860=IKPowWithIntegerCheck(sj4,-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861=IKPowWithIntegerCheck(((800.0)+(((-800.0)*(cj4*cj4)))),-1);
if(!x861.valid){
continue;
}
if( IKabs(((x860.value)*((x857+(((-1.0)*sj6*x856))+((sj6*x858)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x861.value)*((((x855*x856))+((cj7*r11*x859))+(((-337.0)*x857))+((r10*sj7*x859))+(((-1.0)*x855*x858))+(((-2000.0)*py*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x860.value)*((x857+(((-1.0)*sj6*x856))+((sj6*x858))))))+IKsqr(((x861.value)*((((x855*x856))+((cj7*r11*x859))+(((-337.0)*x857))+((r10*sj7*x859))+(((-1.0)*x855*x858))+(((-2000.0)*py*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x860.value)*((x857+(((-1.0)*sj6*x856))+((sj6*x858))))), ((x861.value)*((((x855*x856))+((cj7*r11*x859))+(((-337.0)*x857))+((r10*sj7*x859))+(((-1.0)*x855*x858))+(((-2000.0)*py*sj4))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x862=IKsin(j3);
IkReal x863=IKcos(j3);
IkReal x864=((1.0)*sj6);
IkReal x865=(r21*sj7);
IkReal x866=(cj5*cj6);
IkReal x867=((1.0)*cj7);
IkReal x868=(r20*sj7);
IkReal x869=((1.0)*cj5);
IkReal x870=((1.0)*cj6);
IkReal x871=(r11*sj7);
IkReal x872=((0.1363)*cj7);
IkReal x873=(r10*sj7);
IkReal x874=(cj6*sj5);
IkReal x875=(cj7*sj5);
IkReal x876=(cj7*sj6);
IkReal x877=(sj4*x862);
IkReal x878=(sj4*x863);
evalcond[0]=((((-1.0)*x864*x865))+x877+((r20*x876))+(((-1.0)*r22*x870)));
evalcond[1]=((((-1.0)*r12*x870))+((r10*x876))+(((-1.0)*x878))+(((-1.0)*x864*x871)));
evalcond[2]=((((0.1363)*x873))+((r11*x872))+(((-1.0)*py))+(((-0.4)*x878))+(((-0.1685)*x862)));
evalcond[3]=((0.1425)+(((0.1363)*x868))+((r21*x872))+(((-1.0)*pz))+(((0.4)*x877))+(((-0.1685)*x863)));
evalcond[4]=((((-1.0)*r20*x867*x874))+(((-1.0)*x868*x869))+(((-1.0)*cj5*r21*x867))+x863+(((-1.0)*r22*sj5*x864))+((x865*x874)));
evalcond[5]=(((r21*x875))+((sj5*x868))+(((-1.0)*r20*x866*x867))+(((-1.0)*cj5*r22*x864))+((cj4*x862))+((x865*x866)));
evalcond[6]=((((-1.0)*cj5*r11*x867))+((x871*x874))+(((-1.0)*x869*x873))+(((-1.0)*r10*x867*x874))+x862+(((-1.0)*r12*sj5*x864)));
evalcond[7]=((((-1.0)*cj5*r12*x864))+((sj5*x873))+((r11*x875))+(((-1.0)*r10*x866*x867))+((x866*x871))+(((-1.0)*cj4*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x879=((2.37388724035608)*sj6);
IkReal x880=(r21*sj7);
IkReal x881=(cj7*r20);
IkReal x882=(cj6*r22);
CheckValue<IkReal> x883=IKPowWithIntegerCheck(sj4,-1);
if(!x883.valid){
continue;
}
if( IKabs(((x883.value)*(((((-1.0)*sj6*x881))+((sj6*x880))+x882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.845697329376855)+(((-1.0)*x879*x881))+(((0.808902077151335)*r20*sj7))+((x879*x880))+(((0.808902077151335)*cj7*r21))+(((2.37388724035608)*x882))+(((-5.93471810089021)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x883.value)*(((((-1.0)*sj6*x881))+((sj6*x880))+x882))))+IKsqr(((0.845697329376855)+(((-1.0)*x879*x881))+(((0.808902077151335)*r20*sj7))+((x879*x880))+(((0.808902077151335)*cj7*r21))+(((2.37388724035608)*x882))+(((-5.93471810089021)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x883.value)*(((((-1.0)*sj6*x881))+((sj6*x880))+x882))), ((0.845697329376855)+(((-1.0)*x879*x881))+(((0.808902077151335)*r20*sj7))+((x879*x880))+(((0.808902077151335)*cj7*r21))+(((2.37388724035608)*x882))+(((-5.93471810089021)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x884=IKsin(j3);
IkReal x885=IKcos(j3);
IkReal x886=((1.0)*sj6);
IkReal x887=(r21*sj7);
IkReal x888=(cj5*cj6);
IkReal x889=((1.0)*cj7);
IkReal x890=(r20*sj7);
IkReal x891=((1.0)*cj5);
IkReal x892=((1.0)*cj6);
IkReal x893=(r11*sj7);
IkReal x894=((0.1363)*cj7);
IkReal x895=(r10*sj7);
IkReal x896=(cj6*sj5);
IkReal x897=(cj7*sj5);
IkReal x898=(cj7*sj6);
IkReal x899=(sj4*x884);
IkReal x900=(sj4*x885);
evalcond[0]=((((-1.0)*x886*x887))+((r20*x898))+(((-1.0)*r22*x892))+x899);
evalcond[1]=(((r10*x898))+(((-1.0)*r12*x892))+(((-1.0)*x900))+(((-1.0)*x886*x893)));
evalcond[2]=(((r11*x894))+(((-1.0)*py))+(((-0.1685)*x884))+(((-0.4)*x900))+(((0.1363)*x895)));
evalcond[3]=((0.1425)+(((0.4)*x899))+(((-1.0)*pz))+(((-0.1685)*x885))+((r21*x894))+(((0.1363)*x890)));
evalcond[4]=((((-1.0)*r20*x889*x896))+(((-1.0)*r22*sj5*x886))+(((-1.0)*cj5*r21*x889))+x885+(((-1.0)*x890*x891))+((x887*x896)));
evalcond[5]=(((x887*x888))+(((-1.0)*cj5*r22*x886))+((sj5*x890))+(((-1.0)*r20*x888*x889))+((cj4*x884))+((r21*x897)));
evalcond[6]=((((-1.0)*r12*sj5*x886))+((x893*x896))+(((-1.0)*r10*x889*x896))+x884+(((-1.0)*cj5*r11*x889))+(((-1.0)*x891*x895)));
evalcond[7]=(((r11*x897))+(((-1.0)*r10*x888*x889))+((sj5*x895))+(((-1.0)*cj4*x885))+((x888*x893))+(((-1.0)*cj5*r12*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x901=(sj6*sj7);
IkReal x902=(cj7*sj6);
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal((((r21*x901))+(((-1.0)*r20*x902))+((cj6*r22)))),IkReal(((((-1.0)*r11*x901))+(((-1.0)*cj6*r12))+((r10*x902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x904.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x903.value)+(((1.5707963267949)*(x904.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x905=IKsin(j3);
IkReal x906=IKcos(j3);
IkReal x907=((1.0)*sj6);
IkReal x908=(r21*sj7);
IkReal x909=(cj5*cj6);
IkReal x910=((1.0)*cj7);
IkReal x911=(r20*sj7);
IkReal x912=((1.0)*cj5);
IkReal x913=((1.0)*cj6);
IkReal x914=(r11*sj7);
IkReal x915=((0.1363)*cj7);
IkReal x916=(r10*sj7);
IkReal x917=(cj6*sj5);
IkReal x918=(cj7*sj5);
IkReal x919=(cj7*sj6);
IkReal x920=(sj4*x905);
IkReal x921=(sj4*x906);
evalcond[0]=((((-1.0)*r22*x913))+((r20*x919))+x920+(((-1.0)*x907*x908)));
evalcond[1]=(((r10*x919))+(((-1.0)*x921))+(((-1.0)*r12*x913))+(((-1.0)*x907*x914)));
evalcond[2]=((((-0.4)*x921))+(((0.1363)*x916))+((r11*x915))+(((-1.0)*py))+(((-0.1685)*x905)));
evalcond[3]=((0.1425)+(((0.1363)*x911))+(((-1.0)*pz))+(((0.4)*x920))+((r21*x915))+(((-0.1685)*x906)));
evalcond[4]=((((-1.0)*r20*x910*x917))+(((-1.0)*cj5*r21*x910))+(((-1.0)*r22*sj5*x907))+((x908*x917))+x906+(((-1.0)*x911*x912)));
evalcond[5]=(((sj5*x911))+(((-1.0)*r20*x909*x910))+(((-1.0)*cj5*r22*x907))+((cj4*x905))+((r21*x918))+((x908*x909)));
evalcond[6]=((((-1.0)*r12*sj5*x907))+(((-1.0)*cj5*r11*x910))+((x914*x917))+(((-1.0)*x912*x916))+x905+(((-1.0)*r10*x910*x917)));
evalcond[7]=((((-1.0)*cj5*r12*x907))+((x909*x914))+((sj5*x916))+(((-1.0)*r10*x909*x910))+((r11*x918))+(((-1.0)*cj4*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x922=(cj5*cj7);
IkReal x923=(sj5*sj6);
IkReal x924=(cj5*sj7);
IkReal x925=((1.0)*r10);
IkReal x926=(cj6*sj5);
CheckValue<IkReal> x927=IKPowWithIntegerCheck(cj2,-1);
if(!x927.valid){
continue;
}
if( IKabs(((x927.value)*((((r11*sj7*x926))+(((-1.0)*x924*x925))+(((-1.0)*cj7*x925*x926))+(((-1.0)*r11*x922))+(((-1.0)*r12*x923)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x923))+((r21*x922))+(((-1.0)*r21*sj7*x926))+((cj7*r20*x926))+((r20*x924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x927.value)*((((r11*sj7*x926))+(((-1.0)*x924*x925))+(((-1.0)*cj7*x925*x926))+(((-1.0)*r11*x922))+(((-1.0)*r12*x923))))))+IKsqr((((r22*x923))+((r21*x922))+(((-1.0)*r21*sj7*x926))+((cj7*r20*x926))+((r20*x924))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x927.value)*((((r11*sj7*x926))+(((-1.0)*x924*x925))+(((-1.0)*cj7*x925*x926))+(((-1.0)*r11*x922))+(((-1.0)*r12*x923))))), (((r22*x923))+((r21*x922))+(((-1.0)*r21*sj7*x926))+((cj7*r20*x926))+((r20*x924))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x928=IKsin(j3);
IkReal x929=(cj6*sj5);
IkReal x930=((1.0)*cj5);
IkReal x931=((1.0)*cj7);
IkReal x932=((1.0)*sj5*sj6);
evalcond[0]=((((-1.0)*r22*x932))+(((-1.0)*r20*x929*x931))+((r21*sj7*x929))+(((-1.0)*r20*sj7*x930))+(IKcos(j3))+(((-1.0)*cj7*r21*x930)));
evalcond[1]=((((-1.0)*r00*x929*x931))+(((-1.0)*cj7*r01*x930))+(((-1.0)*r02*x932))+(((-1.0)*r00*sj7*x930))+((r01*sj7*x929))+((sj2*x928)));
evalcond[2]=((((-1.0)*r12*x932))+((r11*sj7*x929))+(((-1.0)*cj2*x928))+(((-1.0)*cj7*r11*x930))+(((-1.0)*r10*sj7*x930))+(((-1.0)*r10*x929*x931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x933=(sj2*sj6);
IkReal x934=(cj7*r00);
IkReal x935=(r01*sj7);
IkReal x936=(cj2*sj6);
IkReal x937=(r11*sj7);
IkReal x938=(cj6*r12);
IkReal x939=(cj6*r02);
IkReal x940=((1.0)*cj7*r10);
if( IKabs((((x936*x937))+((cj2*x938))+(((-1.0)*sj2*x939))+(((-1.0)*x936*x940))+(((-1.0)*x933*x935))+((x933*x934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x934*x936))+((x935*x936))+(((-1.0)*x933*x940))+((cj2*x939))+((sj2*x938))+((x933*x937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x936*x937))+((cj2*x938))+(((-1.0)*sj2*x939))+(((-1.0)*x936*x940))+(((-1.0)*x933*x935))+((x933*x934))))+IKsqr(((((-1.0)*x934*x936))+((x935*x936))+(((-1.0)*x933*x940))+((cj2*x939))+((sj2*x938))+((x933*x937))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x936*x937))+((cj2*x938))+(((-1.0)*sj2*x939))+(((-1.0)*x936*x940))+(((-1.0)*x933*x935))+((x933*x934))), ((((-1.0)*x934*x936))+((x935*x936))+(((-1.0)*x933*x940))+((cj2*x939))+((sj2*x938))+((x933*x937))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x941=IKcos(j4);
IkReal x942=IKsin(j4);
IkReal x943=(cj5*cj6);
IkReal x944=(cj7*r10);
IkReal x945=(cj7*sj5);
IkReal x946=(r00*sj7);
IkReal x947=(r11*sj7);
IkReal x948=((0.1363)*cj7);
IkReal x949=((0.4)*sj2);
IkReal x950=(r10*sj7);
IkReal x951=((1.0)*cj6);
IkReal x952=((1.0)*sj6);
IkReal x953=(r01*sj7);
IkReal x954=((1.0)*sj2);
IkReal x955=(cj7*r00);
IkReal x956=(cj2*x941);
IkReal x957=(cj2*x942);
IkReal x958=((0.4)*x941);
IkReal x959=(cj5*x952);
IkReal x960=(x942*x954);
evalcond[0]=(((sj6*x944))+((sj2*x941))+(((-1.0)*x947*x952))+(((-1.0)*r12*x951))+x957);
evalcond[1]=(((sj6*x955))+(((-1.0)*x952*x953))+x956+(((-1.0)*r02*x951))+(((-1.0)*x960)));
evalcond[2]=((((0.4)*cj2))+(((-1.0)*x942*x949))+(((-1.0)*px))+((r01*x948))+(((0.1363)*x946))+(((0.4)*x956)));
evalcond[3]=(((x941*x949))+(((-1.0)*py))+((r11*x948))+(((0.1363)*x950))+(((0.4)*x957))+x949);
evalcond[4]=((((-1.0)*x943*x944))+((x943*x947))+((r11*x945))+(((-1.0)*r12*x959))+((sj5*x950))+x956+(((-1.0)*x960)));
evalcond[5]=((((-1.0)*x957))+((x943*x953))+(((-1.0)*x941*x954))+((r01*x945))+(((-1.0)*x943*x955))+(((-1.0)*r02*x959))+((sj5*x946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x961=(cj2*cj6);
IkReal x962=((1.0)*r00);
IkReal x963=(sj2*sj6);
IkReal x964=(cj6*sj2);
IkReal x965=(cj2*sj6*sj7);
IkReal x966=(cj2*cj7*sj6);
if( IKabs((((r01*sj7*x963))+(((-1.0)*r11*x965))+(((-1.0)*cj7*x962*x963))+(((-1.0)*r12*x961))+((r02*x964))+((r10*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x962*x966))+(((-1.0)*cj7*r10*x963))+((r01*x965))+((r11*sj7*x963))+((r02*x961))+((r12*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj7*x963))+(((-1.0)*r11*x965))+(((-1.0)*cj7*x962*x963))+(((-1.0)*r12*x961))+((r02*x964))+((r10*x966))))+IKsqr(((((-1.0)*x962*x966))+(((-1.0)*cj7*r10*x963))+((r01*x965))+((r11*sj7*x963))+((r02*x961))+((r12*x964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj7*x963))+(((-1.0)*r11*x965))+(((-1.0)*cj7*x962*x963))+(((-1.0)*r12*x961))+((r02*x964))+((r10*x966))), ((((-1.0)*x962*x966))+(((-1.0)*cj7*r10*x963))+((r01*x965))+((r11*sj7*x963))+((r02*x961))+((r12*x964))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x967=IKcos(j4);
IkReal x968=IKsin(j4);
IkReal x969=(cj5*cj6);
IkReal x970=((1.0)*cj7);
IkReal x971=(r11*sj7);
IkReal x972=((0.4)*cj2);
IkReal x973=(cj7*sj5);
IkReal x974=((0.4)*sj2);
IkReal x975=((1.0)*r12);
IkReal x976=(sj5*sj7);
IkReal x977=(cj5*sj6);
IkReal x978=((1.0)*r02);
IkReal x979=((0.1363)*cj7);
IkReal x980=((1.0)*sj6);
IkReal x981=((1.0)*cj2);
IkReal x982=((0.1363)*sj7);
IkReal x983=(r01*sj7);
IkReal x984=(cj7*sj6);
IkReal x985=(sj2*x967);
IkReal x986=(sj2*x968);
IkReal x987=(x968*x981);
evalcond[0]=((((-1.0)*cj6*x978))+((r00*x984))+((cj2*x967))+(((-1.0)*x980*x983))+x986);
evalcond[1]=((((-1.0)*x987))+(((-1.0)*cj6*x975))+(((-1.0)*x971*x980))+((r10*x984))+x985);
evalcond[2]=(((r00*x982))+((r01*x979))+((x968*x974))+(((-1.0)*px))+((x967*x972))+x972);
evalcond[3]=((((-1.0)*py))+((r10*x982))+((x967*x974))+((r11*x979))+x974+(((-1.0)*x968*x972)));
evalcond[4]=((((-1.0)*x987))+((r01*x973))+((r00*x976))+(((-1.0)*r00*x969*x970))+(((-1.0)*x977*x978))+x985+((x969*x983)));
evalcond[5]=(((x969*x971))+(((-1.0)*x986))+(((-1.0)*x967*x981))+(((-1.0)*r10*x969*x970))+((r10*x976))+((r11*x973))+(((-1.0)*x975*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x988=(sj6*sj7);
IkReal x989=((1.0)*cj7*sj6);
if( IKabs(((((-1.0)*r20*x989))+((r21*x988))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x989))+((r01*x988))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x989))+((r21*x988))+((cj6*r22))))+IKsqr(((((-1.0)*r00*x989))+((r01*x988))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*x989))+((r21*x988))+((cj6*r22))), ((((-1.0)*r00*x989))+((r01*x988))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x990=IKsin(j4);
IkReal x991=IKcos(j4);
IkReal x992=(r21*sj7);
IkReal x993=((1.0)*sj6);
IkReal x994=(r20*sj7);
IkReal x995=(cj5*cj6);
IkReal x996=((1.0)*cj7);
IkReal x997=(cj7*r01);
IkReal x998=(r00*sj7);
IkReal x999=((1.0)*cj6);
IkReal x1000=(r01*sj7);
IkReal x1001=(cj7*r21);
IkReal x1002=(cj7*sj6);
evalcond[0]=((((-1.0)*r22*x999))+(((-1.0)*x992*x993))+((r20*x1002))+x990);
evalcond[1]=((((-1.0)*r02*x999))+(((-1.0)*x1000*x993))+x991+((r00*x1002)));
evalcond[2]=((0.1425)+(((0.1363)*x1001))+(((0.4)*x990))+(((-1.0)*pz))+(((0.1363)*x994)));
evalcond[3]=((0.4)+(((0.4)*x991))+(((-1.0)*px))+(((0.1363)*x997))+(((0.1363)*x998)));
evalcond[4]=((((-1.0)*r20*x995*x996))+((x992*x995))+((sj5*x994))+(((-1.0)*cj5*r22*x993))+((sj5*x1001))+x991);
evalcond[5]=(((x1000*x995))+(((-1.0)*x990))+(((-1.0)*r00*x995*x996))+(((-1.0)*cj5*r02*x993))+((sj5*x997))+((sj5*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1003=IKcos(j4);
IkReal x1004=IKsin(j4);
IkReal x1005=(r21*sj7);
IkReal x1006=((1.0)*sj6);
IkReal x1007=(r20*sj7);
IkReal x1008=(cj5*cj6);
IkReal x1009=((1.0)*cj7);
IkReal x1010=(cj7*r01);
IkReal x1011=(r00*sj7);
IkReal x1012=((1.0)*cj6);
IkReal x1013=(r01*sj7);
IkReal x1014=(cj7*r21);
IkReal x1015=(cj7*sj6);
IkReal x1016=((1.0)*x1004);
evalcond[0]=(x1003+(((-1.0)*r02*x1012))+(((-1.0)*x1006*x1013))+((r00*x1015)));
evalcond[1]=((0.1425)+(((0.1363)*x1007))+(((0.1363)*x1014))+(((-0.4)*x1004))+(((-1.0)*pz)));
evalcond[2]=((0.4)+(((0.4)*x1003))+(((0.1363)*x1011))+(((0.1363)*x1010))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r22*x1012))+(((-1.0)*x1016))+(((-1.0)*x1005*x1006))+((r20*x1015)));
evalcond[4]=((((-1.0)*x1003))+((sj5*x1014))+((sj5*x1007))+(((-1.0)*r20*x1008*x1009))+((x1005*x1008))+(((-1.0)*cj5*r22*x1006)));
evalcond[5]=((((-1.0)*cj5*r02*x1006))+(((-1.0)*x1016))+((sj5*x1011))+((sj5*x1010))+(((-1.0)*r00*x1008*x1009))+((x1008*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1017=IKsin(j4);
IkReal x1018=IKcos(j4);
IkReal x1019=((1.0)*cj6);
IkReal x1020=(cj5*cj7);
IkReal x1021=(cj7*sj5);
IkReal x1022=(r11*sj7);
IkReal x1023=(cj5*cj6);
IkReal x1024=(sj5*sj7);
IkReal x1025=((1.0)*sj6);
IkReal x1026=((0.1363)*cj7);
IkReal x1027=((0.1363)*sj7);
IkReal x1028=(r01*sj7);
IkReal x1029=(cj7*sj6);
IkReal x1030=(cj5*x1025);
evalcond[0]=(x1017+(((-1.0)*x1022*x1025))+(((-1.0)*r12*x1019))+((r10*x1029)));
evalcond[1]=(x1018+(((-1.0)*r02*x1019))+(((-1.0)*x1025*x1028))+((r00*x1029)));
evalcond[2]=((((0.4)*x1017))+(((-1.0)*py))+((r11*x1026))+((r10*x1027)));
evalcond[3]=((0.4)+((r01*x1026))+(((0.4)*x1018))+(((-1.0)*px))+((r00*x1027)));
evalcond[4]=(x1018+((r11*x1021))+((x1022*x1023))+(((-1.0)*r12*x1030))+(((-1.0)*r10*x1019*x1020))+((r10*x1024)));
evalcond[5]=((((-1.0)*r00*x1019*x1020))+((r01*x1021))+((x1023*x1028))+(((-1.0)*r02*x1030))+(((-1.0)*x1017))+((r00*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1031=IKcos(j4);
IkReal x1032=IKsin(j4);
IkReal x1033=((1.0)*cj6);
IkReal x1034=(cj5*cj7);
IkReal x1035=(cj7*sj5);
IkReal x1036=(sj5*sj7);
IkReal x1037=(r11*sj7);
IkReal x1038=(cj5*cj6);
IkReal x1039=((0.1363)*cj7);
IkReal x1040=((1.0)*sj6);
IkReal x1041=((0.1363)*sj7);
IkReal x1042=(r01*sj7);
IkReal x1043=(cj7*sj6);
IkReal x1044=((1.0)*x1032);
IkReal x1045=(cj5*x1040);
evalcond[0]=(x1031+(((-1.0)*r02*x1033))+((r00*x1043))+(((-1.0)*x1040*x1042)));
evalcond[1]=((((-0.4)*x1032))+(((-1.0)*py))+((r10*x1041))+((r11*x1039)));
evalcond[2]=((0.4)+(((0.4)*x1031))+(((-1.0)*px))+((r00*x1041))+((r01*x1039)));
evalcond[3]=((((-1.0)*x1037*x1040))+((r10*x1043))+(((-1.0)*r12*x1033))+(((-1.0)*x1044)));
evalcond[4]=(((r10*x1036))+(((-1.0)*x1031))+(((-1.0)*r12*x1045))+((r11*x1035))+((x1037*x1038))+(((-1.0)*r10*x1033*x1034)));
evalcond[5]=((((-1.0)*r02*x1045))+((r00*x1036))+((x1038*x1042))+(((-1.0)*r00*x1033*x1034))+(((-1.0)*x1044))+((r01*x1035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1046=(sj6*sj7);
IkReal x1047=((1.0)*cj7*sj6);
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(cj3,-1);
if(!x1048.valid){
continue;
}
if( IKabs(((x1048.value)*(((((-1.0)*r10*x1047))+((r11*x1046))+((cj6*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1047))+((r01*x1046))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1048.value)*(((((-1.0)*r10*x1047))+((r11*x1046))+((cj6*r12))))))+IKsqr(((((-1.0)*r00*x1047))+((r01*x1046))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1048.value)*(((((-1.0)*r10*x1047))+((r11*x1046))+((cj6*r12))))), ((((-1.0)*r00*x1047))+((r01*x1046))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1049=IKcos(j4);
IkReal x1050=IKsin(j4);
IkReal x1051=(r21*sj7);
IkReal x1052=((1.0)*sj6);
IkReal x1053=(r20*sj7);
IkReal x1054=(cj5*cj6);
IkReal x1055=(cj7*sj5);
IkReal x1056=(sj5*sj7);
IkReal x1057=((1.0)*cj6);
IkReal x1058=(r11*sj7);
IkReal x1059=((0.1363)*cj7);
IkReal x1060=((0.1363)*sj7);
IkReal x1061=(r01*sj7);
IkReal x1062=(cj7*sj6);
IkReal x1063=((0.4)*x1050);
IkReal x1064=((1.0)*cj7*x1054);
evalcond[0]=((((-1.0)*r02*x1057))+x1049+((r00*x1062))+(((-1.0)*x1052*x1061)));
evalcond[1]=((0.4)+(((0.4)*x1049))+(((-1.0)*px))+((r01*x1059))+((r00*x1060)));
evalcond[2]=(((r20*x1062))+((sj3*x1050))+(((-1.0)*r22*x1057))+(((-1.0)*x1051*x1052)));
evalcond[3]=((((-1.0)*x1052*x1058))+(((-1.0)*r12*x1057))+((cj3*x1050))+((r10*x1062)));
evalcond[4]=((((0.1685)*sj3))+((r11*x1059))+((cj3*x1063))+(((-1.0)*py))+((r10*x1060)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1063))+(((0.1363)*x1053))+(((-1.0)*pz))+((r21*x1059)));
evalcond[6]=((((-1.0)*r20*x1064))+((sj5*x1053))+((sj3*x1049))+((x1051*x1054))+((r21*x1055))+(((-1.0)*cj5*r22*x1052)));
evalcond[7]=(((r11*x1055))+((x1054*x1058))+(((-1.0)*r10*x1064))+((cj3*x1049))+((r10*x1056))+(((-1.0)*cj5*r12*x1052)));
evalcond[8]=((((-1.0)*r00*x1064))+((x1054*x1061))+((r00*x1056))+(((-1.0)*cj5*r02*x1052))+(((-1.0)*x1050))+((r01*x1055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1065=(sj6*sj7);
IkReal x1066=((1.0)*cj7*sj6);
CheckValue<IkReal> x1067=IKPowWithIntegerCheck(sj3,-1);
if(!x1067.valid){
continue;
}
if( IKabs(((x1067.value)*(((((-1.0)*r20*x1066))+((cj6*r22))+((r21*x1065)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1066))+((cj6*r02))+((r01*x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1067.value)*(((((-1.0)*r20*x1066))+((cj6*r22))+((r21*x1065))))))+IKsqr(((((-1.0)*r00*x1066))+((cj6*r02))+((r01*x1065))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1067.value)*(((((-1.0)*r20*x1066))+((cj6*r22))+((r21*x1065))))), ((((-1.0)*r00*x1066))+((cj6*r02))+((r01*x1065))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1068=IKcos(j4);
IkReal x1069=IKsin(j4);
IkReal x1070=(r21*sj7);
IkReal x1071=((1.0)*sj6);
IkReal x1072=(r20*sj7);
IkReal x1073=(cj5*cj6);
IkReal x1074=(cj7*sj5);
IkReal x1075=(sj5*sj7);
IkReal x1076=((1.0)*cj6);
IkReal x1077=(r11*sj7);
IkReal x1078=((0.1363)*cj7);
IkReal x1079=((0.1363)*sj7);
IkReal x1080=(r01*sj7);
IkReal x1081=(cj7*sj6);
IkReal x1082=((0.4)*x1069);
IkReal x1083=((1.0)*cj7*x1073);
evalcond[0]=(x1068+(((-1.0)*r02*x1076))+((r00*x1081))+(((-1.0)*x1071*x1080)));
evalcond[1]=((0.4)+(((0.4)*x1068))+(((-1.0)*px))+((r00*x1079))+((r01*x1078)));
evalcond[2]=((((-1.0)*x1070*x1071))+((sj3*x1069))+(((-1.0)*r22*x1076))+((r20*x1081)));
evalcond[3]=((((-1.0)*r12*x1076))+(((-1.0)*x1071*x1077))+((r10*x1081))+((cj3*x1069)));
evalcond[4]=((((0.1685)*sj3))+(((-1.0)*py))+((r10*x1079))+((cj3*x1082))+((r11*x1078)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1082))+(((0.1363)*x1072))+(((-1.0)*pz))+((r21*x1078)));
evalcond[6]=(((x1070*x1073))+((sj3*x1068))+((sj5*x1072))+(((-1.0)*cj5*r22*x1071))+((r21*x1074))+(((-1.0)*r20*x1083)));
evalcond[7]=((((-1.0)*r10*x1083))+((cj3*x1068))+((x1073*x1077))+((r10*x1075))+(((-1.0)*cj5*r12*x1071))+((r11*x1074)));
evalcond[8]=(((x1073*x1080))+(((-1.0)*r00*x1083))+((r00*x1075))+(((-1.0)*cj5*r02*x1071))+((r01*x1074))+(((-1.0)*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1084=IKsin(j4);
IkReal x1085=IKcos(j4);
IkReal x1086=(r21*sj7);
IkReal x1087=((1.0)*sj6);
IkReal x1088=(r20*sj7);
IkReal x1089=(cj5*cj6);
IkReal x1090=((1.0)*cj7);
IkReal x1091=(cj7*r01);
IkReal x1092=(r00*sj7);
IkReal x1093=((1.0)*cj6);
IkReal x1094=(r01*sj7);
IkReal x1095=(cj7*r21);
IkReal x1096=(cj7*sj6);
evalcond[0]=(x1084+((r20*x1096))+(((-1.0)*x1086*x1087))+(((-1.0)*r22*x1093)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x1088))+(((0.4)*x1084))+(((0.1363)*x1095)));
evalcond[2]=((-0.4)+(((-0.4)*x1085))+(((-1.0)*px))+(((0.1363)*x1092))+(((0.1363)*x1091)));
evalcond[3]=(((r00*x1096))+(((-1.0)*r02*x1093))+(((-1.0)*x1085))+(((-1.0)*x1087*x1094)));
evalcond[4]=(((sj5*x1088))+x1085+(((-1.0)*r20*x1089*x1090))+((x1086*x1089))+((sj5*x1095))+(((-1.0)*cj5*r22*x1087)));
evalcond[5]=(x1084+((x1089*x1094))+(((-1.0)*cj5*r02*x1087))+(((-1.0)*r00*x1089*x1090))+((sj5*x1092))+((sj5*x1091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1097=((0.34075)*cj7);
IkReal x1098=((0.34075)*sj7);
if( IKabs(((0.35625)+(((-2.5)*pz))+((r21*x1097))+((r20*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r01*x1097))+((r00*x1098))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((-2.5)*pz))+((r21*x1097))+((r20*x1098))))+IKsqr(((-1.0)+((r01*x1097))+((r00*x1098))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((-2.5)*pz))+((r21*x1097))+((r20*x1098))), ((-1.0)+((r01*x1097))+((r00*x1098))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1099=IKsin(j4);
IkReal x1100=IKcos(j4);
IkReal x1101=(r21*sj7);
IkReal x1102=((1.0)*sj6);
IkReal x1103=(r20*sj7);
IkReal x1104=(cj5*cj6);
IkReal x1105=(cj7*r20);
IkReal x1106=(cj7*r01);
IkReal x1107=((1.0)*cj6);
IkReal x1108=(r00*sj7);
IkReal x1109=(r01*sj7);
IkReal x1110=(cj7*r21);
IkReal x1111=(cj7*r00);
IkReal x1112=((1.0)*x1100);
evalcond[0]=((0.1425)+(((-0.4)*x1099))+(((-1.0)*pz))+(((0.1363)*x1103))+(((0.1363)*x1110)));
evalcond[1]=((-0.4)+(((-0.4)*x1100))+(((-1.0)*px))+(((0.1363)*x1108))+(((0.1363)*x1106)));
evalcond[2]=((((-1.0)*r22*x1107))+(((-1.0)*x1099))+((sj6*x1105))+(((-1.0)*x1101*x1102)));
evalcond[3]=(((sj6*x1111))+(((-1.0)*r02*x1107))+(((-1.0)*x1112))+(((-1.0)*x1102*x1109)));
evalcond[4]=(x1099+(((-1.0)*x1104*x1111))+(((-1.0)*cj5*r02*x1102))+((x1104*x1109))+((sj5*x1108))+((sj5*x1106)));
evalcond[5]=((((-1.0)*x1104*x1105))+((x1101*x1104))+(((-1.0)*cj5*r22*x1102))+(((-1.0)*x1112))+((sj5*x1110))+((sj5*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1113=((0.34075)*sj7);
IkReal x1114=((0.34075)*cj7);
if( IKabs(((((-2.5)*py))+((r11*x1114))+((r10*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*px))+((r01*x1114))+((r00*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.5)*py))+((r11*x1114))+((r10*x1113))))+IKsqr(((-1.0)+(((-2.5)*px))+((r01*x1114))+((r00*x1113))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.5)*py))+((r11*x1114))+((r10*x1113))), ((-1.0)+(((-2.5)*px))+((r01*x1114))+((r00*x1113))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1115=IKsin(j4);
IkReal x1116=IKcos(j4);
IkReal x1117=(cj5*cj6);
IkReal x1118=((1.0)*cj7);
IkReal x1119=(r11*sj7);
IkReal x1120=(cj7*sj5);
IkReal x1121=((1.0)*r12);
IkReal x1122=((0.1363)*cj7);
IkReal x1123=(cj5*sj6);
IkReal x1124=((1.0)*r02);
IkReal x1125=(sj5*sj7);
IkReal x1126=((1.0)*sj6);
IkReal x1127=((0.1363)*sj7);
IkReal x1128=(r01*sj7);
IkReal x1129=(cj7*sj6);
IkReal x1130=((1.0)*x1116);
evalcond[0]=(((r10*x1127))+(((-0.4)*x1115))+(((-1.0)*py))+((r11*x1122)));
evalcond[1]=((-0.4)+((r00*x1127))+((r01*x1122))+(((-0.4)*x1116))+(((-1.0)*px)));
evalcond[2]=(((r10*x1129))+(((-1.0)*x1115))+(((-1.0)*cj6*x1121))+(((-1.0)*x1119*x1126)));
evalcond[3]=(((r00*x1129))+(((-1.0)*x1126*x1128))+(((-1.0)*cj6*x1124))+(((-1.0)*x1130)));
evalcond[4]=(x1115+((r00*x1125))+((r01*x1120))+(((-1.0)*x1123*x1124))+(((-1.0)*r00*x1117*x1118))+((x1117*x1128)));
evalcond[5]=(((r10*x1125))+(((-1.0)*x1121*x1123))+(((-1.0)*x1130))+((x1117*x1119))+(((-1.0)*r10*x1117*x1118))+((r11*x1120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1131=((0.34075)*cj7);
IkReal x1132=((0.34075)*sj7);
if( IKabs(((((-1.0)*r11*x1131))+(((-1.0)*r10*x1132))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r01*x1131))+((r00*x1132))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1131))+(((-1.0)*r10*x1132))+(((2.5)*py))))+IKsqr(((-1.0)+((r01*x1131))+((r00*x1132))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x1131))+(((-1.0)*r10*x1132))+(((2.5)*py))), ((-1.0)+((r01*x1131))+((r00*x1132))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1133=IKsin(j4);
IkReal x1134=IKcos(j4);
IkReal x1135=((1.0)*cj6);
IkReal x1136=(cj5*cj7);
IkReal x1137=(cj7*sj5);
IkReal x1138=(r11*sj7);
IkReal x1139=(cj5*cj6);
IkReal x1140=(sj5*sj7);
IkReal x1141=((0.1363)*sj7);
IkReal x1142=((0.1363)*cj7);
IkReal x1143=((1.0)*sj6);
IkReal x1144=(r01*sj7);
IkReal x1145=(cj7*sj6);
IkReal x1146=(cj5*x1143);
evalcond[0]=(x1133+(((-1.0)*r12*x1135))+((r10*x1145))+(((-1.0)*x1138*x1143)));
evalcond[1]=(((r11*x1142))+(((-1.0)*py))+(((0.4)*x1133))+((r10*x1141)));
evalcond[2]=((-0.4)+(((-0.4)*x1134))+(((-1.0)*px))+((r01*x1142))+((r00*x1141)));
evalcond[3]=((((-1.0)*x1143*x1144))+(((-1.0)*r02*x1135))+(((-1.0)*x1134))+((r00*x1145)));
evalcond[4]=(x1134+(((-1.0)*r10*x1135*x1136))+((x1138*x1139))+(((-1.0)*r12*x1146))+((r10*x1140))+((r11*x1137)));
evalcond[5]=(x1133+(((-1.0)*r00*x1135*x1136))+((r01*x1137))+(((-1.0)*r02*x1146))+((x1139*x1144))+((r00*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(cj3,-1);
if(!x1147.valid){
continue;
}
if( IKabs(((x1147.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1147.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1147.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1148=IKcos(j4);
IkReal x1149=IKsin(j4);
IkReal x1150=(r21*sj7);
IkReal x1151=((1.0)*sj6);
IkReal x1152=(r20*sj7);
IkReal x1153=(cj5*cj6);
IkReal x1154=((1.0)*cj3);
IkReal x1155=(cj7*r01);
IkReal x1156=((1.0)*cj6);
IkReal x1157=(sj5*sj7);
IkReal x1158=((0.1363)*cj7);
IkReal x1159=(r11*sj7);
IkReal x1160=((0.1363)*sj7);
IkReal x1161=(r01*sj7);
IkReal x1162=(cj7*sj5);
IkReal x1163=(cj7*sj6);
IkReal x1164=((0.4)*x1149);
IkReal x1165=((1.0)*cj7*x1153);
evalcond[0]=((-0.4)+((r00*x1160))+(((-1.0)*px))+(((-0.4)*x1148))+(((0.1363)*x1155)));
evalcond[1]=(((r20*x1163))+((sj3*x1149))+(((-1.0)*r22*x1156))+(((-1.0)*x1150*x1151)));
evalcond[2]=(((r00*x1163))+(((-1.0)*x1148))+(((-1.0)*x1151*x1161))+(((-1.0)*r02*x1156)));
evalcond[3]=((((-1.0)*x1149*x1154))+((r10*x1163))+(((-1.0)*r12*x1156))+(((-1.0)*x1151*x1159)));
evalcond[4]=(((r11*x1158))+(((-0.1685)*sj3))+((r10*x1160))+(((-1.0)*cj3*x1164))+(((-1.0)*py)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((-1.0)*pz))+((r21*x1158))+(((0.1363)*x1152))+((sj3*x1164)));
evalcond[6]=(((r00*x1157))+x1149+((x1153*x1161))+(((-1.0)*cj5*r02*x1151))+((sj5*x1155))+(((-1.0)*r00*x1165)));
evalcond[7]=((((-1.0)*r20*x1165))+(((-1.0)*cj5*r22*x1151))+((r21*x1162))+((sj5*x1152))+((sj3*x1148))+((x1150*x1153)));
evalcond[8]=((((-1.0)*r10*x1165))+(((-1.0)*cj5*r12*x1151))+((x1153*x1159))+((r11*x1162))+(((-1.0)*x1148*x1154))+((r10*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(sj3,-1);
if(!x1166.valid){
continue;
}
if( IKabs(((x1166.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1166.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1166.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1167=IKcos(j4);
IkReal x1168=IKsin(j4);
IkReal x1169=(r21*sj7);
IkReal x1170=((1.0)*sj6);
IkReal x1171=(r20*sj7);
IkReal x1172=(cj5*cj6);
IkReal x1173=((1.0)*cj3);
IkReal x1174=(cj7*r01);
IkReal x1175=((1.0)*cj6);
IkReal x1176=(sj5*sj7);
IkReal x1177=((0.1363)*cj7);
IkReal x1178=(r11*sj7);
IkReal x1179=((0.1363)*sj7);
IkReal x1180=(r01*sj7);
IkReal x1181=(cj7*sj5);
IkReal x1182=(cj7*sj6);
IkReal x1183=((0.4)*x1168);
IkReal x1184=((1.0)*cj7*x1172);
evalcond[0]=((-0.4)+(((-0.4)*x1167))+((r00*x1179))+(((-1.0)*px))+(((0.1363)*x1174)));
evalcond[1]=((((-1.0)*r22*x1175))+(((-1.0)*x1169*x1170))+((r20*x1182))+((sj3*x1168)));
evalcond[2]=((((-1.0)*r02*x1175))+((r00*x1182))+(((-1.0)*x1170*x1180))+(((-1.0)*x1167)));
evalcond[3]=((((-1.0)*x1168*x1173))+((r10*x1182))+(((-1.0)*r12*x1175))+(((-1.0)*x1170*x1178)));
evalcond[4]=((((-0.1685)*sj3))+((r10*x1179))+(((-1.0)*cj3*x1183))+(((-1.0)*py))+((r11*x1177)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1177))+(((-1.0)*pz))+((sj3*x1183))+(((0.1363)*x1171)));
evalcond[6]=(x1168+((r00*x1176))+((x1172*x1180))+(((-1.0)*cj5*r02*x1170))+((sj5*x1174))+(((-1.0)*r00*x1184)));
evalcond[7]=(((r21*x1181))+((sj5*x1171))+(((-1.0)*r20*x1184))+(((-1.0)*cj5*r22*x1170))+((x1169*x1172))+((sj3*x1167)));
evalcond[8]=(((r10*x1176))+(((-1.0)*r10*x1184))+((x1172*x1178))+(((-1.0)*x1167*x1173))+(((-1.0)*cj5*r12*x1170))+((r11*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1185=(sj6*sj7);
IkReal x1186=((1.0)*cj7*sj6);
if( IKabs((((r21*x1185))+((cj6*r22))+(((-1.0)*r20*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1186))+((cj6*r12))+((r11*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1185))+((cj6*r22))+(((-1.0)*r20*x1186))))+IKsqr(((((-1.0)*r10*x1186))+((cj6*r12))+((r11*x1185))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*x1185))+((cj6*r22))+(((-1.0)*r20*x1186))), ((((-1.0)*r10*x1186))+((cj6*r12))+((r11*x1185))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1187=IKsin(j4);
IkReal x1188=IKcos(j4);
IkReal x1189=(r21*sj7);
IkReal x1190=((1.0)*sj6);
IkReal x1191=(r20*sj7);
IkReal x1192=(cj5*cj6);
IkReal x1193=(cj7*r11);
IkReal x1194=((1.0)*cj6);
IkReal x1195=(r11*sj7);
IkReal x1196=(r10*sj7);
IkReal x1197=(cj7*sj6);
IkReal x1198=(cj7*r21);
IkReal x1199=((1.0)*cj7*x1192);
evalcond[0]=(x1187+(((-1.0)*x1189*x1190))+(((-1.0)*r22*x1194))+((r20*x1197)));
evalcond[1]=(x1188+(((-1.0)*x1190*x1195))+((r10*x1197))+(((-1.0)*r12*x1194)));
evalcond[2]=((0.1425)+(((-1.0)*pz))+(((0.4)*x1187))+(((0.1363)*x1198))+(((0.1363)*x1191)));
evalcond[3]=((0.4)+(((-1.0)*py))+(((0.4)*x1188))+(((0.1363)*x1193))+(((0.1363)*x1196)));
evalcond[4]=(x1188+((x1189*x1192))+(((-1.0)*cj5*r22*x1190))+((sj5*x1198))+((sj5*x1191))+(((-1.0)*r20*x1199)));
evalcond[5]=((((-1.0)*r10*x1199))+((x1192*x1195))+((sj5*x1193))+((sj5*x1196))+(((-1.0)*x1187))+(((-1.0)*cj5*r12*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1200=IKcos(j4);
IkReal x1201=IKsin(j4);
IkReal x1202=(r21*sj7);
IkReal x1203=((1.0)*sj6);
IkReal x1204=(r20*sj7);
IkReal x1205=(cj5*cj6);
IkReal x1206=(cj7*r11);
IkReal x1207=((1.0)*cj6);
IkReal x1208=(r11*sj7);
IkReal x1209=(r10*sj7);
IkReal x1210=(cj7*r21);
IkReal x1211=(cj7*sj6);
IkReal x1212=((1.0)*x1201);
IkReal x1213=((1.0)*cj7*x1205);
evalcond[0]=(x1200+((r10*x1211))+(((-1.0)*x1203*x1208))+(((-1.0)*r12*x1207)));
evalcond[1]=((0.1425)+(((0.1363)*x1210))+(((-0.4)*x1201))+(((-1.0)*pz))+(((0.1363)*x1204)));
evalcond[2]=((0.4)+(((0.4)*x1200))+(((-1.0)*py))+(((0.1363)*x1209))+(((0.1363)*x1206)));
evalcond[3]=((((-1.0)*r22*x1207))+(((-1.0)*x1202*x1203))+((r20*x1211))+(((-1.0)*x1212)));
evalcond[4]=((((-1.0)*cj5*r22*x1203))+((x1202*x1205))+((sj5*x1210))+(((-1.0)*x1200))+(((-1.0)*r20*x1213))+((sj5*x1204)));
evalcond[5]=((((-1.0)*cj5*r12*x1203))+(((-1.0)*r10*x1213))+((x1205*x1208))+((sj5*x1209))+((sj5*x1206))+(((-1.0)*x1212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1214=IKcos(j4);
IkReal x1215=IKsin(j4);
IkReal x1216=((1.0)*cj6);
IkReal x1217=(cj5*cj7);
IkReal x1218=(cj7*sj5);
IkReal x1219=(r11*sj7);
IkReal x1220=(cj5*cj6);
IkReal x1221=(sj5*sj7);
IkReal x1222=((1.0)*sj6);
IkReal x1223=((0.1363)*cj7);
IkReal x1224=((0.1363)*sj7);
IkReal x1225=(r01*sj7);
IkReal x1226=(cj7*sj6);
IkReal x1227=((1.0)*x1215);
IkReal x1228=(cj5*x1222);
evalcond[0]=(x1214+((r10*x1226))+(((-1.0)*r12*x1216))+(((-1.0)*x1219*x1222)));
evalcond[1]=(((r01*x1223))+((r00*x1224))+(((-0.4)*x1215))+(((-1.0)*px)));
evalcond[2]=((0.4)+(((-1.0)*py))+((r10*x1224))+((r11*x1223))+(((0.4)*x1214)));
evalcond[3]=((((-1.0)*r02*x1216))+(((-1.0)*x1227))+((r00*x1226))+(((-1.0)*x1222*x1225)));
evalcond[4]=(((r11*x1218))+(((-1.0)*x1227))+((x1219*x1220))+(((-1.0)*r12*x1228))+((r10*x1221))+(((-1.0)*r10*x1216*x1217)));
evalcond[5]=(((r00*x1221))+((r01*x1218))+((x1220*x1225))+(((-1.0)*r02*x1228))+(((-1.0)*r00*x1216*x1217))+(((-1.0)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1229=IKsin(j4);
IkReal x1230=IKcos(j4);
IkReal x1231=((1.0)*cj6);
IkReal x1232=(cj5*cj7);
IkReal x1233=(cj7*sj5);
IkReal x1234=(r11*sj7);
IkReal x1235=(cj5*cj6);
IkReal x1236=(sj5*sj7);
IkReal x1237=((1.0)*sj6);
IkReal x1238=((0.1363)*cj7);
IkReal x1239=((0.1363)*sj7);
IkReal x1240=(r01*sj7);
IkReal x1241=(cj7*sj6);
IkReal x1242=(cj5*x1237);
evalcond[0]=(x1230+(((-1.0)*r12*x1231))+(((-1.0)*x1234*x1237))+((r10*x1241)));
evalcond[1]=(x1229+((r00*x1241))+(((-1.0)*x1237*x1240))+(((-1.0)*r02*x1231)));
evalcond[2]=(((r00*x1239))+((r01*x1238))+(((-1.0)*px))+(((0.4)*x1229)));
evalcond[3]=((0.4)+((r10*x1239))+(((-1.0)*py))+(((0.4)*x1230))+((r11*x1238)));
evalcond[4]=((((-1.0)*r02*x1242))+x1230+((r00*x1236))+((r01*x1233))+(((-1.0)*r00*x1231*x1232))+((x1235*x1240)));
evalcond[5]=((((-1.0)*r10*x1231*x1232))+((x1234*x1235))+(((-1.0)*x1229))+((r10*x1236))+(((-1.0)*r12*x1242))+((r11*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1243=(sj6*sj7);
IkReal x1244=(cj7*sj6);
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(cj3,-1);
if(!x1245.valid){
continue;
}
if( IKabs(((x1245.value)*((((r00*x1244))+(((-1.0)*cj6*r02))+(((-1.0)*r01*x1243)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1244))+((cj6*r12))+((r11*x1243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1245.value)*((((r00*x1244))+(((-1.0)*cj6*r02))+(((-1.0)*r01*x1243))))))+IKsqr(((((-1.0)*r10*x1244))+((cj6*r12))+((r11*x1243))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1245.value)*((((r00*x1244))+(((-1.0)*cj6*r02))+(((-1.0)*r01*x1243))))), ((((-1.0)*r10*x1244))+((cj6*r12))+((r11*x1243))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1246=IKcos(j4);
IkReal x1247=IKsin(j4);
IkReal x1248=(r21*sj7);
IkReal x1249=((1.0)*sj6);
IkReal x1250=(r20*sj7);
IkReal x1251=(cj5*cj6);
IkReal x1252=((1.0)*cj3);
IkReal x1253=(cj7*r01);
IkReal x1254=(sj5*sj7);
IkReal x1255=((1.0)*cj6);
IkReal x1256=(r11*sj7);
IkReal x1257=((0.1363)*cj7);
IkReal x1258=((0.1363)*sj7);
IkReal x1259=(r01*sj7);
IkReal x1260=(cj7*sj5);
IkReal x1261=(cj7*sj6);
IkReal x1262=((0.4)*x1247);
IkReal x1263=((1.0)*cj7*x1251);
evalcond[0]=((((-1.0)*x1249*x1256))+(((-1.0)*r12*x1255))+x1246+((r10*x1261)));
evalcond[1]=((0.4)+((r11*x1257))+((r10*x1258))+(((0.4)*x1246))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*r22*x1255))+((sj3*x1247))+((r20*x1261))+(((-1.0)*x1248*x1249)));
evalcond[3]=((((-1.0)*x1249*x1259))+(((-1.0)*x1247*x1252))+(((-1.0)*r02*x1255))+((r00*x1261)));
evalcond[4]=((((-0.1685)*sj3))+(((-1.0)*cj3*x1262))+(((-1.0)*px))+(((0.1363)*x1253))+((r00*x1258)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1257))+(((-1.0)*pz))+(((0.1363)*x1250))+((sj3*x1262)));
evalcond[6]=(((sj5*x1250))+((r21*x1260))+((sj3*x1246))+((x1248*x1251))+(((-1.0)*cj5*r22*x1249))+(((-1.0)*r20*x1263)));
evalcond[7]=((((-1.0)*r10*x1263))+((r11*x1260))+((r10*x1254))+(((-1.0)*x1247))+(((-1.0)*cj5*r12*x1249))+((x1251*x1256)));
evalcond[8]=(((sj5*x1253))+(((-1.0)*r00*x1263))+(((-1.0)*cj5*r02*x1249))+(((-1.0)*x1246*x1252))+((x1251*x1259))+((r00*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1264=(sj6*sj7);
IkReal x1265=((1.0)*cj7*sj6);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(sj3,-1);
if(!x1266.valid){
continue;
}
if( IKabs(((x1266.value)*((((r21*x1264))+((cj6*r22))+(((-1.0)*r20*x1265)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1265))+((r11*x1264))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1266.value)*((((r21*x1264))+((cj6*r22))+(((-1.0)*r20*x1265))))))+IKsqr(((((-1.0)*r10*x1265))+((r11*x1264))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1266.value)*((((r21*x1264))+((cj6*r22))+(((-1.0)*r20*x1265))))), ((((-1.0)*r10*x1265))+((r11*x1264))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1267=IKcos(j4);
IkReal x1268=IKsin(j4);
IkReal x1269=(r21*sj7);
IkReal x1270=((1.0)*sj6);
IkReal x1271=(r20*sj7);
IkReal x1272=(cj5*cj6);
IkReal x1273=((1.0)*cj3);
IkReal x1274=(cj7*r01);
IkReal x1275=(sj5*sj7);
IkReal x1276=((1.0)*cj6);
IkReal x1277=(r11*sj7);
IkReal x1278=((0.1363)*cj7);
IkReal x1279=((0.1363)*sj7);
IkReal x1280=(r01*sj7);
IkReal x1281=(cj7*sj5);
IkReal x1282=(cj7*sj6);
IkReal x1283=((0.4)*x1268);
IkReal x1284=((1.0)*cj7*x1272);
evalcond[0]=(x1267+(((-1.0)*r12*x1276))+(((-1.0)*x1270*x1277))+((r10*x1282)));
evalcond[1]=((0.4)+((r10*x1279))+((r11*x1278))+(((-1.0)*py))+(((0.4)*x1267)));
evalcond[2]=((((-1.0)*r22*x1276))+(((-1.0)*x1269*x1270))+((r20*x1282))+((sj3*x1268)));
evalcond[3]=((((-1.0)*x1268*x1273))+(((-1.0)*x1270*x1280))+((r00*x1282))+(((-1.0)*r02*x1276)));
evalcond[4]=((((-0.1685)*sj3))+(((-1.0)*cj3*x1283))+(((-1.0)*px))+(((0.1363)*x1274))+((r00*x1279)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1278))+(((-1.0)*pz))+((sj3*x1283))+(((0.1363)*x1271)));
evalcond[6]=(((x1269*x1272))+((r21*x1281))+(((-1.0)*cj5*r22*x1270))+(((-1.0)*r20*x1284))+((sj3*x1267))+((sj5*x1271)));
evalcond[7]=(((r10*x1275))+((r11*x1281))+(((-1.0)*cj5*r12*x1270))+((x1272*x1277))+(((-1.0)*r10*x1284))+(((-1.0)*x1268)));
evalcond[8]=((((-1.0)*x1267*x1273))+(((-1.0)*r00*x1284))+((x1272*x1280))+((r00*x1275))+(((-1.0)*cj5*r02*x1270))+((sj5*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1285=IKsin(j4);
IkReal x1286=IKcos(j4);
IkReal x1287=(r21*sj7);
IkReal x1288=((1.0)*sj6);
IkReal x1289=(r20*sj7);
IkReal x1290=(cj5*cj6);
IkReal x1291=(cj7*r11);
IkReal x1292=((1.0)*cj6);
IkReal x1293=(r11*sj7);
IkReal x1294=(r10*sj7);
IkReal x1295=(cj7*sj6);
IkReal x1296=(cj7*r21);
IkReal x1297=((1.0)*cj7*x1290);
evalcond[0]=(((r20*x1295))+x1285+(((-1.0)*x1287*x1288))+(((-1.0)*r22*x1292)));
evalcond[1]=((0.1425)+(((0.1363)*x1289))+(((-1.0)*pz))+(((0.1363)*x1296))+(((0.4)*x1285)));
evalcond[2]=((-0.4)+(((-0.4)*x1286))+(((-1.0)*py))+(((0.1363)*x1294))+(((0.1363)*x1291)));
evalcond[3]=((((-1.0)*x1286))+(((-1.0)*x1288*x1293))+(((-1.0)*r12*x1292))+((r10*x1295)));
evalcond[4]=(((sj5*x1296))+x1286+((x1287*x1290))+(((-1.0)*r20*x1297))+((sj5*x1289))+(((-1.0)*cj5*r22*x1288)));
evalcond[5]=(((sj5*x1291))+((sj5*x1294))+x1285+((x1290*x1293))+(((-1.0)*cj5*r12*x1288))+(((-1.0)*r10*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1298=((0.34075)*cj7);
IkReal x1299=((0.34075)*sj7);
if( IKabs(((0.35625)+((r20*x1299))+((r21*x1298))+(((-2.5)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r11*x1298))+((r10*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+((r20*x1299))+((r21*x1298))+(((-2.5)*pz))))+IKsqr(((-1.0)+(((-2.5)*py))+((r11*x1298))+((r10*x1299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+((r20*x1299))+((r21*x1298))+(((-2.5)*pz))), ((-1.0)+(((-2.5)*py))+((r11*x1298))+((r10*x1299))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1300=IKsin(j4);
IkReal x1301=IKcos(j4);
IkReal x1302=(r21*sj7);
IkReal x1303=((1.0)*sj6);
IkReal x1304=(r20*sj7);
IkReal x1305=(cj5*cj6);
IkReal x1306=(cj7*r11);
IkReal x1307=((1.0)*cj6);
IkReal x1308=(r11*sj7);
IkReal x1309=(r10*sj7);
IkReal x1310=(cj7*r21);
IkReal x1311=(cj7*sj6);
IkReal x1312=((1.0)*x1301);
IkReal x1313=((1.0)*cj7*x1305);
evalcond[0]=((0.1425)+(((0.1363)*x1304))+(((-1.0)*pz))+(((-0.4)*x1300))+(((0.1363)*x1310)));
evalcond[1]=((-0.4)+(((0.1363)*x1306))+(((0.1363)*x1309))+(((-1.0)*py))+(((-0.4)*x1301)));
evalcond[2]=((((-1.0)*x1300))+(((-1.0)*r22*x1307))+((r20*x1311))+(((-1.0)*x1302*x1303)));
evalcond[3]=((((-1.0)*x1312))+((r10*x1311))+(((-1.0)*x1303*x1308))+(((-1.0)*r12*x1307)));
evalcond[4]=(x1300+((sj5*x1306))+((sj5*x1309))+(((-1.0)*cj5*r12*x1303))+((x1305*x1308))+(((-1.0)*r10*x1313)));
evalcond[5]=(((sj5*x1304))+((sj5*x1310))+(((-1.0)*x1312))+((x1302*x1305))+(((-1.0)*r20*x1313))+(((-1.0)*cj5*r22*x1303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1314=((0.34075)*sj7);
IkReal x1315=((0.34075)*cj7);
if( IKabs(((((-1.0)*r00*x1314))+(((-1.0)*r01*x1315))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r11*x1315))+((r10*x1314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1314))+(((-1.0)*r01*x1315))+(((2.5)*px))))+IKsqr(((-1.0)+(((-2.5)*py))+((r11*x1315))+((r10*x1314))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x1314))+(((-1.0)*r01*x1315))+(((2.5)*px))), ((-1.0)+(((-2.5)*py))+((r11*x1315))+((r10*x1314))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1316=IKsin(j4);
IkReal x1317=IKcos(j4);
IkReal x1318=((1.0)*cj6);
IkReal x1319=(cj5*cj7);
IkReal x1320=(cj7*sj5);
IkReal x1321=(r11*sj7);
IkReal x1322=(cj5*cj6);
IkReal x1323=(sj5*sj7);
IkReal x1324=((1.0)*sj6);
IkReal x1325=((0.1363)*cj7);
IkReal x1326=((0.1363)*sj7);
IkReal x1327=(r01*sj7);
IkReal x1328=(cj7*sj6);
IkReal x1329=(cj5*x1324);
evalcond[0]=(x1316+((r00*x1328))+(((-1.0)*x1324*x1327))+(((-1.0)*r02*x1318)));
evalcond[1]=(((r01*x1325))+((r00*x1326))+(((0.4)*x1316))+(((-1.0)*px)));
evalcond[2]=((-0.4)+(((-0.4)*x1317))+((r11*x1325))+((r10*x1326))+(((-1.0)*py)));
evalcond[3]=((((-1.0)*x1317))+(((-1.0)*r12*x1318))+((r10*x1328))+(((-1.0)*x1321*x1324)));
evalcond[4]=(x1316+(((-1.0)*r10*x1318*x1319))+((r11*x1320))+((r10*x1323))+(((-1.0)*r12*x1329))+((x1321*x1322)));
evalcond[5]=(x1317+(((-1.0)*r00*x1318*x1319))+((r01*x1320))+((r00*x1323))+((x1322*x1327))+(((-1.0)*r02*x1329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1330=((0.34075)*sj7);
IkReal x1331=((0.34075)*cj7);
if( IKabs(((((-2.5)*px))+((r00*x1330))+((r01*x1331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r11*x1331))+(((-2.5)*py))+((r10*x1330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.5)*px))+((r00*x1330))+((r01*x1331))))+IKsqr(((-1.0)+((r11*x1331))+(((-2.5)*py))+((r10*x1330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.5)*px))+((r00*x1330))+((r01*x1331))), ((-1.0)+((r11*x1331))+(((-2.5)*py))+((r10*x1330))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1332=IKcos(j4);
IkReal x1333=IKsin(j4);
IkReal x1334=((1.0)*cj6);
IkReal x1335=(cj5*cj7);
IkReal x1336=(cj7*sj5);
IkReal x1337=(sj5*sj7);
IkReal x1338=(r11*sj7);
IkReal x1339=(cj5*cj6);
IkReal x1340=((0.1363)*cj7);
IkReal x1341=((1.0)*sj6);
IkReal x1342=((0.1363)*sj7);
IkReal x1343=(r01*sj7);
IkReal x1344=(cj7*sj6);
IkReal x1345=((1.0)*x1332);
IkReal x1346=(cj5*x1341);
evalcond[0]=((((-0.4)*x1333))+(((-1.0)*px))+((r00*x1342))+((r01*x1340)));
evalcond[1]=((-0.4)+(((-0.4)*x1332))+(((-1.0)*py))+((r11*x1340))+((r10*x1342)));
evalcond[2]=((((-1.0)*x1338*x1341))+(((-1.0)*x1345))+(((-1.0)*r12*x1334))+((r10*x1344)));
evalcond[3]=((((-1.0)*x1341*x1343))+(((-1.0)*x1333))+((r00*x1344))+(((-1.0)*r02*x1334)));
evalcond[4]=(x1333+((x1338*x1339))+((r11*x1336))+(((-1.0)*r12*x1346))+(((-1.0)*r10*x1334*x1335))+((r10*x1337)));
evalcond[5]=((((-1.0)*r02*x1346))+((x1339*x1343))+(((-1.0)*x1345))+((r00*x1337))+((r01*x1336))+(((-1.0)*r00*x1334*x1335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(cj3,-1);
if(!x1347.valid){
continue;
}
if( IKabs(((x1347.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1347.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1347.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1348=IKcos(j4);
IkReal x1349=IKsin(j4);
IkReal x1350=(r21*sj7);
IkReal x1351=((1.0)*sj6);
IkReal x1352=(r20*sj7);
IkReal x1353=(cj5*cj6);
IkReal x1354=(cj7*sj5);
IkReal x1355=(sj5*sj7);
IkReal x1356=((1.0)*cj6);
IkReal x1357=(r11*sj7);
IkReal x1358=((0.1363)*cj7);
IkReal x1359=((0.1363)*sj7);
IkReal x1360=(r01*sj7);
IkReal x1361=(cj7*sj6);
IkReal x1362=((0.4)*x1349);
IkReal x1363=((1.0)*cj7*x1353);
evalcond[0]=((-0.4)+((r10*x1359))+(((-1.0)*py))+((r11*x1358))+(((-0.4)*x1348)));
evalcond[1]=((((-1.0)*x1350*x1351))+((r20*x1361))+(((-1.0)*r22*x1356))+((sj3*x1349)));
evalcond[2]=((((-1.0)*r12*x1356))+((r10*x1361))+(((-1.0)*x1351*x1357))+(((-1.0)*x1348)));
evalcond[3]=((((-1.0)*r02*x1356))+((r00*x1361))+((cj3*x1349))+(((-1.0)*x1351*x1360)));
evalcond[4]=((((0.1685)*sj3))+(((-1.0)*px))+((r00*x1359))+((cj3*x1362))+((r01*x1358)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1352))+(((-1.0)*pz))+((sj3*x1362))+((r21*x1358)));
evalcond[6]=(x1349+((r10*x1355))+(((-1.0)*cj5*r12*x1351))+((r11*x1354))+((x1353*x1357))+(((-1.0)*r10*x1363)));
evalcond[7]=(((sj5*x1352))+(((-1.0)*cj5*r22*x1351))+(((-1.0)*r20*x1363))+((x1350*x1353))+((sj3*x1348))+((r21*x1354)));
evalcond[8]=((((-1.0)*cj5*r02*x1351))+(((-1.0)*r00*x1363))+((r00*x1355))+((r01*x1354))+((cj3*x1348))+((x1353*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1364=IKPowWithIntegerCheck(sj3,-1);
if(!x1364.valid){
continue;
}
if( IKabs(((x1364.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1364.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1364.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1365=IKcos(j4);
IkReal x1366=IKsin(j4);
IkReal x1367=(r21*sj7);
IkReal x1368=((1.0)*sj6);
IkReal x1369=(r20*sj7);
IkReal x1370=(cj5*cj6);
IkReal x1371=(cj7*sj5);
IkReal x1372=(sj5*sj7);
IkReal x1373=((1.0)*cj6);
IkReal x1374=(r11*sj7);
IkReal x1375=((0.1363)*cj7);
IkReal x1376=((0.1363)*sj7);
IkReal x1377=(r01*sj7);
IkReal x1378=(cj7*sj6);
IkReal x1379=((0.4)*x1366);
IkReal x1380=((1.0)*cj7*x1370);
evalcond[0]=((-0.4)+((r10*x1376))+((r11*x1375))+(((-1.0)*py))+(((-0.4)*x1365)));
evalcond[1]=((((-1.0)*r22*x1373))+((sj3*x1366))+(((-1.0)*x1367*x1368))+((r20*x1378)));
evalcond[2]=((((-1.0)*x1365))+((r10*x1378))+(((-1.0)*r12*x1373))+(((-1.0)*x1368*x1374)));
evalcond[3]=((((-1.0)*r02*x1373))+((cj3*x1366))+(((-1.0)*x1368*x1377))+((r00*x1378)));
evalcond[4]=((((0.1685)*sj3))+(((-1.0)*px))+((cj3*x1379))+((r00*x1376))+((r01*x1375)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1369))+((sj3*x1379))+(((-1.0)*pz))+((r21*x1375)));
evalcond[6]=(x1366+((r10*x1372))+(((-1.0)*cj5*r12*x1368))+((r11*x1371))+(((-1.0)*r10*x1380))+((x1370*x1374)));
evalcond[7]=((((-1.0)*r20*x1380))+(((-1.0)*cj5*r22*x1368))+((x1367*x1370))+((r21*x1371))+((sj3*x1365))+((sj5*x1369)));
evalcond[8]=((((-1.0)*r00*x1380))+((x1370*x1377))+(((-1.0)*cj5*r02*x1368))+((cj3*x1365))+((r00*x1372))+((r01*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(sj3,-1);
if(!x1387.valid){
continue;
}
IkReal x1381=x1387.value;
IkReal x1382=((1.0)*sj6);
IkReal x1383=(r21*sj7);
IkReal x1384=(cj2*cj3);
IkReal x1385=(cj6*r22);
IkReal x1386=(cj7*r20);
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(sj2,-1);
if(!x1388.valid){
continue;
}
if( IKabs((x1381*((x1385+((sj6*x1383))+(((-1.0)*x1382*x1386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1381*(x1388.value)*((((sj6*x1384*x1386))+((r11*sj3*sj6*sj7))+(((-1.0)*x1384*x1385))+(((-1.0)*cj7*r10*sj3*x1382))+(((-1.0)*x1382*x1383*x1384))+((cj6*r12*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1381*((x1385+((sj6*x1383))+(((-1.0)*x1382*x1386))))))+IKsqr((x1381*(x1388.value)*((((sj6*x1384*x1386))+((r11*sj3*sj6*sj7))+(((-1.0)*x1384*x1385))+(((-1.0)*cj7*r10*sj3*x1382))+(((-1.0)*x1382*x1383*x1384))+((cj6*r12*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1381*((x1385+((sj6*x1383))+(((-1.0)*x1382*x1386))))), (x1381*(x1388.value)*((((sj6*x1384*x1386))+((r11*sj3*sj6*sj7))+(((-1.0)*x1384*x1385))+(((-1.0)*cj7*r10*sj3*x1382))+(((-1.0)*x1382*x1383*x1384))+((cj6*r12*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1389=IKsin(j4);
IkReal x1390=IKcos(j4);
IkReal x1391=(r21*sj7);
IkReal x1392=((1.0)*sj6);
IkReal x1393=(r20*sj7);
IkReal x1394=(cj5*cj6);
IkReal x1395=(cj7*sj5);
IkReal x1396=((0.1685)*sj3);
IkReal x1397=(cj2*cj3);
IkReal x1398=(sj5*sj7);
IkReal x1399=((1.0)*cj6);
IkReal x1400=(r11*sj7);
IkReal x1401=((0.1363)*cj7);
IkReal x1402=((0.1363)*sj7);
IkReal x1403=(cj3*sj2);
IkReal x1404=(r01*sj7);
IkReal x1405=(cj7*sj6);
IkReal x1406=((0.4)*x1390);
IkReal x1407=((0.4)*x1389);
IkReal x1408=((1.0)*x1389);
IkReal x1409=((1.0)*cj7*x1394);
evalcond[0]=((((-1.0)*x1391*x1392))+((r20*x1405))+((sj3*x1389))+(((-1.0)*r22*x1399)));
evalcond[1]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1393))+((sj3*x1407))+(((-1.0)*pz))+((r21*x1401)));
evalcond[2]=((((-1.0)*r12*x1399))+((sj2*x1390))+((x1389*x1397))+(((-1.0)*x1392*x1400))+((r10*x1405)));
evalcond[3]=((((-1.0)*r02*x1399))+((cj2*x1390))+((r00*x1405))+(((-1.0)*x1392*x1404))+(((-1.0)*x1403*x1408)));
evalcond[4]=(((r21*x1395))+((sj3*x1390))+(((-1.0)*cj5*r22*x1392))+((sj5*x1393))+((x1391*x1394))+(((-1.0)*r20*x1409)));
evalcond[5]=((((0.4)*cj2))+((r00*x1402))+(((-1.0)*px))+((r01*x1401))+(((-1.0)*x1403*x1407))+((cj2*x1406))+(((-1.0)*sj2*x1396)));
evalcond[6]=(((cj2*x1396))+((x1397*x1407))+((r11*x1401))+((sj2*x1406))+(((-1.0)*py))+(((0.4)*sj2))+((r10*x1402)));
evalcond[7]=(((r10*x1398))+(((-1.0)*cj5*r12*x1392))+((x1390*x1397))+((x1394*x1400))+(((-1.0)*r10*x1409))+((r11*x1395))+(((-1.0)*sj2*x1408)));
evalcond[8]=((((-1.0)*cj2*x1408))+(((-1.0)*r00*x1409))+((x1394*x1404))+((r01*x1395))+(((-1.0)*x1390*x1403))+((r00*x1398))+(((-1.0)*cj5*r02*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(sj3,-1);
if(!x1415.valid){
continue;
}
IkReal x1410=x1415.value;
IkReal x1411=(cj3*sj2);
IkReal x1412=(cj6*r22);
IkReal x1413=(r21*sj6*sj7);
IkReal x1414=((1.0)*cj7*sj6);
CheckValue<IkReal> x1416=IKPowWithIntegerCheck(cj2,-1);
if(!x1416.valid){
continue;
}
if( IKabs((x1410*((x1412+x1413+(((-1.0)*r20*x1414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1410*(x1416.value)*(((((-1.0)*r20*x1411*x1414))+((x1411*x1412))+((x1411*x1413))+(((-1.0)*r00*sj3*x1414))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1410*((x1412+x1413+(((-1.0)*r20*x1414))))))+IKsqr((x1410*(x1416.value)*(((((-1.0)*r20*x1411*x1414))+((x1411*x1412))+((x1411*x1413))+(((-1.0)*r00*sj3*x1414))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1410*((x1412+x1413+(((-1.0)*r20*x1414))))), (x1410*(x1416.value)*(((((-1.0)*r20*x1411*x1414))+((x1411*x1412))+((x1411*x1413))+(((-1.0)*r00*sj3*x1414))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1417=IKsin(j4);
IkReal x1418=IKcos(j4);
IkReal x1419=(r21*sj7);
IkReal x1420=((1.0)*sj6);
IkReal x1421=(r20*sj7);
IkReal x1422=(cj5*cj6);
IkReal x1423=(cj7*sj5);
IkReal x1424=((0.1685)*sj3);
IkReal x1425=(cj2*cj3);
IkReal x1426=(sj5*sj7);
IkReal x1427=((1.0)*cj6);
IkReal x1428=(r11*sj7);
IkReal x1429=((0.1363)*cj7);
IkReal x1430=((0.1363)*sj7);
IkReal x1431=(cj3*sj2);
IkReal x1432=(r01*sj7);
IkReal x1433=(cj7*sj6);
IkReal x1434=((0.4)*x1418);
IkReal x1435=((0.4)*x1417);
IkReal x1436=((1.0)*x1417);
IkReal x1437=((1.0)*cj7*x1422);
evalcond[0]=(((r20*x1433))+(((-1.0)*x1419*x1420))+(((-1.0)*r22*x1427))+((sj3*x1417)));
evalcond[1]=((0.1425)+(((0.1363)*x1421))+(((-0.1685)*cj3))+((r21*x1429))+((sj3*x1435))+(((-1.0)*pz)));
evalcond[2]=(((sj2*x1418))+(((-1.0)*x1420*x1428))+(((-1.0)*r12*x1427))+((x1417*x1425))+((r10*x1433)));
evalcond[3]=(((cj2*x1418))+(((-1.0)*x1420*x1432))+(((-1.0)*x1431*x1436))+((r00*x1433))+(((-1.0)*r02*x1427)));
evalcond[4]=(((r21*x1423))+(((-1.0)*cj5*r22*x1420))+((x1419*x1422))+((sj5*x1421))+(((-1.0)*r20*x1437))+((sj3*x1418)));
evalcond[5]=(((r01*x1429))+(((0.4)*cj2))+(((-1.0)*x1431*x1435))+(((-1.0)*px))+((r00*x1430))+(((-1.0)*sj2*x1424))+((cj2*x1434)));
evalcond[6]=(((r11*x1429))+((sj2*x1434))+((cj2*x1424))+((x1425*x1435))+(((-1.0)*py))+(((0.4)*sj2))+((r10*x1430)));
evalcond[7]=(((r11*x1423))+((x1422*x1428))+((r10*x1426))+(((-1.0)*cj5*r12*x1420))+(((-1.0)*r10*x1437))+((x1418*x1425))+(((-1.0)*sj2*x1436)));
evalcond[8]=(((r01*x1423))+((r00*x1426))+(((-1.0)*cj2*x1436))+(((-1.0)*r00*x1437))+((x1422*x1432))+(((-1.0)*x1418*x1431))+(((-1.0)*cj5*r02*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1438=(cj5*cj7);
IkReal x1439=(cj6*sj5);
IkReal x1440=((1.0)*sj7);
IkReal x1441=(sj5*sj6);
IkReal x1442=(cj5*sj7);
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(sj2,-1);
if(!x1443.valid){
continue;
}
if( IKabs(((x1443.value)*(((((-1.0)*r01*x1439*x1440))+((r02*x1441))+((r01*x1438))+((r00*x1442))+((cj7*r00*x1439)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1441))+((cj7*r20*x1439))+((r21*x1438))+((r20*x1442))+(((-1.0)*r21*x1439*x1440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1443.value)*(((((-1.0)*r01*x1439*x1440))+((r02*x1441))+((r01*x1438))+((r00*x1442))+((cj7*r00*x1439))))))+IKsqr((((r22*x1441))+((cj7*r20*x1439))+((r21*x1438))+((r20*x1442))+(((-1.0)*r21*x1439*x1440))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1443.value)*(((((-1.0)*r01*x1439*x1440))+((r02*x1441))+((r01*x1438))+((r00*x1442))+((cj7*r00*x1439))))), (((r22*x1441))+((cj7*r20*x1439))+((r21*x1438))+((r20*x1442))+(((-1.0)*r21*x1439*x1440))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1444=IKsin(j3);
IkReal x1445=(cj6*sj5);
IkReal x1446=((1.0)*cj5);
IkReal x1447=((1.0)*cj7);
IkReal x1448=((1.0)*sj5*sj6);
evalcond[0]=((((-1.0)*r22*x1448))+(((-1.0)*cj7*r21*x1446))+(IKcos(j3))+(((-1.0)*r20*sj7*x1446))+(((-1.0)*r20*x1445*x1447))+((r21*sj7*x1445)));
evalcond[1]=((((-1.0)*cj7*r01*x1446))+(((-1.0)*r00*sj7*x1446))+(((-1.0)*r00*x1445*x1447))+((sj2*x1444))+(((-1.0)*r02*x1448))+((r01*sj7*x1445)));
evalcond[2]=((((-1.0)*r12*x1448))+((r11*sj7*x1445))+(((-1.0)*cj2*x1444))+(((-1.0)*r10*x1445*x1447))+(((-1.0)*r10*sj7*x1446))+(((-1.0)*cj7*r11*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1449=(sj2*sj6);
IkReal x1450=(cj7*r00);
IkReal x1451=(r01*sj7);
IkReal x1452=(cj2*sj6);
IkReal x1453=(r11*sj7);
IkReal x1454=(cj6*r12);
IkReal x1455=(cj6*r02);
IkReal x1456=((1.0)*cj7*r10);
if( IKabs(((((-1.0)*sj2*x1455))+((cj2*x1454))+(((-1.0)*x1449*x1451))+(((-1.0)*x1452*x1456))+((x1449*x1450))+((x1452*x1453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x1454))+(((-1.0)*x1450*x1452))+((cj2*x1455))+((x1449*x1453))+(((-1.0)*x1449*x1456))+((x1451*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x1455))+((cj2*x1454))+(((-1.0)*x1449*x1451))+(((-1.0)*x1452*x1456))+((x1449*x1450))+((x1452*x1453))))+IKsqr((((sj2*x1454))+(((-1.0)*x1450*x1452))+((cj2*x1455))+((x1449*x1453))+(((-1.0)*x1449*x1456))+((x1451*x1452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x1455))+((cj2*x1454))+(((-1.0)*x1449*x1451))+(((-1.0)*x1452*x1456))+((x1449*x1450))+((x1452*x1453))), (((sj2*x1454))+(((-1.0)*x1450*x1452))+((cj2*x1455))+((x1449*x1453))+(((-1.0)*x1449*x1456))+((x1451*x1452))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1457=IKcos(j4);
IkReal x1458=IKsin(j4);
IkReal x1459=(cj5*cj6);
IkReal x1460=(cj7*r10);
IkReal x1461=(cj7*sj5);
IkReal x1462=(r00*sj7);
IkReal x1463=(r11*sj7);
IkReal x1464=((0.1363)*cj7);
IkReal x1465=((0.4)*sj2);
IkReal x1466=(r10*sj7);
IkReal x1467=((1.0)*cj6);
IkReal x1468=((1.0)*sj6);
IkReal x1469=(r01*sj7);
IkReal x1470=((1.0)*sj2);
IkReal x1471=(cj7*r00);
IkReal x1472=(cj2*x1457);
IkReal x1473=(cj2*x1458);
IkReal x1474=((0.4)*x1457);
IkReal x1475=(cj5*x1468);
IkReal x1476=(x1458*x1470);
evalcond[0]=(((sj2*x1457))+(((-1.0)*x1463*x1468))+((sj6*x1460))+x1473+(((-1.0)*r12*x1467)));
evalcond[1]=(((sj6*x1471))+(((-1.0)*r02*x1467))+x1472+(((-1.0)*x1476))+(((-1.0)*x1468*x1469)));
evalcond[2]=((((-1.0)*x1458*x1465))+((r01*x1464))+(((0.4)*cj2))+(((-1.0)*px))+(((0.4)*x1472))+(((0.1363)*x1462)));
evalcond[3]=((((-1.0)*py))+x1465+(((0.4)*x1473))+((x1457*x1465))+((r11*x1464))+(((0.1363)*x1466)));
evalcond[4]=(((x1459*x1463))+(((-1.0)*r12*x1475))+x1472+(((-1.0)*x1476))+((r11*x1461))+(((-1.0)*x1459*x1460))+((sj5*x1466)));
evalcond[5]=((((-1.0)*x1457*x1470))+(((-1.0)*x1459*x1471))+((r01*x1461))+((x1459*x1469))+(((-1.0)*x1473))+(((-1.0)*r02*x1475))+((sj5*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1477=(cj2*cj6);
IkReal x1478=((1.0)*r00);
IkReal x1479=(sj2*sj6);
IkReal x1480=(cj6*sj2);
IkReal x1481=(cj2*sj6*sj7);
IkReal x1482=(cj2*cj7*sj6);
if( IKabs(((((-1.0)*r11*x1481))+((r10*x1482))+(((-1.0)*cj7*x1478*x1479))+(((-1.0)*r12*x1477))+((r01*sj7*x1479))+((r02*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1481))+((r12*x1480))+((r02*x1477))+(((-1.0)*cj7*r10*x1479))+((r11*sj7*x1479))+(((-1.0)*x1478*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1481))+((r10*x1482))+(((-1.0)*cj7*x1478*x1479))+(((-1.0)*r12*x1477))+((r01*sj7*x1479))+((r02*x1480))))+IKsqr((((r01*x1481))+((r12*x1480))+((r02*x1477))+(((-1.0)*cj7*r10*x1479))+((r11*sj7*x1479))+(((-1.0)*x1478*x1482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x1481))+((r10*x1482))+(((-1.0)*cj7*x1478*x1479))+(((-1.0)*r12*x1477))+((r01*sj7*x1479))+((r02*x1480))), (((r01*x1481))+((r12*x1480))+((r02*x1477))+(((-1.0)*cj7*r10*x1479))+((r11*sj7*x1479))+(((-1.0)*x1478*x1482))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1483=IKcos(j4);
IkReal x1484=IKsin(j4);
IkReal x1485=(cj5*cj6);
IkReal x1486=((1.0)*cj7);
IkReal x1487=(r11*sj7);
IkReal x1488=((0.4)*cj2);
IkReal x1489=(cj7*sj5);
IkReal x1490=((0.4)*sj2);
IkReal x1491=((1.0)*r12);
IkReal x1492=(sj5*sj7);
IkReal x1493=(cj5*sj6);
IkReal x1494=((1.0)*r02);
IkReal x1495=((0.1363)*cj7);
IkReal x1496=((1.0)*sj6);
IkReal x1497=((1.0)*cj2);
IkReal x1498=((0.1363)*sj7);
IkReal x1499=(r01*sj7);
IkReal x1500=(cj7*sj6);
IkReal x1501=(sj2*x1483);
IkReal x1502=(sj2*x1484);
IkReal x1503=(x1484*x1497);
evalcond[0]=(((cj2*x1483))+(((-1.0)*x1496*x1499))+((r00*x1500))+x1502+(((-1.0)*cj6*x1494)));
evalcond[1]=((((-1.0)*x1503))+(((-1.0)*x1487*x1496))+((r10*x1500))+x1501+(((-1.0)*cj6*x1491)));
evalcond[2]=(((r00*x1498))+((r01*x1495))+(((-1.0)*px))+((x1483*x1488))+((x1484*x1490))+x1488);
evalcond[3]=(((r10*x1498))+(((-1.0)*x1484*x1488))+((r11*x1495))+(((-1.0)*py))+((x1483*x1490))+x1490);
evalcond[4]=((((-1.0)*x1503))+((r00*x1492))+((r01*x1489))+(((-1.0)*r00*x1485*x1486))+(((-1.0)*x1493*x1494))+x1501+((x1485*x1499)));
evalcond[5]=(((r10*x1492))+(((-1.0)*r10*x1485*x1486))+(((-1.0)*x1502))+((r11*x1489))+(((-1.0)*x1491*x1493))+((x1485*x1487))+(((-1.0)*x1483*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1504=(sj6*sj7);
IkReal x1505=((1.0)*cj7*sj6);
if( IKabs(((((-1.0)*r20*x1505))+((r21*x1504))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1505))+((r01*x1504))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1505))+((r21*x1504))+((cj6*r22))))+IKsqr(((((-1.0)*r00*x1505))+((r01*x1504))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*x1505))+((r21*x1504))+((cj6*r22))), ((((-1.0)*r00*x1505))+((r01*x1504))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1506=IKsin(j4);
IkReal x1507=IKcos(j4);
IkReal x1508=(r21*sj7);
IkReal x1509=((1.0)*sj6);
IkReal x1510=(r20*sj7);
IkReal x1511=(cj5*cj6);
IkReal x1512=((1.0)*cj7);
IkReal x1513=(cj7*r01);
IkReal x1514=(r00*sj7);
IkReal x1515=((1.0)*cj6);
IkReal x1516=(r01*sj7);
IkReal x1517=(cj7*r21);
IkReal x1518=(cj7*sj6);
evalcond[0]=((((-1.0)*r22*x1515))+((r20*x1518))+x1506+(((-1.0)*x1508*x1509)));
evalcond[1]=(((r00*x1518))+x1507+(((-1.0)*r02*x1515))+(((-1.0)*x1509*x1516)));
evalcond[2]=((0.1425)+(((0.1363)*x1510))+(((0.1363)*x1517))+(((-1.0)*pz))+(((0.4)*x1506)));
evalcond[3]=((0.4)+(((0.1363)*x1513))+(((0.1363)*x1514))+(((-1.0)*px))+(((0.4)*x1507)));
evalcond[4]=(((x1508*x1511))+(((-1.0)*cj5*r22*x1509))+((sj5*x1517))+((sj5*x1510))+(((-1.0)*r20*x1511*x1512))+x1507);
evalcond[5]=(((sj5*x1513))+((sj5*x1514))+(((-1.0)*x1506))+(((-1.0)*cj5*r02*x1509))+(((-1.0)*r00*x1511*x1512))+((x1511*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1519=IKcos(j4);
IkReal x1520=IKsin(j4);
IkReal x1521=(r21*sj7);
IkReal x1522=((1.0)*sj6);
IkReal x1523=(r20*sj7);
IkReal x1524=(cj5*cj6);
IkReal x1525=((1.0)*cj7);
IkReal x1526=(cj7*r01);
IkReal x1527=(r00*sj7);
IkReal x1528=((1.0)*cj6);
IkReal x1529=(r01*sj7);
IkReal x1530=(cj7*r21);
IkReal x1531=(cj7*sj6);
IkReal x1532=((1.0)*x1520);
evalcond[0]=(((r00*x1531))+(((-1.0)*r02*x1528))+x1519+(((-1.0)*x1522*x1529)));
evalcond[1]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x1523))+(((0.1363)*x1530))+(((-0.4)*x1520)));
evalcond[2]=((0.4)+(((-1.0)*px))+(((0.1363)*x1527))+(((0.1363)*x1526))+(((0.4)*x1519)));
evalcond[3]=((((-1.0)*x1532))+((r20*x1531))+(((-1.0)*r22*x1528))+(((-1.0)*x1521*x1522)));
evalcond[4]=(((sj5*x1530))+((sj5*x1523))+(((-1.0)*x1519))+(((-1.0)*r20*x1524*x1525))+(((-1.0)*cj5*r22*x1522))+((x1521*x1524)));
evalcond[5]=(((x1524*x1529))+((sj5*x1527))+((sj5*x1526))+(((-1.0)*x1532))+(((-1.0)*cj5*r02*x1522))+(((-1.0)*r00*x1524*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r11))+(((-0.34075)*r10*sj7))+(((2.5)*py))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1533=IKsin(j4);
IkReal x1534=IKcos(j4);
IkReal x1535=((1.0)*cj6);
IkReal x1536=(cj5*cj7);
IkReal x1537=(cj7*sj5);
IkReal x1538=(r11*sj7);
IkReal x1539=(cj5*cj6);
IkReal x1540=(sj5*sj7);
IkReal x1541=((1.0)*sj6);
IkReal x1542=((0.1363)*cj7);
IkReal x1543=((0.1363)*sj7);
IkReal x1544=(r01*sj7);
IkReal x1545=(cj7*sj6);
IkReal x1546=(cj5*x1541);
evalcond[0]=((((-1.0)*r12*x1535))+x1533+((r10*x1545))+(((-1.0)*x1538*x1541)));
evalcond[1]=((((-1.0)*r02*x1535))+x1534+(((-1.0)*x1541*x1544))+((r00*x1545)));
evalcond[2]=((((0.4)*x1533))+(((-1.0)*py))+((r11*x1542))+((r10*x1543)));
evalcond[3]=((0.4)+(((0.4)*x1534))+(((-1.0)*px))+((r01*x1542))+((r00*x1543)));
evalcond[4]=(((x1538*x1539))+((r11*x1537))+x1534+(((-1.0)*r10*x1535*x1536))+((r10*x1540))+(((-1.0)*r12*x1546)));
evalcond[5]=((((-1.0)*x1533))+(((-1.0)*r02*x1546))+((x1539*x1544))+((r01*x1537))+(((-1.0)*r00*x1535*x1536))+((r00*x1540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))+IKsqr(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))), ((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1547=IKcos(j4);
IkReal x1548=IKsin(j4);
IkReal x1549=((1.0)*cj6);
IkReal x1550=(cj5*cj7);
IkReal x1551=(cj7*sj5);
IkReal x1552=(sj5*sj7);
IkReal x1553=(r11*sj7);
IkReal x1554=(cj5*cj6);
IkReal x1555=((0.1363)*cj7);
IkReal x1556=((1.0)*sj6);
IkReal x1557=((0.1363)*sj7);
IkReal x1558=(r01*sj7);
IkReal x1559=(cj7*sj6);
IkReal x1560=((1.0)*x1548);
IkReal x1561=(cj5*x1556);
evalcond[0]=(((r00*x1559))+(((-1.0)*r02*x1549))+x1547+(((-1.0)*x1556*x1558)));
evalcond[1]=(((r11*x1555))+(((-1.0)*py))+(((-0.4)*x1548))+((r10*x1557)));
evalcond[2]=((0.4)+((r00*x1557))+((r01*x1555))+(((-1.0)*px))+(((0.4)*x1547)));
evalcond[3]=((((-1.0)*x1553*x1556))+(((-1.0)*r12*x1549))+(((-1.0)*x1560))+((r10*x1559)));
evalcond[4]=((((-1.0)*x1547))+((x1553*x1554))+((r11*x1551))+(((-1.0)*r10*x1549*x1550))+(((-1.0)*r12*x1561))+((r10*x1552)));
evalcond[5]=(((r00*x1552))+((r01*x1551))+(((-1.0)*r02*x1561))+((x1554*x1558))+(((-1.0)*r00*x1549*x1550))+(((-1.0)*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1562=(sj6*sj7);
IkReal x1563=((1.0)*cj7*sj6);
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(cj3,-1);
if(!x1564.valid){
continue;
}
if( IKabs(((x1564.value)*((((r11*x1562))+((cj6*r12))+(((-1.0)*r10*x1563)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1563))+((cj6*r02))+((r01*x1562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1564.value)*((((r11*x1562))+((cj6*r12))+(((-1.0)*r10*x1563))))))+IKsqr(((((-1.0)*r00*x1563))+((cj6*r02))+((r01*x1562))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1564.value)*((((r11*x1562))+((cj6*r12))+(((-1.0)*r10*x1563))))), ((((-1.0)*r00*x1563))+((cj6*r02))+((r01*x1562))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1565=IKcos(j4);
IkReal x1566=IKsin(j4);
IkReal x1567=(r21*sj7);
IkReal x1568=((1.0)*sj6);
IkReal x1569=(r20*sj7);
IkReal x1570=(cj5*cj6);
IkReal x1571=(cj7*sj5);
IkReal x1572=(sj5*sj7);
IkReal x1573=((1.0)*cj6);
IkReal x1574=(r11*sj7);
IkReal x1575=((0.1363)*cj7);
IkReal x1576=((0.1363)*sj7);
IkReal x1577=(r01*sj7);
IkReal x1578=(cj7*sj6);
IkReal x1579=((0.4)*x1566);
IkReal x1580=((1.0)*cj7*x1570);
evalcond[0]=((((-1.0)*r02*x1573))+(((-1.0)*x1568*x1577))+x1565+((r00*x1578)));
evalcond[1]=((0.4)+(((-1.0)*px))+(((0.4)*x1565))+((r01*x1575))+((r00*x1576)));
evalcond[2]=(((r20*x1578))+(((-1.0)*x1567*x1568))+(((-1.0)*r22*x1573))+((sj3*x1566)));
evalcond[3]=(((cj3*x1566))+(((-1.0)*x1568*x1574))+(((-1.0)*r12*x1573))+((r10*x1578)));
evalcond[4]=((((0.1685)*sj3))+((cj3*x1579))+(((-1.0)*py))+((r11*x1575))+((r10*x1576)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((-1.0)*pz))+((r21*x1575))+(((0.1363)*x1569))+((sj3*x1579)));
evalcond[6]=(((x1567*x1570))+(((-1.0)*cj5*r22*x1568))+((r21*x1571))+(((-1.0)*r20*x1580))+((sj5*x1569))+((sj3*x1565)));
evalcond[7]=((((-1.0)*cj5*r12*x1568))+((x1570*x1574))+((cj3*x1565))+((r11*x1571))+((r10*x1572))+(((-1.0)*r10*x1580)));
evalcond[8]=(((x1570*x1577))+(((-1.0)*r00*x1580))+(((-1.0)*cj5*r02*x1568))+(((-1.0)*x1566))+((r01*x1571))+((r00*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1581=(sj6*sj7);
IkReal x1582=((1.0)*cj7*sj6);
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(sj3,-1);
if(!x1583.valid){
continue;
}
if( IKabs(((x1583.value)*((((cj6*r22))+(((-1.0)*r20*x1582))+((r21*x1581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1581))+(((-1.0)*r00*x1582))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1583.value)*((((cj6*r22))+(((-1.0)*r20*x1582))+((r21*x1581))))))+IKsqr((((r01*x1581))+(((-1.0)*r00*x1582))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1583.value)*((((cj6*r22))+(((-1.0)*r20*x1582))+((r21*x1581))))), (((r01*x1581))+(((-1.0)*r00*x1582))+((cj6*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1584=IKcos(j4);
IkReal x1585=IKsin(j4);
IkReal x1586=(r21*sj7);
IkReal x1587=((1.0)*sj6);
IkReal x1588=(r20*sj7);
IkReal x1589=(cj5*cj6);
IkReal x1590=(cj7*sj5);
IkReal x1591=(sj5*sj7);
IkReal x1592=((1.0)*cj6);
IkReal x1593=(r11*sj7);
IkReal x1594=((0.1363)*cj7);
IkReal x1595=((0.1363)*sj7);
IkReal x1596=(r01*sj7);
IkReal x1597=(cj7*sj6);
IkReal x1598=((0.4)*x1585);
IkReal x1599=((1.0)*cj7*x1589);
evalcond[0]=(((r00*x1597))+(((-1.0)*r02*x1592))+x1584+(((-1.0)*x1587*x1596)));
evalcond[1]=((0.4)+((r00*x1595))+((r01*x1594))+(((0.4)*x1584))+(((-1.0)*px)));
evalcond[2]=(((sj3*x1585))+((r20*x1597))+(((-1.0)*r22*x1592))+(((-1.0)*x1586*x1587)));
evalcond[3]=(((cj3*x1585))+((r10*x1597))+(((-1.0)*x1587*x1593))+(((-1.0)*r12*x1592)));
evalcond[4]=((((0.1685)*sj3))+((r11*x1594))+(((-1.0)*py))+((cj3*x1598))+((r10*x1595)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((-1.0)*pz))+((r21*x1594))+(((0.1363)*x1588))+((sj3*x1598)));
evalcond[6]=(((sj3*x1584))+((x1586*x1589))+(((-1.0)*cj5*r22*x1587))+(((-1.0)*r20*x1599))+((r21*x1590))+((sj5*x1588)));
evalcond[7]=(((x1589*x1593))+((r11*x1590))+((cj3*x1584))+((r10*x1591))+(((-1.0)*cj5*r12*x1587))+(((-1.0)*r10*x1599)));
evalcond[8]=(((r00*x1591))+((r01*x1590))+((x1589*x1596))+(((-1.0)*cj5*r02*x1587))+(((-1.0)*r00*x1599))+(((-1.0)*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1600=IKsin(j4);
IkReal x1601=IKcos(j4);
IkReal x1602=(r21*sj7);
IkReal x1603=((1.0)*sj6);
IkReal x1604=(r20*sj7);
IkReal x1605=(cj5*cj6);
IkReal x1606=((1.0)*cj7);
IkReal x1607=(cj7*r01);
IkReal x1608=(r00*sj7);
IkReal x1609=((1.0)*cj6);
IkReal x1610=(r01*sj7);
IkReal x1611=(cj7*r21);
IkReal x1612=(cj7*sj6);
evalcond[0]=(((r20*x1612))+x1600+(((-1.0)*r22*x1609))+(((-1.0)*x1602*x1603)));
evalcond[1]=((0.1425)+(((0.4)*x1600))+(((0.1363)*x1604))+(((-1.0)*pz))+(((0.1363)*x1611)));
evalcond[2]=((-0.4)+(((-0.4)*x1601))+(((0.1363)*x1607))+(((0.1363)*x1608))+(((-1.0)*px)));
evalcond[3]=(((r00*x1612))+(((-1.0)*x1601))+(((-1.0)*x1603*x1610))+(((-1.0)*r02*x1609)));
evalcond[4]=(((sj5*x1611))+x1601+((sj5*x1604))+(((-1.0)*cj5*r22*x1603))+(((-1.0)*r20*x1605*x1606))+((x1602*x1605)));
evalcond[5]=((((-1.0)*cj5*r02*x1603))+x1600+((sj5*x1607))+((sj5*x1608))+((x1605*x1610))+(((-1.0)*r00*x1605*x1606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=((0.34075)*cj7);
IkReal x1614=((0.34075)*sj7);
if( IKabs(((0.35625)+((r20*x1614))+((r21*x1613))+(((-2.5)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r01*x1613))+((r00*x1614))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+((r20*x1614))+((r21*x1613))+(((-2.5)*pz))))+IKsqr(((-1.0)+((r01*x1613))+((r00*x1614))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+((r20*x1614))+((r21*x1613))+(((-2.5)*pz))), ((-1.0)+((r01*x1613))+((r00*x1614))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1615=IKsin(j4);
IkReal x1616=IKcos(j4);
IkReal x1617=(r21*sj7);
IkReal x1618=((1.0)*sj6);
IkReal x1619=(r20*sj7);
IkReal x1620=(cj5*cj6);
IkReal x1621=(cj7*r20);
IkReal x1622=(cj7*r01);
IkReal x1623=((1.0)*cj6);
IkReal x1624=(r00*sj7);
IkReal x1625=(r01*sj7);
IkReal x1626=(cj7*r21);
IkReal x1627=(cj7*r00);
IkReal x1628=((1.0)*x1616);
evalcond[0]=((0.1425)+(((-1.0)*pz))+(((0.1363)*x1626))+(((-0.4)*x1615))+(((0.1363)*x1619)));
evalcond[1]=((-0.4)+(((-1.0)*px))+(((0.1363)*x1624))+(((0.1363)*x1622))+(((-0.4)*x1616)));
evalcond[2]=((((-1.0)*x1615))+((sj6*x1621))+(((-1.0)*x1617*x1618))+(((-1.0)*r22*x1623)));
evalcond[3]=(((sj6*x1627))+(((-1.0)*x1628))+(((-1.0)*r02*x1623))+(((-1.0)*x1618*x1625)));
evalcond[4]=(((x1620*x1625))+((sj5*x1624))+((sj5*x1622))+(((-1.0)*cj5*r02*x1618))+x1615+(((-1.0)*x1620*x1627)));
evalcond[5]=(((sj5*x1619))+((sj5*x1626))+((x1617*x1620))+(((-1.0)*x1628))+(((-1.0)*x1620*x1621))+(((-1.0)*cj5*r22*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1629=((0.34075)*sj7);
IkReal x1630=((0.34075)*cj7);
if( IKabs((((r11*x1630))+(((-2.5)*py))+((r10*x1629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r00*x1629))+(((-2.5)*px))+((r01*x1630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1630))+(((-2.5)*py))+((r10*x1629))))+IKsqr(((-1.0)+((r00*x1629))+(((-2.5)*px))+((r01*x1630))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x1630))+(((-2.5)*py))+((r10*x1629))), ((-1.0)+((r00*x1629))+(((-2.5)*px))+((r01*x1630))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1631=IKsin(j4);
IkReal x1632=IKcos(j4);
IkReal x1633=(cj5*cj6);
IkReal x1634=((1.0)*cj7);
IkReal x1635=(r11*sj7);
IkReal x1636=(cj7*sj5);
IkReal x1637=((1.0)*r12);
IkReal x1638=((0.1363)*cj7);
IkReal x1639=(cj5*sj6);
IkReal x1640=((1.0)*r02);
IkReal x1641=(sj5*sj7);
IkReal x1642=((1.0)*sj6);
IkReal x1643=((0.1363)*sj7);
IkReal x1644=(r01*sj7);
IkReal x1645=(cj7*sj6);
IkReal x1646=((1.0)*x1632);
evalcond[0]=(((r10*x1643))+((r11*x1638))+(((-0.4)*x1631))+(((-1.0)*py)));
evalcond[1]=((-0.4)+(((-0.4)*x1632))+(((-1.0)*px))+((r00*x1643))+((r01*x1638)));
evalcond[2]=((((-1.0)*x1635*x1642))+((r10*x1645))+(((-1.0)*x1631))+(((-1.0)*cj6*x1637)));
evalcond[3]=((((-1.0)*x1642*x1644))+(((-1.0)*x1646))+((r00*x1645))+(((-1.0)*cj6*x1640)));
evalcond[4]=(x1631+(((-1.0)*x1639*x1640))+((r00*x1641))+((r01*x1636))+((x1633*x1644))+(((-1.0)*r00*x1633*x1634)));
evalcond[5]=((((-1.0)*r10*x1633*x1634))+((r10*x1641))+((r11*x1636))+(((-1.0)*x1637*x1639))+(((-1.0)*x1646))+((x1633*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1647=((0.34075)*cj7);
IkReal x1648=((0.34075)*sj7);
if( IKabs(((((-1.0)*r11*x1647))+(((-1.0)*r10*x1648))+(((2.5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*px))+((r00*x1648))+((r01*x1647)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1647))+(((-1.0)*r10*x1648))+(((2.5)*py))))+IKsqr(((-1.0)+(((-2.5)*px))+((r00*x1648))+((r01*x1647))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x1647))+(((-1.0)*r10*x1648))+(((2.5)*py))), ((-1.0)+(((-2.5)*px))+((r00*x1648))+((r01*x1647))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1649=IKsin(j4);
IkReal x1650=IKcos(j4);
IkReal x1651=((1.0)*cj6);
IkReal x1652=(cj5*cj7);
IkReal x1653=(cj7*sj5);
IkReal x1654=(r11*sj7);
IkReal x1655=(cj5*cj6);
IkReal x1656=(sj5*sj7);
IkReal x1657=((0.1363)*sj7);
IkReal x1658=((0.1363)*cj7);
IkReal x1659=((1.0)*sj6);
IkReal x1660=(r01*sj7);
IkReal x1661=(cj7*sj6);
IkReal x1662=(cj5*x1659);
evalcond[0]=(((r10*x1661))+(((-1.0)*x1654*x1659))+x1649+(((-1.0)*r12*x1651)));
evalcond[1]=(((r10*x1657))+((r11*x1658))+(((-1.0)*py))+(((0.4)*x1649)));
evalcond[2]=((-0.4)+(((-0.4)*x1650))+((r01*x1658))+((r00*x1657))+(((-1.0)*px)));
evalcond[3]=(((r00*x1661))+(((-1.0)*x1650))+(((-1.0)*r02*x1651))+(((-1.0)*x1659*x1660)));
evalcond[4]=(((x1654*x1655))+(((-1.0)*r10*x1651*x1652))+((r10*x1656))+x1650+(((-1.0)*r12*x1662))+((r11*x1653)));
evalcond[5]=(((x1655*x1660))+x1649+(((-1.0)*r00*x1651*x1652))+((r01*x1653))+((r00*x1656))+(((-1.0)*r02*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(cj3,-1);
if(!x1663.valid){
continue;
}
if( IKabs(((x1663.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1663.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1663.value)*(((((-1.0)*cj6*r12))+((cj7*r10*sj6))+(((-1.0)*r11*sj6*sj7))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1664=IKcos(j4);
IkReal x1665=IKsin(j4);
IkReal x1666=(r21*sj7);
IkReal x1667=((1.0)*sj6);
IkReal x1668=(r20*sj7);
IkReal x1669=(cj5*cj6);
IkReal x1670=((1.0)*cj3);
IkReal x1671=(cj7*r01);
IkReal x1672=((1.0)*cj6);
IkReal x1673=(sj5*sj7);
IkReal x1674=((0.1363)*cj7);
IkReal x1675=(r11*sj7);
IkReal x1676=((0.1363)*sj7);
IkReal x1677=(r01*sj7);
IkReal x1678=(cj7*sj5);
IkReal x1679=(cj7*sj6);
IkReal x1680=((0.4)*x1665);
IkReal x1681=((1.0)*cj7*x1669);
evalcond[0]=((-0.4)+((r00*x1676))+(((-0.4)*x1664))+(((-1.0)*px))+(((0.1363)*x1671)));
evalcond[1]=(((sj3*x1665))+((r20*x1679))+(((-1.0)*x1666*x1667))+(((-1.0)*r22*x1672)));
evalcond[2]=(((r00*x1679))+(((-1.0)*x1667*x1677))+(((-1.0)*r02*x1672))+(((-1.0)*x1664)));
evalcond[3]=((((-1.0)*x1667*x1675))+(((-1.0)*r12*x1672))+((r10*x1679))+(((-1.0)*x1665*x1670)));
evalcond[4]=((((-0.1685)*sj3))+(((-1.0)*py))+((r10*x1676))+(((-1.0)*cj3*x1680))+((r11*x1674)));
evalcond[5]=((0.1425)+((r21*x1674))+(((-0.1685)*cj3))+(((0.1363)*x1668))+(((-1.0)*pz))+((sj3*x1680)));
evalcond[6]=(((r00*x1673))+x1665+(((-1.0)*cj5*r02*x1667))+((x1669*x1677))+((sj5*x1671))+(((-1.0)*r00*x1681)));
evalcond[7]=(((r21*x1678))+(((-1.0)*r20*x1681))+((sj5*x1668))+((sj3*x1664))+((x1666*x1669))+(((-1.0)*cj5*r22*x1667)));
evalcond[8]=((((-1.0)*r10*x1681))+(((-1.0)*cj5*r12*x1667))+((x1669*x1675))+(((-1.0)*x1664*x1670))+((r10*x1673))+((r11*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1682=IKPowWithIntegerCheck(sj3,-1);
if(!x1682.valid){
continue;
}
if( IKabs(((x1682.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1682.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1682.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1683=IKcos(j4);
IkReal x1684=IKsin(j4);
IkReal x1685=(r21*sj7);
IkReal x1686=((1.0)*sj6);
IkReal x1687=(r20*sj7);
IkReal x1688=(cj5*cj6);
IkReal x1689=((1.0)*cj3);
IkReal x1690=(cj7*r01);
IkReal x1691=((1.0)*cj6);
IkReal x1692=(sj5*sj7);
IkReal x1693=((0.1363)*cj7);
IkReal x1694=(r11*sj7);
IkReal x1695=((0.1363)*sj7);
IkReal x1696=(r01*sj7);
IkReal x1697=(cj7*sj5);
IkReal x1698=(cj7*sj6);
IkReal x1699=((0.4)*x1684);
IkReal x1700=((1.0)*cj7*x1688);
evalcond[0]=((-0.4)+((r00*x1695))+(((-1.0)*px))+(((0.1363)*x1690))+(((-0.4)*x1683)));
evalcond[1]=(((r20*x1698))+(((-1.0)*x1685*x1686))+(((-1.0)*r22*x1691))+((sj3*x1684)));
evalcond[2]=((((-1.0)*x1686*x1696))+((r00*x1698))+(((-1.0)*x1683))+(((-1.0)*r02*x1691)));
evalcond[3]=((((-1.0)*x1686*x1694))+((r10*x1698))+(((-1.0)*r12*x1691))+(((-1.0)*x1684*x1689)));
evalcond[4]=(((r10*x1695))+(((-0.1685)*sj3))+((r11*x1693))+(((-1.0)*py))+(((-1.0)*cj3*x1699)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((r21*x1693))+((sj3*x1699))+(((-1.0)*pz))+(((0.1363)*x1687)));
evalcond[6]=(((r00*x1692))+x1684+(((-1.0)*cj5*r02*x1686))+((x1688*x1696))+(((-1.0)*r00*x1700))+((sj5*x1690)));
evalcond[7]=(((sj5*x1687))+((r21*x1697))+(((-1.0)*r20*x1700))+(((-1.0)*cj5*r22*x1686))+((x1685*x1688))+((sj3*x1683)));
evalcond[8]=(((r10*x1692))+((r11*x1697))+(((-1.0)*x1683*x1689))+(((-1.0)*r10*x1700))+((x1688*x1694))+(((-1.0)*cj5*r12*x1686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1701=(sj6*sj7);
IkReal x1702=((1.0)*cj7*sj6);
if( IKabs(((((-1.0)*r20*x1702))+((r21*x1701))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1701))+(((-1.0)*r10*x1702))+((cj6*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1702))+((r21*x1701))+((cj6*r22))))+IKsqr((((r11*x1701))+(((-1.0)*r10*x1702))+((cj6*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*x1702))+((r21*x1701))+((cj6*r22))), (((r11*x1701))+(((-1.0)*r10*x1702))+((cj6*r12))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1703=IKsin(j4);
IkReal x1704=IKcos(j4);
IkReal x1705=(r21*sj7);
IkReal x1706=((1.0)*sj6);
IkReal x1707=(r20*sj7);
IkReal x1708=(cj5*cj6);
IkReal x1709=(cj7*r11);
IkReal x1710=((1.0)*cj6);
IkReal x1711=(r11*sj7);
IkReal x1712=(r10*sj7);
IkReal x1713=(cj7*sj6);
IkReal x1714=(cj7*r21);
IkReal x1715=((1.0)*cj7*x1708);
evalcond[0]=(x1703+((r20*x1713))+(((-1.0)*x1705*x1706))+(((-1.0)*r22*x1710)));
evalcond[1]=(x1704+(((-1.0)*x1706*x1711))+((r10*x1713))+(((-1.0)*r12*x1710)));
evalcond[2]=((0.1425)+(((0.4)*x1703))+(((0.1363)*x1707))+(((-1.0)*pz))+(((0.1363)*x1714)));
evalcond[3]=((0.4)+(((0.4)*x1704))+(((0.1363)*x1709))+(((-1.0)*py))+(((0.1363)*x1712)));
evalcond[4]=(x1704+((sj5*x1707))+((x1705*x1708))+(((-1.0)*r20*x1715))+((sj5*x1714))+(((-1.0)*cj5*r22*x1706)));
evalcond[5]=((((-1.0)*cj5*r12*x1706))+(((-1.0)*x1703))+((sj5*x1709))+(((-1.0)*r10*x1715))+((sj5*x1712))+((x1708*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((0.34075)*r20*sj7))+(((-2.5)*pz))+(((0.34075)*cj7*r21))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1716=IKcos(j4);
IkReal x1717=IKsin(j4);
IkReal x1718=(r21*sj7);
IkReal x1719=((1.0)*sj6);
IkReal x1720=(r20*sj7);
IkReal x1721=(cj5*cj6);
IkReal x1722=(cj7*r11);
IkReal x1723=((1.0)*cj6);
IkReal x1724=(r11*sj7);
IkReal x1725=(r10*sj7);
IkReal x1726=(cj7*r21);
IkReal x1727=(cj7*sj6);
IkReal x1728=((1.0)*x1717);
IkReal x1729=((1.0)*cj7*x1721);
evalcond[0]=(x1716+((r10*x1727))+(((-1.0)*r12*x1723))+(((-1.0)*x1719*x1724)));
evalcond[1]=((0.1425)+(((-0.4)*x1717))+(((0.1363)*x1726))+(((0.1363)*x1720))+(((-1.0)*pz)));
evalcond[2]=((0.4)+(((0.1363)*x1722))+(((0.1363)*x1725))+(((-1.0)*py))+(((0.4)*x1716)));
evalcond[3]=((((-1.0)*r22*x1723))+(((-1.0)*x1718*x1719))+(((-1.0)*x1728))+((r20*x1727)));
evalcond[4]=(((sj5*x1726))+((sj5*x1720))+(((-1.0)*x1716))+((x1718*x1721))+(((-1.0)*cj5*r22*x1719))+(((-1.0)*r20*x1729)));
evalcond[5]=((((-1.0)*cj5*r12*x1719))+((sj5*x1722))+((sj5*x1725))+(((-1.0)*r10*x1729))+((x1721*x1724))+(((-1.0)*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.34075)*r00*sj7))+(((0.34075)*cj7*r01))+(((-2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1730=IKcos(j4);
IkReal x1731=IKsin(j4);
IkReal x1732=((1.0)*cj6);
IkReal x1733=(cj5*cj7);
IkReal x1734=(cj7*sj5);
IkReal x1735=(r11*sj7);
IkReal x1736=(cj5*cj6);
IkReal x1737=(sj5*sj7);
IkReal x1738=((1.0)*sj6);
IkReal x1739=((0.1363)*cj7);
IkReal x1740=((0.1363)*sj7);
IkReal x1741=(r01*sj7);
IkReal x1742=(cj7*sj6);
IkReal x1743=((1.0)*x1731);
IkReal x1744=(cj5*x1738);
evalcond[0]=(x1730+(((-1.0)*r12*x1732))+(((-1.0)*x1735*x1738))+((r10*x1742)));
evalcond[1]=(((r01*x1739))+(((-1.0)*px))+((r00*x1740))+(((-0.4)*x1731)));
evalcond[2]=((0.4)+(((0.4)*x1730))+(((-1.0)*py))+((r11*x1739))+((r10*x1740)));
evalcond[3]=((((-1.0)*x1738*x1741))+(((-1.0)*x1743))+((r00*x1742))+(((-1.0)*r02*x1732)));
evalcond[4]=((((-1.0)*r12*x1744))+((r10*x1737))+(((-1.0)*r10*x1732*x1733))+((x1735*x1736))+(((-1.0)*x1743))+((r11*x1734)));
evalcond[5]=(((r01*x1734))+((x1736*x1741))+((r00*x1737))+(((-1.0)*r00*x1732*x1733))+(((-1.0)*x1730))+(((-1.0)*r02*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))))+IKsqr((((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.34075)*cj7*r01))+(((-0.34075)*r00*sj7))+(((2.5)*px))), (((r11*sj6*sj7))+((cj6*r12))+(((-1.0)*cj7*r10*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1745=IKsin(j4);
IkReal x1746=IKcos(j4);
IkReal x1747=((1.0)*cj6);
IkReal x1748=(cj5*cj7);
IkReal x1749=(cj7*sj5);
IkReal x1750=(r11*sj7);
IkReal x1751=(cj5*cj6);
IkReal x1752=(sj5*sj7);
IkReal x1753=((1.0)*sj6);
IkReal x1754=((0.1363)*cj7);
IkReal x1755=((0.1363)*sj7);
IkReal x1756=(r01*sj7);
IkReal x1757=(cj7*sj6);
IkReal x1758=(cj5*x1753);
evalcond[0]=((((-1.0)*r12*x1747))+x1746+(((-1.0)*x1750*x1753))+((r10*x1757)));
evalcond[1]=(x1745+(((-1.0)*x1753*x1756))+((r00*x1757))+(((-1.0)*r02*x1747)));
evalcond[2]=((((-1.0)*px))+(((0.4)*x1745))+((r01*x1754))+((r00*x1755)));
evalcond[3]=((0.4)+(((-1.0)*py))+(((0.4)*x1746))+((r11*x1754))+((r10*x1755)));
evalcond[4]=(x1746+(((-1.0)*r00*x1747*x1748))+((r01*x1749))+((r00*x1752))+(((-1.0)*r02*x1758))+((x1751*x1756)));
evalcond[5]=((((-1.0)*r10*x1747*x1748))+(((-1.0)*r12*x1758))+((x1750*x1751))+(((-1.0)*x1745))+((r11*x1749))+((r10*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1759=(sj6*sj7);
IkReal x1760=(cj7*sj6);
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(cj3,-1);
if(!x1761.valid){
continue;
}
if( IKabs(((x1761.value)*(((((-1.0)*r01*x1759))+((r00*x1760))+(((-1.0)*cj6*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1760))+((cj6*r12))+((r11*x1759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1761.value)*(((((-1.0)*r01*x1759))+((r00*x1760))+(((-1.0)*cj6*r02))))))+IKsqr(((((-1.0)*r10*x1760))+((cj6*r12))+((r11*x1759))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1761.value)*(((((-1.0)*r01*x1759))+((r00*x1760))+(((-1.0)*cj6*r02))))), ((((-1.0)*r10*x1760))+((cj6*r12))+((r11*x1759))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1762=IKcos(j4);
IkReal x1763=IKsin(j4);
IkReal x1764=(r21*sj7);
IkReal x1765=((1.0)*sj6);
IkReal x1766=(r20*sj7);
IkReal x1767=(cj5*cj6);
IkReal x1768=((1.0)*cj3);
IkReal x1769=(cj7*r01);
IkReal x1770=(sj5*sj7);
IkReal x1771=((1.0)*cj6);
IkReal x1772=(r11*sj7);
IkReal x1773=((0.1363)*cj7);
IkReal x1774=((0.1363)*sj7);
IkReal x1775=(r01*sj7);
IkReal x1776=(cj7*sj5);
IkReal x1777=(cj7*sj6);
IkReal x1778=((0.4)*x1763);
IkReal x1779=((1.0)*cj7*x1767);
evalcond[0]=(x1762+((r10*x1777))+(((-1.0)*x1765*x1772))+(((-1.0)*r12*x1771)));
evalcond[1]=((0.4)+(((0.4)*x1762))+((r11*x1773))+((r10*x1774))+(((-1.0)*py)));
evalcond[2]=(((sj3*x1763))+((r20*x1777))+(((-1.0)*x1764*x1765))+(((-1.0)*r22*x1771)));
evalcond[3]=(((r00*x1777))+(((-1.0)*x1763*x1768))+(((-1.0)*r02*x1771))+(((-1.0)*x1765*x1775)));
evalcond[4]=((((-1.0)*cj3*x1778))+(((-0.1685)*sj3))+(((0.1363)*x1769))+((r00*x1774))+(((-1.0)*px)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1766))+(((-1.0)*pz))+((sj3*x1778))+((r21*x1773)));
evalcond[6]=(((sj3*x1762))+(((-1.0)*cj5*r22*x1765))+(((-1.0)*r20*x1779))+((sj5*x1766))+((x1764*x1767))+((r21*x1776)));
evalcond[7]=(((x1767*x1772))+(((-1.0)*x1763))+((r11*x1776))+(((-1.0)*cj5*r12*x1765))+(((-1.0)*r10*x1779))+((r10*x1770)));
evalcond[8]=((((-1.0)*x1762*x1768))+((x1767*x1775))+((sj5*x1769))+((r00*x1770))+(((-1.0)*cj5*r02*x1765))+(((-1.0)*r00*x1779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1780=(sj6*sj7);
IkReal x1781=((1.0)*cj7*sj6);
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(sj3,-1);
if(!x1782.valid){
continue;
}
if( IKabs(((x1782.value)*((((r21*x1780))+((cj6*r22))+(((-1.0)*r20*x1781)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1781))+((cj6*r12))+((r11*x1780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1782.value)*((((r21*x1780))+((cj6*r22))+(((-1.0)*r20*x1781))))))+IKsqr(((((-1.0)*r10*x1781))+((cj6*r12))+((r11*x1780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1782.value)*((((r21*x1780))+((cj6*r22))+(((-1.0)*r20*x1781))))), ((((-1.0)*r10*x1781))+((cj6*r12))+((r11*x1780))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1783=IKcos(j4);
IkReal x1784=IKsin(j4);
IkReal x1785=(r21*sj7);
IkReal x1786=((1.0)*sj6);
IkReal x1787=(r20*sj7);
IkReal x1788=(cj5*cj6);
IkReal x1789=((1.0)*cj3);
IkReal x1790=(cj7*r01);
IkReal x1791=(sj5*sj7);
IkReal x1792=((1.0)*cj6);
IkReal x1793=(r11*sj7);
IkReal x1794=((0.1363)*cj7);
IkReal x1795=((0.1363)*sj7);
IkReal x1796=(r01*sj7);
IkReal x1797=(cj7*sj5);
IkReal x1798=(cj7*sj6);
IkReal x1799=((0.4)*x1784);
IkReal x1800=((1.0)*cj7*x1788);
evalcond[0]=(((r10*x1798))+x1783+(((-1.0)*r12*x1792))+(((-1.0)*x1786*x1793)));
evalcond[1]=((0.4)+((r10*x1795))+(((-1.0)*py))+(((0.4)*x1783))+((r11*x1794)));
evalcond[2]=(((sj3*x1784))+(((-1.0)*r22*x1792))+(((-1.0)*x1785*x1786))+((r20*x1798)));
evalcond[3]=(((r00*x1798))+(((-1.0)*x1786*x1796))+(((-1.0)*x1784*x1789))+(((-1.0)*r02*x1792)));
evalcond[4]=(((r00*x1795))+(((-0.1685)*sj3))+(((-1.0)*px))+(((0.1363)*x1790))+(((-1.0)*cj3*x1799)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1799))+((r21*x1794))+(((-1.0)*pz))+(((0.1363)*x1787)));
evalcond[6]=((((-1.0)*r20*x1800))+((sj3*x1783))+(((-1.0)*cj5*r22*x1786))+((r21*x1797))+((x1785*x1788))+((sj5*x1787)));
evalcond[7]=((((-1.0)*r10*x1800))+((r10*x1791))+(((-1.0)*x1784))+((r11*x1797))+((x1788*x1793))+(((-1.0)*cj5*r12*x1786)));
evalcond[8]=((((-1.0)*r00*x1800))+((r00*x1791))+(((-1.0)*x1783*x1789))+(((-1.0)*cj5*r02*x1786))+((x1788*x1796))+((sj5*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1801=IKsin(j4);
IkReal x1802=IKcos(j4);
IkReal x1803=(r21*sj7);
IkReal x1804=((1.0)*sj6);
IkReal x1805=(r20*sj7);
IkReal x1806=(cj5*cj6);
IkReal x1807=(cj7*r11);
IkReal x1808=((1.0)*cj6);
IkReal x1809=(r11*sj7);
IkReal x1810=(r10*sj7);
IkReal x1811=(cj7*sj6);
IkReal x1812=(cj7*r21);
IkReal x1813=((1.0)*cj7*x1806);
evalcond[0]=(((r20*x1811))+x1801+(((-1.0)*r22*x1808))+(((-1.0)*x1803*x1804)));
evalcond[1]=((0.1425)+(((0.1363)*x1805))+(((0.1363)*x1812))+(((-1.0)*pz))+(((0.4)*x1801)));
evalcond[2]=((-0.4)+(((0.1363)*x1807))+(((0.1363)*x1810))+(((-0.4)*x1802))+(((-1.0)*py)));
evalcond[3]=((((-1.0)*x1804*x1809))+((r10*x1811))+(((-1.0)*r12*x1808))+(((-1.0)*x1802)));
evalcond[4]=(((sj5*x1812))+((sj5*x1805))+((x1803*x1806))+x1802+(((-1.0)*cj5*r22*x1804))+(((-1.0)*r20*x1813)));
evalcond[5]=(((x1806*x1809))+((sj5*x1810))+((sj5*x1807))+(((-1.0)*r10*x1813))+(((-1.0)*cj5*r12*x1804))+x1801);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1814=((0.34075)*cj7);
IkReal x1815=((0.34075)*sj7);
if( IKabs(((0.35625)+(((-2.5)*pz))+((r20*x1815))+((r21*x1814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r11*x1814))+((r10*x1815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.35625)+(((-2.5)*pz))+((r20*x1815))+((r21*x1814))))+IKsqr(((-1.0)+(((-2.5)*py))+((r11*x1814))+((r10*x1815))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.35625)+(((-2.5)*pz))+((r20*x1815))+((r21*x1814))), ((-1.0)+(((-2.5)*py))+((r11*x1814))+((r10*x1815))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1816=IKsin(j4);
IkReal x1817=IKcos(j4);
IkReal x1818=(r21*sj7);
IkReal x1819=((1.0)*sj6);
IkReal x1820=(r20*sj7);
IkReal x1821=(cj5*cj6);
IkReal x1822=(cj7*r11);
IkReal x1823=((1.0)*cj6);
IkReal x1824=(r11*sj7);
IkReal x1825=(r10*sj7);
IkReal x1826=(cj7*r21);
IkReal x1827=(cj7*sj6);
IkReal x1828=((1.0)*x1817);
IkReal x1829=((1.0)*cj7*x1821);
evalcond[0]=((0.1425)+(((-0.4)*x1816))+(((-1.0)*pz))+(((0.1363)*x1820))+(((0.1363)*x1826)));
evalcond[1]=((-0.4)+(((-0.4)*x1817))+(((-1.0)*py))+(((0.1363)*x1825))+(((0.1363)*x1822)));
evalcond[2]=((((-1.0)*r22*x1823))+(((-1.0)*x1818*x1819))+(((-1.0)*x1816))+((r20*x1827)));
evalcond[3]=((((-1.0)*x1828))+((r10*x1827))+(((-1.0)*x1819*x1824))+(((-1.0)*r12*x1823)));
evalcond[4]=(((x1821*x1824))+x1816+(((-1.0)*cj5*r12*x1819))+(((-1.0)*r10*x1829))+((sj5*x1825))+((sj5*x1822)));
evalcond[5]=((((-1.0)*x1828))+((x1818*x1821))+(((-1.0)*cj5*r22*x1819))+(((-1.0)*r20*x1829))+((sj5*x1826))+((sj5*x1820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1830=((0.34075)*sj7);
IkReal x1831=((0.34075)*cj7);
if( IKabs(((((-1.0)*r00*x1830))+(((-1.0)*r01*x1831))+(((2.5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+((r10*x1830))+(((-2.5)*py))+((r11*x1831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1830))+(((-1.0)*r01*x1831))+(((2.5)*px))))+IKsqr(((-1.0)+((r10*x1830))+(((-2.5)*py))+((r11*x1831))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x1830))+(((-1.0)*r01*x1831))+(((2.5)*px))), ((-1.0)+((r10*x1830))+(((-2.5)*py))+((r11*x1831))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1832=IKsin(j4);
IkReal x1833=IKcos(j4);
IkReal x1834=((1.0)*cj6);
IkReal x1835=(cj5*cj7);
IkReal x1836=(cj7*sj5);
IkReal x1837=(r11*sj7);
IkReal x1838=(cj5*cj6);
IkReal x1839=(sj5*sj7);
IkReal x1840=((1.0)*sj6);
IkReal x1841=((0.1363)*cj7);
IkReal x1842=((0.1363)*sj7);
IkReal x1843=(r01*sj7);
IkReal x1844=(cj7*sj6);
IkReal x1845=(cj5*x1840);
evalcond[0]=(((r00*x1844))+x1832+(((-1.0)*x1840*x1843))+(((-1.0)*r02*x1834)));
evalcond[1]=((((0.4)*x1832))+(((-1.0)*px))+((r00*x1842))+((r01*x1841)));
evalcond[2]=((-0.4)+(((-0.4)*x1833))+(((-1.0)*py))+((r10*x1842))+((r11*x1841)));
evalcond[3]=((((-1.0)*x1833))+((r10*x1844))+(((-1.0)*r12*x1834))+(((-1.0)*x1837*x1840)));
evalcond[4]=(((r10*x1839))+(((-1.0)*r10*x1834*x1835))+((r11*x1836))+(((-1.0)*r12*x1845))+x1832+((x1837*x1838)));
evalcond[5]=(((r01*x1836))+((x1838*x1843))+(((-1.0)*r02*x1845))+x1833+(((-1.0)*r00*x1834*x1835))+((r00*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1846=((0.34075)*sj7);
IkReal x1847=((0.34075)*cj7);
if( IKabs(((((-2.5)*px))+((r00*x1846))+((r01*x1847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((-2.5)*py))+((r10*x1846))+((r11*x1847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.5)*px))+((r00*x1846))+((r01*x1847))))+IKsqr(((-1.0)+(((-2.5)*py))+((r10*x1846))+((r11*x1847))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.5)*px))+((r00*x1846))+((r01*x1847))), ((-1.0)+(((-2.5)*py))+((r10*x1846))+((r11*x1847))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1848=IKcos(j4);
IkReal x1849=IKsin(j4);
IkReal x1850=((1.0)*cj6);
IkReal x1851=(cj5*cj7);
IkReal x1852=(cj7*sj5);
IkReal x1853=(sj5*sj7);
IkReal x1854=(r11*sj7);
IkReal x1855=(cj5*cj6);
IkReal x1856=((0.1363)*cj7);
IkReal x1857=((1.0)*sj6);
IkReal x1858=((0.1363)*sj7);
IkReal x1859=(r01*sj7);
IkReal x1860=(cj7*sj6);
IkReal x1861=((1.0)*x1848);
IkReal x1862=(cj5*x1857);
evalcond[0]=(((r01*x1856))+((r00*x1858))+(((-1.0)*px))+(((-0.4)*x1849)));
evalcond[1]=((-0.4)+((r10*x1858))+(((-1.0)*py))+(((-0.4)*x1848))+((r11*x1856)));
evalcond[2]=(((r10*x1860))+(((-1.0)*r12*x1850))+(((-1.0)*x1861))+(((-1.0)*x1854*x1857)));
evalcond[3]=((((-1.0)*x1857*x1859))+(((-1.0)*r02*x1850))+(((-1.0)*x1849))+((r00*x1860)));
evalcond[4]=(((r10*x1853))+(((-1.0)*r10*x1850*x1851))+((x1854*x1855))+(((-1.0)*r12*x1862))+x1849+((r11*x1852)));
evalcond[5]=((((-1.0)*r02*x1862))+((r01*x1852))+((r00*x1853))+(((-1.0)*r00*x1850*x1851))+((x1855*x1859))+(((-1.0)*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(cj3,-1);
if(!x1863.valid){
continue;
}
if( IKabs(((x1863.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1863.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1863.value)*(((((-1.0)*cj7*r00*sj6))+((cj6*r02))+((r01*sj6*sj7))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1864=IKcos(j4);
IkReal x1865=IKsin(j4);
IkReal x1866=(r21*sj7);
IkReal x1867=((1.0)*sj6);
IkReal x1868=(r20*sj7);
IkReal x1869=(cj5*cj6);
IkReal x1870=(cj7*sj5);
IkReal x1871=(sj5*sj7);
IkReal x1872=((1.0)*cj6);
IkReal x1873=(r11*sj7);
IkReal x1874=((0.1363)*cj7);
IkReal x1875=((0.1363)*sj7);
IkReal x1876=(r01*sj7);
IkReal x1877=(cj7*sj6);
IkReal x1878=((0.4)*x1865);
IkReal x1879=((1.0)*cj7*x1869);
evalcond[0]=((-0.4)+(((-1.0)*py))+((r10*x1875))+(((-0.4)*x1864))+((r11*x1874)));
evalcond[1]=((((-1.0)*r22*x1872))+(((-1.0)*x1866*x1867))+((r20*x1877))+((sj3*x1865)));
evalcond[2]=((((-1.0)*x1867*x1873))+(((-1.0)*r12*x1872))+((r10*x1877))+(((-1.0)*x1864)));
evalcond[3]=(((cj3*x1865))+(((-1.0)*r02*x1872))+(((-1.0)*x1867*x1876))+((r00*x1877)));
evalcond[4]=((((0.1685)*sj3))+((cj3*x1878))+((r01*x1874))+(((-1.0)*px))+((r00*x1875)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+(((0.1363)*x1868))+((sj3*x1878))+(((-1.0)*pz))+((r21*x1874)));
evalcond[6]=((((-1.0)*cj5*r12*x1867))+(((-1.0)*r10*x1879))+x1865+((r10*x1871))+((x1869*x1873))+((r11*x1870)));
evalcond[7]=((((-1.0)*cj5*r22*x1867))+((x1866*x1869))+((sj5*x1868))+((sj3*x1864))+((r21*x1870))+(((-1.0)*r20*x1879)));
evalcond[8]=(((cj3*x1864))+(((-1.0)*r00*x1879))+(((-1.0)*cj5*r02*x1867))+((r01*x1870))+((r00*x1871))+((x1869*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1880=IKPowWithIntegerCheck(sj3,-1);
if(!x1880.valid){
continue;
}
if( IKabs(((x1880.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1880.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))))+IKsqr(((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1880.value)*((((r21*sj6*sj7))+(((-1.0)*cj7*r20*sj6))+((cj6*r22))))), ((-1.0)+(((0.34075)*cj7*r11))+(((-2.5)*py))+(((0.34075)*r10*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1881=IKcos(j4);
IkReal x1882=IKsin(j4);
IkReal x1883=(r21*sj7);
IkReal x1884=((1.0)*sj6);
IkReal x1885=(r20*sj7);
IkReal x1886=(cj5*cj6);
IkReal x1887=(cj7*sj5);
IkReal x1888=(sj5*sj7);
IkReal x1889=((1.0)*cj6);
IkReal x1890=(r11*sj7);
IkReal x1891=((0.1363)*cj7);
IkReal x1892=((0.1363)*sj7);
IkReal x1893=(r01*sj7);
IkReal x1894=(cj7*sj6);
IkReal x1895=((0.4)*x1882);
IkReal x1896=((1.0)*cj7*x1886);
evalcond[0]=((-0.4)+((r11*x1891))+((r10*x1892))+(((-1.0)*py))+(((-0.4)*x1881)));
evalcond[1]=((((-1.0)*x1883*x1884))+((r20*x1894))+(((-1.0)*r22*x1889))+((sj3*x1882)));
evalcond[2]=((((-1.0)*r12*x1889))+((r10*x1894))+(((-1.0)*x1881))+(((-1.0)*x1884*x1890)));
evalcond[3]=(((r00*x1894))+(((-1.0)*r02*x1889))+((cj3*x1882))+(((-1.0)*x1884*x1893)));
evalcond[4]=((((0.1685)*sj3))+((r01*x1891))+((r00*x1892))+(((-1.0)*px))+((cj3*x1895)));
evalcond[5]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1895))+(((0.1363)*x1885))+(((-1.0)*pz))+((r21*x1891)));
evalcond[6]=(((x1886*x1890))+(((-1.0)*r10*x1896))+((r10*x1888))+x1882+(((-1.0)*cj5*r12*x1884))+((r11*x1887)));
evalcond[7]=(((r21*x1887))+((sj5*x1885))+((x1883*x1886))+(((-1.0)*cj5*r22*x1884))+(((-1.0)*r20*x1896))+((sj3*x1881)));
evalcond[8]=(((x1886*x1893))+((r00*x1888))+((r01*x1887))+((cj3*x1881))+(((-1.0)*cj5*r02*x1884))+(((-1.0)*r00*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(sj3,-1);
if(!x1903.valid){
continue;
}
IkReal x1897=x1903.value;
IkReal x1898=((1.0)*sj6);
IkReal x1899=(r21*sj7);
IkReal x1900=(cj2*cj3);
IkReal x1901=(cj6*r22);
IkReal x1902=(cj7*r20);
CheckValue<IkReal> x1904=IKPowWithIntegerCheck(sj2,-1);
if(!x1904.valid){
continue;
}
if( IKabs((x1897*((((sj6*x1899))+(((-1.0)*x1898*x1902))+x1901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1897*(x1904.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*cj7*r10*sj3*x1898))+((sj6*x1900*x1902))+(((-1.0)*x1898*x1899*x1900))+((cj6*r12*sj3))+(((-1.0)*x1900*x1901)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1897*((((sj6*x1899))+(((-1.0)*x1898*x1902))+x1901))))+IKsqr((x1897*(x1904.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*cj7*r10*sj3*x1898))+((sj6*x1900*x1902))+(((-1.0)*x1898*x1899*x1900))+((cj6*r12*sj3))+(((-1.0)*x1900*x1901))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1897*((((sj6*x1899))+(((-1.0)*x1898*x1902))+x1901))), (x1897*(x1904.value)*((((r11*sj3*sj6*sj7))+(((-1.0)*cj7*r10*sj3*x1898))+((sj6*x1900*x1902))+(((-1.0)*x1898*x1899*x1900))+((cj6*r12*sj3))+(((-1.0)*x1900*x1901))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1905=IKsin(j4);
IkReal x1906=IKcos(j4);
IkReal x1907=(r21*sj7);
IkReal x1908=((1.0)*sj6);
IkReal x1909=(r20*sj7);
IkReal x1910=(cj5*cj6);
IkReal x1911=(cj7*sj5);
IkReal x1912=((0.1685)*sj3);
IkReal x1913=(cj2*cj3);
IkReal x1914=(sj5*sj7);
IkReal x1915=((1.0)*cj6);
IkReal x1916=(r11*sj7);
IkReal x1917=((0.1363)*cj7);
IkReal x1918=((0.1363)*sj7);
IkReal x1919=(cj3*sj2);
IkReal x1920=(r01*sj7);
IkReal x1921=(cj7*sj6);
IkReal x1922=((0.4)*x1906);
IkReal x1923=((0.4)*x1905);
IkReal x1924=((1.0)*x1905);
IkReal x1925=((1.0)*cj7*x1910);
evalcond[0]=((((-1.0)*x1907*x1908))+(((-1.0)*r22*x1915))+((r20*x1921))+((sj3*x1905)));
evalcond[1]=((0.1425)+(((-0.1685)*cj3))+(((-1.0)*pz))+((sj3*x1923))+((r21*x1917))+(((0.1363)*x1909)));
evalcond[2]=(((x1905*x1913))+(((-1.0)*r12*x1915))+((r10*x1921))+((sj2*x1906))+(((-1.0)*x1908*x1916)));
evalcond[3]=(((r00*x1921))+(((-1.0)*r02*x1915))+(((-1.0)*x1908*x1920))+((cj2*x1906))+(((-1.0)*x1919*x1924)));
evalcond[4]=((((-1.0)*cj5*r22*x1908))+((x1907*x1910))+(((-1.0)*r20*x1925))+((r21*x1911))+((sj5*x1909))+((sj3*x1906)));
evalcond[5]=(((r00*x1918))+(((0.4)*cj2))+((r01*x1917))+(((-1.0)*px))+((cj2*x1922))+(((-1.0)*x1919*x1923))+(((-1.0)*sj2*x1912)));
evalcond[6]=(((r10*x1918))+((cj2*x1912))+((r11*x1917))+((sj2*x1922))+(((-1.0)*py))+(((0.4)*sj2))+((x1913*x1923)));
evalcond[7]=(((r10*x1914))+((x1910*x1916))+((r11*x1911))+(((-1.0)*cj5*r12*x1908))+((x1906*x1913))+(((-1.0)*sj2*x1924))+(((-1.0)*r10*x1925)));
evalcond[8]=((((-1.0)*x1906*x1919))+((r00*x1914))+((r01*x1911))+(((-1.0)*r00*x1925))+(((-1.0)*cj5*r02*x1908))+((x1910*x1920))+(((-1.0)*cj2*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(sj3,-1);
if(!x1931.valid){
continue;
}
IkReal x1926=x1931.value;
IkReal x1927=(cj3*sj2);
IkReal x1928=(cj6*r22);
IkReal x1929=(r21*sj6*sj7);
IkReal x1930=((1.0)*cj7*sj6);
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(cj2,-1);
if(!x1932.valid){
continue;
}
if( IKabs((x1926*(((((-1.0)*r20*x1930))+x1928+x1929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1926*(x1932.value)*(((((-1.0)*r20*x1927*x1930))+((x1927*x1929))+((x1927*x1928))+(((-1.0)*r00*sj3*x1930))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1926*(((((-1.0)*r20*x1930))+x1928+x1929))))+IKsqr((x1926*(x1932.value)*(((((-1.0)*r20*x1927*x1930))+((x1927*x1929))+((x1927*x1928))+(((-1.0)*r00*sj3*x1930))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1926*(((((-1.0)*r20*x1930))+x1928+x1929))), (x1926*(x1932.value)*(((((-1.0)*r20*x1927*x1930))+((x1927*x1929))+((x1927*x1928))+(((-1.0)*r00*sj3*x1930))+((cj6*r02*sj3))+((r01*sj3*sj6*sj7))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1933=IKsin(j4);
IkReal x1934=IKcos(j4);
IkReal x1935=(r21*sj7);
IkReal x1936=((1.0)*sj6);
IkReal x1937=(r20*sj7);
IkReal x1938=(cj5*cj6);
IkReal x1939=(cj7*sj5);
IkReal x1940=((0.1685)*sj3);
IkReal x1941=(cj2*cj3);
IkReal x1942=(sj5*sj7);
IkReal x1943=((1.0)*cj6);
IkReal x1944=(r11*sj7);
IkReal x1945=((0.1363)*cj7);
IkReal x1946=((0.1363)*sj7);
IkReal x1947=(cj3*sj2);
IkReal x1948=(r01*sj7);
IkReal x1949=(cj7*sj6);
IkReal x1950=((0.4)*x1934);
IkReal x1951=((0.4)*x1933);
IkReal x1952=((1.0)*x1933);
IkReal x1953=((1.0)*cj7*x1938);
evalcond[0]=((((-1.0)*r22*x1943))+((r20*x1949))+(((-1.0)*x1935*x1936))+((sj3*x1933)));
evalcond[1]=((0.1425)+(((-0.1685)*cj3))+((sj3*x1951))+(((-1.0)*pz))+((r21*x1945))+(((0.1363)*x1937)));
evalcond[2]=(((sj2*x1934))+((r10*x1949))+(((-1.0)*r12*x1943))+(((-1.0)*x1936*x1944))+((x1933*x1941)));
evalcond[3]=((((-1.0)*r02*x1943))+(((-1.0)*x1947*x1952))+((cj2*x1934))+((r00*x1949))+(((-1.0)*x1936*x1948)));
evalcond[4]=(((r21*x1939))+((x1935*x1938))+((sj5*x1937))+(((-1.0)*cj5*r22*x1936))+((sj3*x1934))+(((-1.0)*r20*x1953)));
evalcond[5]=((((-1.0)*sj2*x1940))+((cj2*x1950))+(((0.4)*cj2))+(((-1.0)*x1947*x1951))+(((-1.0)*px))+((r00*x1946))+((r01*x1945)));
evalcond[6]=(((sj2*x1950))+((r11*x1945))+((cj2*x1940))+((r10*x1946))+((x1941*x1951))+(((-1.0)*py))+(((0.4)*sj2)));
evalcond[7]=(((x1938*x1944))+(((-1.0)*sj2*x1952))+((r10*x1942))+((r11*x1939))+(((-1.0)*cj5*r12*x1936))+(((-1.0)*r10*x1953))+((x1934*x1941)));
evalcond[8]=(((x1938*x1948))+((r01*x1939))+(((-1.0)*cj2*x1952))+(((-1.0)*cj5*r02*x1936))+((r00*x1942))+(((-1.0)*r00*x1953))+(((-1.0)*x1934*x1947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "81bc677514b48fac1d1a083f264882cf"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
